local UserInputService = game:GetService("UserInputService") or game.UserInputService
local VirtualInputManager = game:GetService("VirtualInputManager") or game.VirtualInputManager
local VirtualUser = game:GetService("VirtualUser") or game.VirtualUser
local TweenService = game:GetService("TweenService") or game.TweenService
local RunService = game:GetService("RunService") or game.RunService
local HttpService = game:GetService("HttpService") or game.HttpService
local LocalPlayer = game:GetService("Players").LocalPlayer or game.Players.LocalPlayer
local MarketplaceService = game:GetService("MarketplaceService") or game.MarketplaceService
local plr = game:GetService("Players").LocalPlayer or game.Players.LocalPlayer
local CommF = game.ReplicatedStorage.Remotes["CommF_"]
local Request = (syn and syn.request) or (identifyexecutor() == 'Fluxus' and request) or http_request or http.request or request
local Mouse = LocalPlayer:GetMouse()
local GameVersion = MarketplaceService:GetProductInfo(game.PlaceId).Updated
local Secure_KEY = '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'
local String_forBase64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local UtilSecure = {}

local StopFarm = {'Farm', 'QuestLvl', 'LvlKillPlayer'}
UseFastAttack = true
ClickAttackPlayer = false

UtilSecure.Base64Encode = function(data)
    return ((data:gsub('.', function(x) 
        local r,b='',x:byte()
        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
        return r;
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c=0
        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
        return String_forBase64:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#data%3+1])
end

UtilSecure.Base64Decode = function(data)
    data = string.gsub(data, '[^'..String_forBase64..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(String_forBase64:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
            return string.char(c)
    end))
end

local Quest_Sea = 1

if game.PlaceId == 2753915549 then
    Quest_Sea = 1
elseif game.PlaceId == 4442272183 then
    Quest_Sea = 2
elseif game.PlaceId == 7449423635 then
    Quest_Sea = 3
end

local UselessQuest = {
    "BartiloQuest",
    "Trainees",
    "MarineQuest",
    "CitizenQuest"
}

local QuestModule = require(game.ReplicatedStorage.Quests)

local QuestPoses = {}
local QuestNPCs = {}
local DialoguesList = {}

for i, v in pairs(require(game.ReplicatedStorage.DialoguesList)) do
    DialoguesList[v] = i
end

local VersionSite = game:HttpGet('https://raw.githubusercontent.com/vandokid/aqSWozOCfQarfZMXCDLEDwwwCBzWIZen/main/version?token='..UtilSecure.Base64Encode(tostring(os.time()..math.random(0, 999))))
        for i, v in pairs(getnilinstances()) do 
            if v:IsA("Model") and v:FindFirstChild("Head") and v.Head:FindFirstChild("QuestBBG") and v.Head.QuestBBG.Title.Text == "QUEST" then
                QuestPoses[v.Name] = v.Head.CFrame * CFrame.new(0, -1, -2)    
            end
        end

        for i, v in ipairs(game.Workspace.NPCs:GetDescendants()) do 
            if v.Name == "QuestBBG" and v.Title.Text == "QUEST" then
                QuestPoses[v.Parent.Parent.Name] = v.Parent.Parent.Head.CFrame * CFrame.new(0, -1, -2)    
            end
        end

        local PSNPC = getscriptclosure(game.Players.LocalPlayer.PlayerScripts.NPC)
        local listremote = {}

        for i, v in pairs(debug.getprotos(PSNPC)) do 
            if #debug.getconstants(v) == 1 then 
                table.insert(listremote, debug.getconstant(v, 1))    
            end
        end

        local start = false
        local DialogueList = {}
        for i, v in pairs(debug.getconstants(PSNPC)) do
            if type(v) == "string" then 
                if v == "Players" then
                    start = false
                end
                if not start then 
                    if v == "Blox Fruit Dealer" then 
                        start = true    
                    end  
                end
                if start then 
                    table.insert(DialogueList, v)    
                end
            end
        end
        QuestNPCs = {}
        for i, v in pairs(DialogueList) do 
            if QuestPoses[v] then 
                local ractvk = listremote[i]
                QuestNPCs[ractvk] = DialogueList[i]    
            end
        end
        --// Update Version
        local ShaVersion = HttpService:JSONDecode(Request({Url = 'https://api.github.com/repos/vandokid/aqSWozOCfQarfZMXCDLEDwwwCBzWIZen/contents/version', Method = 'GET', Headers = {
            ['Accept'] = 'application/vnd.github+json',
            ['Authorization'] = 'Bearer '..Secure_KEY
        }}).Body).sha
        local ShaQuest = HttpService:JSONDecode(Request({Url = 'https://api.github.com/repos/vandokid/aqSWozOCfQarfZMXCDLEDwwwCBzWIZen/contents/quest'..Quest_Sea, Method = 'GET', Headers = {
            ['Accept'] = 'application/vnd.github+json',
            ['Authorization'] = 'Bearer '..Secure_KEY
        }}).Body).sha
        Request({
            Url = 'https://api.github.com/repos/vandokid/aqSWozOCfQarfZMXCDLEDwwwCBzWIZen/contents/version',
            Headers = {
                ['Accept'] = 'application/vnd.github+json',
                ['Authorization'] = 'Bearer '..Secure_KEY
            },
            Method = 'PUT',
            Body = HttpService:JSONEncode({
                message = 'Update version' .. GameVersion,
                sha = ShaVersion,
                content = UtilSecure.Base64Encode(GameVersion)
            })
        })
        local a = 'local QuestPoses = {\n'
        for i,v in pairs(QuestPoses) do
            a = a .. '["'..i..'"] = CFrame.new(' .. tostring(v) .. '),\n'
        end
        a = a .. '}\nlocal QuestNPCs = {\n'
        for i,v in pairs(QuestNPCs) do
            a = a .. '["'..i..'"] = "' .. tostring(v) .. '",\n'
        end
        a = a .. '}\nreturn QuestPoses, QuestNPCs'
        Request({
            Url = 'https://api.github.com/repos/vandokid/aqSWozOCfQarfZMXCDLEDwwwCBzWIZen/contents/quest'..Quest_Sea,
            Headers = {
                ['Accept'] = 'application/vnd.github+json',
                ['Authorization'] = 'Bearer '..Secure_KEY
            },
            Method = 'PUT',
            Body = HttpService:JSONEncode({
                message = 'Update Quest' .. GameVersion,
                sha = ShaQuest,
                content = UtilSecure.Base64Encode(a)
            })
        })
print('aa')
