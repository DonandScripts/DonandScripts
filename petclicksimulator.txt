-- Bee Swarm Simulator
 
local plr = game.Players.LocalPlayer
function vToK(tabl)
    local out = {}
    for k, v in pairs(tabl) do
        out[v] = k
    end
    return out
end
function ToST(tabl, s)
    local out = {}
    for k, v in pairs(tabl) do
       out[k]=s
    end
    return out
end
local ListTileGrid = {}
for k,v in pairs(plr.PlayerGui.ScreenGui:GetChildren()) do 
    if v.Name=="TileGrid" then 
        table.insert(ListTileGrid,v)
    end
end
local BarId = {
    ["Glue"] = "rbxassetid://2504978518",
    ["Oil"] = "rbxassetid://2545746569",
    ["Enzymes"] = "rbxassetid://2584584968",
    ["Tropical Drink"] = "3835877932",
    ["Blue Extract"] = "rbxassetid://2495936060",
    ["Red Extract"] = "rbxassetid://2495935291",
    ["Stinger"] = "2314214749",
    ["Gumdrop"] = "rbxassetid://1838129169"
}
local SpawnTable = {}
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end
function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
local TokenId = {
    ["Ticket"] = "rbxassetid://1674871631",
    ["Glue"] = "rbxassetid://2504978518",
    ["Pineapple"] = "rbxassetid://1952796032",
    ["Strawberry"] = "1952740625",
    ["Blueberry"] = "rbxassetid://2028453802",
    ["SunflowerSeed"] = "rbxassetid://1952682401",
    ["Treat"] = "rbxassetid://2028574353",
    ["Gumdrop"] = "rbxassetid://1838129169",
    ["Red Extract"] = "2495935291",
    ["Blue Extract"] = "rbxassetid://2495936060",
    ["Oil"] = "2545746569",
    ["Glitter"] = "rbxassetid://2542899798",
    ["Enzymes"] = "rbxassetid://2584584968",
    ["TropicalDrink"] = "3835877932",
    ["Diamond Egg"] = "rbxassetid://1471850677",
    ["Gold Egg"] = "rbxassetid://1471849394",
    ["Mythic Egg"] = "4520739302",
    ["Star Treat"] = "rbxassetid://2028603146",
    ["Royal Jelly"] = "rbxassetid://1471882621",
    ["Star Jelly"] = "rbxassetid://2319943273",
    ["Moon Charm"] = "rbxassetid://2306224708",
    ["Super Smoothie"] = "5144657109",
    ["Bitterberry"] = "4483236276",
    ["Festive Bean"] = "4483230719",
    ["Ginger Bread"] = "6077173317",
    ["Aged Ginger Bread"] = "6077173317",
    ["Honey Token"] = "1472135114",
    ["Purple Poition"] = "4935580111",
    ["Snowflake"] = "6087969886",
    ["Magic Bean"] = "2529092020",
    ["Neonberry"] = "4483267595",
    ["Swirled Wax"] = "8277783113",
    ["Soft Wax"] = "8277778300",
    ["Hard Wax"] = "8277780065",
    ["Caustic Wax"] = "827778166",
    ["Token Link"] = "1629547638",
    ["Inspire"] = "2000457501",
    ["Bear Morph"] = "177997841",
    ["Polen Bomb"] = "1442725244",
    ["Fuzz Bomb"] = "4889322534",
    ["Polen Haze"] = "4889470194",
    ["Triangulate"] = "4519523935",
    ["Inferno"] = "4519549299",
    ["Summon Frog"] = "4528414666",
    ["Tornado"] = "3582519526",
    ["Cross Hair"] = "rbxassetid://8173559749",
    ["Red Boost"] = "1442859163",
    ["Inflate Ballon"] = "8083437090"
}
local TokenId2 = {
    ["Bitterberry2"] = "4483230719"
}

local PrioritizeList = {
    ["Token Link"] = "1629547638",
    ["Inspire"] = "2000457501",
    ["Bear Morph"] = "177997841",
    ["Polen Bomb"] = "1442725244",
    ["Fuzz Bomb"] = "4889322534",
    ["Polen Haze"] = "4889470194",
    ["Triangulate"] = "4519523935",
    ["Inferno"] = "4519549299",
    ["Summon Frog"] = "4528414666",
    ["Tornado"] = "3582519526",
    ["Cross Hair"] = "rbxassetid://8173559749",
    ["Red Boost"] = "1442859163",
    ["Inflate Ballon"] = "8083437090"
}
local ItemDonateList = {
    "FieldDice",
    "JellyBeans",
    "Enzymes",
    "Treat",
    "SunflowerSeed",
    "Strawberry",
    "Pineapple",
    "Blueberry",
    "Bitterberry",
    "Neonberry",
    "Moon Charm",
    "BasicEgg",
    "SilverEgg",
    "DiamondEgg",
    "Ticket",
    "Gumdrops",
    "Coconut",
    "Stinger",
    "Micro-Converter",
    "RoyalJelly",
    "Gold",
    "TropicalDrink",
    "MagicBean",
    "CloudVial",
    "Box-O-Frogs",
    "AntPass",
    "RedExtract",
    "BlueExtract",
    "Glitter",
    "Glue",
    "Oil",
    "PurplePotion"
}

for k, v in pairs(TokenId) do
    PrioritizeList[k] = v
end
function TablePrioti()
    a = {}
    for i,v in pairs(TokenId) do
        table.insert(a, i)
    end
    return a
end

local FieldIconID = {
    ["Sunflower Field"] = "rbxassetid://2908769405",
    ["Dandelion Field"] = "rbxassetid://2908769047",
    ["Strawberry Field"] = "rbxassetid://2908769330",
    ["Blue Flower Field"] = "rbxassetid://2908768899",
    ["Clover Field"] = "rbxassetid://2908768973",
    ["Mushroom Field"] = "rbxassetid://2908769124",
    ["Spider Field"] = "rbxassetid://2908769301",
    ["Bamboo Field"] = "rbxassetid://2908768829",
    ["Pineapple Patch"] = "rbxassetid://2908769153",
    ["Stump Field"] = "rbxassetid://2908769372",
    ["Cactus Field"] = "rbxassetid://2908768937",
    ["Pumpkin Patch"] = "rbxassetid://2908769220",
    ["Pine Tree Forest"] = "rbxassetid://2908769190",
    ["Rose Field"] = "rbxassetid://2908818982",
    ["Coconut Field"] = "rbxassetid://2908769010",
    ["Mountain Top Field"] = "rbxassetid://2908769086",
    ["Ant Field"] = "rbxassetid://2908768728",
    ["Pepper Patch"] = "3835712489"
}
function GetCurrentFieldBoost()
    local tab = {}
    for k,v in pairs(ListTileGrid) do 
        local GUI = v
        for _, v in pairs(GUI:GetChildren()) do
            if v.Name == "IconTile" and v:FindFirstChild("BG") then
                for f, s in pairs(FieldIconID) do
                    if
                        v.BG:FindFirstChild("Icon") and v.BG:FindFirstChild("Text") and v.BG:FindFirstChild("Bar") and
                            v.BG.Icon.Image == s and
                            v.BG.Bar.BackgroundColor3 == Color3.fromRGB(255, 228, 81)
                     then
                        tab[f] = v.BG.Text.Text
                    end
                end
            end
        end
    end
    
    return tab
end

function IsAnyBoost()
    local t = GetCurrentFieldBoost()
    for k, v in pairs(t) do
        return true
    end
    return false
end

local NoSell = false
local plr = game.Players.LocalPlayer
local TvkStatCache = require(game.ReplicatedStorage.ClientStatCache):Get()
spawn(function() 
    while wait(1) do 
        TvkStatCache =require(game.ReplicatedStorage.ClientStatCache):Get()
        getfenv().TvkStatCache = TvkStatCache
    end
end)

function GetCurrenItem(Item)
    local StatCache = TvkStatCache
    local a = StatCache["Eggs"][Item]
    if a then return a else return 0 end
end
getgenv().Settings = {
    ['Selected Field'] = nil,
    ['Disable Convert Honey'] = false,
    ['Bee Energy'] = 50,
    ['Reset After Bee Energy Is Lower Than X'] = false,
    ['Convert Backpack'] = 100,
    ['Equip Honey Mask'] = false,
    ['Auto Dig'] = true,
    ['Stay Field'] = 0,
    ['Auto Farm'] = false,
    ['Avoid Mob'] = false,
    ['Auto Fire Face'] = false,
    ['Auto Tide Face'] = false,
    ['Auto Sprout'] = false,
    ['Auto Guiding Field'] = false,
    ['Auto Field Boost'] = false,
    ['Auto Collect Bubble'] = false,
    ['Auto Bubble Bloat Collector'] = false,
    ['Auto Collect Duped Token'] = false,
    ['Gather Flame'] = false,
    ['Auto Walk To Balloon'] = false,
    ['Auto Walk To Mark'] = false,
    ["Selected Quests"] = {
        "Black Bear",
        "Polar Bear",
        "Brown Bear",
        "Panda Bear",
        "Science Bear",
        "Bucko Bee",
        "Riley Bee",
        "Spirit Bear",
        "Onett"
    },
    ['Auto Farm Quest'] = false,
    ['Ignore Honey Bee Quest'] = false,
    ['Auto Gumdrops When Have Goo Quest'] = false,
    ['Auto Ant Challenge'] = false,
    ['Auto Kill Snail'] = false,
    ['Selected Mob'] = {'Rhino Beetle','Spider','Werewolf','Scorpion','Mantis','Ladybug'},
    ['Mob Spawn Delay'] = 30,
    ['Auto Kill Mob'] = false,
    ['Max Vicious Level'] = 20,
    ['Min Vicious Level'] = 10,
    ['Auto Vicious Bee'] = false,
    ["Auto Windy Bee"] = false,
    ['Selected Auto Use Summoner & Machine'] = {},
    ['Selected Auto Use Items'] = {},
    ['Selected Auto Field Boost'] = {},
    ['Selected Auto Use Dispensers'] = {},
    ["Selected Ignore Token"] = {},
    ["Selected Boss"] = {},
    ['Selected Item Notifications'] = {},
}

local Settings = getgenv().Settings

local SaveFileName = getgenv().SaveFileName or plr.Name.."_BSS.json"

function SaveSettings()
    local HttpService = game:GetService("HttpService")
    if not isfolder("Adel Hub") then
        makefolder("Adel Hub")
    end
    writefile("Adel Hub/" .. SaveFileName, HttpService:JSONEncode(Settings))
end

function ReadSetting() 
    local s,e = pcall(function() 
        local HttpService = game:GetService("HttpService")
        if not isfolder("Adel Hub") then
            makefolder("Adel Hub")
        end
        return HttpService:JSONDecode(readfile("Adel Hub/" .. SaveFileName))
    end)
    if s then return e 
    else
        SaveSettings()
        return ReadSetting()
    end
end
Settings = ReadSetting()


local LevelFarm = {"CurrentField","QuestPollen","QuestField","FieldBoost","QuestMob","Guiding","Sprout","Pushroom","StickBug","Metor","Mob"}
local LevelFarmVK = vToK(LevelFarm)
local FarmFieldList = setmetatable({},{
    __index = function(self,index)
        if LevelFarmVK[index]==0 then return end
        return self[LevelFarm[LevelFarmVK[index]-1]]
    end
}) 
FarmFieldList["CurrentField"] = Settings['Selected Field'] or "Sunflower Field"

local Sprinklers = {
    ["The Supreme Saturator"] = 1,
    ["Basic Sprinkler"] = 1,
    ["Silver Soakers"] = 2,
    ["Golden Gushers"] = 3,
    ["Diamond Drenchers"] = 4
}

local FieldFarmPos = {
    -- SunflowerField = {
    --     Listpos = {},
    --     Range = {}
    -- }
}
repeat wait() until game:IsLoaded()
local plr = game.Players.LocalPlayer
repeat wait() until plr
repeat wait() until plr.Character
repeat wait() until plr.Character:FindFirstChild("HumanoidRootPart")
repeat wait() until plr.PlayerGui:FindFirstChild("ScreenGui")
repeat wait() until plr.PlayerGui:FindFirstChild("ScreenGui"):FindFirstChild("Menus")
repeat wait() until plr.PlayerGui:FindFirstChild("ScreenGui"):FindFirstChild("LoadingMessage")
repeat wait() until plr.PlayerGui:FindFirstChild("ScreenGui"):FindFirstChild("LoadingMessage").Visible==false
local connect
local funcwrap
local ret
local ListFunc = {}
local old23
local connect2 -- LPH_NO_VIRTUALIZE
old23 = hookmetamethod(game,"__index",(function(...) 
    if checkcaller() then return old23(...) end
    if not connect then 
        connect=Instance.new("IntValue")
        connect.Changed:Connect(function(val)
            if val==100 then 
                for k,v in pairs(ListFunc) do 
                    if not v.Done then 
                        spawn(function() 
                            local s,e = pcall(function() 
                                v.Res = k()
                            end)
                            --if e then print(e) end
                            v.tvk = true
                            connect2.Value=100
                            connect2.Value=0
                        end)
                        v.Done=true
                    end
                end
            end 
        end)
    end
    return old23(...)
end))
repeat wait() until connect
function warpF2(f) 
    if not connect2 then 
        connect2=Instance.new("IntValue")
    end
    ListFunc[f] = {}


    connect.Value=100
    connect.Value=0
    
    while not ListFunc[f].tvk do 
        connect2.Changed:Wait()
    end
    local res = ListFunc[f].Res
    ListFunc[f] = nil
    return res
end
getfenv().TvkStatCache = TvkStatCache

local Whitelist = {}
local ListAllToken = {}
local ListAllDupedToken = {}
local OrionLib = loadstring(game:HttpGet(("https://raw.githubusercontent.com/DonandScripts/IjK4rSEaL88KQAF2azTaH3tSTVPGYjbfXgW62mdFNeFMXhtUmq9I8CKPMux5IjK4rSEaL88KQAF2azTaH3tSTVPGYjbfXgW62mdF/main/aaaa")))()
local Window = OrionLib:MakeWindow({Name = "Adel Hub - BSS",IntroEnabled =true,IntroText ='Adel Hub Library',IntroIcon = 'rbxassetid://13779309461' , HidePremium = false, SaveConfig = false, ConfigFolder = "OrionTest"})

local StopFarm = {"Farm",'CAI CON CAC',"SetHeight", "FTPrio", "Snail","Metor","Kill","Stocking","Snowflake","Rare","Leaf","Firefly","Donate","Planter","Stick","Ant","Dispenser","Craft","Memory","FieldBoost","tuoidz","StopMoreOne"}

local StopFarmVK = vToK(StopFarm)
local StopFarmList = ToST(StopFarmVK,false)

function CheckFarm(name) 
    if type(name) == 'table' then
        for i = 1, #name do
            for i2 = 1, #StopFarm do
                if StopFarm[i2] == name[i] and StopFarmList[StopFarm[i2]] then
                    return false
                end
            end
        end
    else
        local index = StopFarmVK[name]
        if index then 
            for i=index+1,#StopFarm do 
                if StopFarmList[StopFarm[i]] then 
                    return false
                end
            end
            return true
        end
    end
    return false
end

function Dig()
    local tool
    for _, v in pairs(plr.Character:GetChildren()) do
        if v:IsA("Tool") and v:FindFirstChild("ClickEvent") then
            tool = v
        end
    end
    local t = getsenv(tool.ClientScriptMouse).collectStart
    t()
end 

function GetFlower(field, x, y)
    local part = game.Workspace.Flowers:FindFirstChild(tostring(field) .. "-" .. tostring(x) .. "-" .. tostring(y))
    return part
end
loadstring([[
function getIntersection(part, ray)
    local whiteList = {part}
    return workspace:FindPartOnRayWithWhitelist(ray, whiteList)
end]])()
function mysplit(inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t = {}
    for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
        table.insert(t, str)
    end
    return t
end
function GetXY(part)
    local name = mysplit(part.name, "-")
    return unpack(name)
end

function GetFieldByName(name)
    return game.Workspace.FlowerZones:FindFirstChild(name)
end
function GetListField(a)
    local tablee = {}
    for _, v in pairs(game.Workspace.FlowerZones:GetChildren()) do
        table.insert(tablee, v.Name)
    end
    if a then 
        table.insert(tablee,a)
    end
    return tablee
end
function GetFieldByName(name)
    return game.Workspace.FlowerZones:FindFirstChild(name)
end
function GetFieldId(name)
    return GetFieldByName(name).ID.Value
end
function GetCurrentHive() 
    for k,v in ipairs(game:GetService("Workspace").Honeycombs:GetChildren()) do 
        if tostring(v.Owner.Value)==plr.Name then 
            return v
        end
    end
end
loadstring([[
    function GetBallonLevel(v,max) 
        if pcall(function() return v.BalloonBody.GuiAttach.Gui.BlessingBar.TextLabel end) then 
            local text =v.BalloonBody.GuiAttach.Gui.BlessingBar.TextLabel.Text
            for i=1,200 do 
                if text=="🎈 Blessing x"..i then 
                    return i
                end
            end
        end
    end
]])()
function GetHiveBallon(bl)
    local Hive = GetCurrentHive()
    if Hive then 
        for k,v in ipairs(game:GetService("Workspace").Balloons.HiveBalloons:GetChildren()) do 
            if v:FindFirstChild("BalloonRoot") and  pcall(function() return v.BalloonBody.GuiAttach.Gui.BlessingBar.TextLabel end)  then 
                if (v.BalloonRoot.Position - Hive.SpawnPos.Value.p).magnitude<30 then 
                    local lv = (v:FindFirstChild("Level") and v.Level.Value) or GetBallonLevel(v)
                    if lv then 
                        if not v:FindFirstChild("Level") then 
                            local levl = Instance.new("IntValue",v)
                            levl.Name="Level"
                            levl.Value=lv
                        end
                        if v.BalloonBody.GuiAttach.Gui.BlessingBar.TextLabel.Text~="🎈 Blessing x"..v.Level.Value then 
                            v.Level.Value=GetBallonLevel(v)
                        end
                        if lv>=bl then return v end
                    end
                end
            end
        end
    end
end
function GetFieldByFP(name) 
    local dit = name
    for k,v in pairs(GetListField()) do 
        local id = GetFieldId(v)
        if dit=="FP"..id then 
            return v
        end
    end
end
getgenv().IsTokenBlacklist = function(token)
    if token:FindFirstChild('Blacklisted') then
        return true
    end
    return false
end
getgenv().IsToken = function(token)
    if token == nil then
        return false
    end
    if not token.Parent then return false end
    if token then
        if token.Orientation.Z ~= 0 then
            return false
        end
        if token:FindFirstChild("FrontDecal") then
        else
            return false
        end
        if not token.Name == "C" then
            return false
        end
        if not token:IsA("Part") then
            return false
        end
        return true
    else
        return false
    end
end
function Walkk(t, token,dieukien,spamwalk)
    local Character = plr.Character
    local Humanoid = Character:WaitForChild("Humanoid")
    local stop = false
    Character:WaitForChild("Humanoid"):MoveTo(t.p)
    local vohoangnang = Character:WaitForChild("Humanoid").MoveToFinished:Connect(
        function()
            stop = true
        end
    )
    local a = tick()
    while (stop == false) do
        if Call then
            Call()
        end
        wait()
        if spamwalk then 
            Character:WaitForChild("Humanoid"):MoveTo(t.p)
        end
        if (token and not getgenv().IsToken(token)) then
        Character:WaitForChild("Humanoid"):Move(Vector3.new(0, 0, 0))
            stop=true
            vohoangnang:Disconnect()
            return
        end
        if dieukien and not dieukien() then 
            Character:WaitForChild("Humanoid"):Move(Vector3.new(0, 0, 0))
            stop=true
            vohoangnang:Disconnect()
            return
        end
        -- if tick() - a >= 5  then
        --     Character:WaitForChild("Humanoid"):Move(Vector3.new(0, 0, 0))
        --     plr.Character:WaitForChild("HumanoidRootPart").CFrame = t
        --     stop = true
        -- end
    end
    vohoangnang:Disconnect()
end--LPH_NO_VIRTUALIZE
getgenv().IsValidTokenPos = (function(token, Field,infield,sucvatruabithieunangvathanhtuoicungbithieunangvandokhongbithieunangttdbithieunangbrosabithieunangtvkkhongbithieunang)
    local pos
    if type(token) == "vector" then 
        pos = token
    else
        pos = token.Position
    end

    local kc = 60
    local Field = GetFieldByName(Field) or 'Sunflower Field'
    if Field:FindFirstChild("Range") then kc=Field.Range.Value end
    local bool = false
    local Character = plr.Character
    local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    
    if not infield and Field.Name~="Puffshroom Field" then 
        local whitelist = {game.Workspace.Flowers}
        local ray = Ray.new(pos+Vector3.new(0,5,0), Vector3.new(0, -1000, 0))
        local thieutvknang = workspace:FindPartOnRayWithWhitelist(ray, whitelist)
        if thieutvknang then 
            local curr,x,y = GetXY(thieutvknang)
            local CurrentField = GetFieldByFP(curr)
            if CurrentField == Field.Name then 
               return math.abs(pos.Y-thieutvknang.Position.Y) 
            end
        end
    else
        
        if (pos - Field.Position).magnitude < kc then
            if infield then 
                for k,v in pairs(infield.List) do
                    if (pos-v.p).magnitude>infield.Range then return false end
                end
            end
            return math.abs(pos.Y-Field.Position.Y) 
        end
    end
end)
function IsValidCharactPos(Field)
    local bool = false
    local Character = plr.Character
    
    local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    if not IsValidTokenPos(Character.HumanoidRootPart,Field) then return false end
    local Field = GetFieldByName(Field)
    local kc = 100
    if Field:FindFirstChild("Range") then kc=Field.Range.Value end
    if (Field.Position - HumanoidRootPart.Position).magnitude < kc then
        bool = true
    end
    
    
    return bool
end

function IsBackPackFull(a)
    if Settings["Convert Balloon Method"] ~= "Convert when selling" then 
        if GetHiveBallon(Settings['Convert at X Balloon'] or 0) then 
            return true
        end
    end
    
    local bool = false
    local Player = plr
    local Character = Player.Character
    local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    if not a then a = 100 end
    if Player.CoreStats.Pollen.Value >= (Player.CoreStats.Capacity.Value*a)/100 then
        bool = true
    end
    return bool
end
function kc(a,huhu)
    local nang = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    if huhu then 
        a = Vector3.new(a.X,0,a.Z)
        nang = Vector3.new(nang.X,0,nang.Z)
    end 
    return (nang-a).magnitude
end
local Last
function tpT(t, k, dieukien, disableinstanttp,instanttp)

    if Last then Last() Last=nil end
    if not plr.Character:FindFirstChild("HumanoidRootPart")  or not plr.Character:FindFirstChild("UpperTorso") then return end
    if instanttp then 
        plr.Character.HumanoidRootPart.CFrame=t
        return
    end
    if kc(t.p) > 2000 then 
        plr.Character.HumanoidRootPart.CFrame=t
        return
    end
    if plr.Character:FindFirstChild("HumanoidRootPart") and not disableinstanttp
    and (plr.Character.HumanoidRootPart.Position-t.p).magnitude < 80 then 
        plr.Character.HumanoidRootPart.CFrame=t
    else
        if not k then
            k = 100
        end
        local tween_s = game:service "TweenService"
        local info =
            TweenInfo.new(
            (plr.Character:WaitForChild("HumanoidRootPart").Position - t.p).magnitude / k,
            Enum.EasingStyle.Linear
        )
        local breakdk = false
        local tic_k = tick()
        local cframe
        if plr.Character.UpperTorso:FindFirstChild('adel') then 
            cframe= CFrame.lookAt(t.Position, plr.Character.UpperTorso['adel'].CFrame.lookVector)
        else
            cframe = CFrame.lookAt(t.Position, plr.Character.HumanoidRootPart.CFrame.lookVector)
        end
        local tween, err =
            pcall(
            function()
                local tween =
                    tween_s:Create(plr.Character:WaitForChild("HumanoidRootPart"), info, {CFrame = cframe})
                local done = false
                local Stop = function() done=true end
                Last=Stop
                tween.Completed:Connect(
                    function()
                        done = true
                    end
                )
                getgenv().noclip = true
                --SetEN("Noclip", "Tween", true)
                tween:Play()
                while not done do
                    if not plr.Character:FindFirstChild("HumanoidRootPart") then return end
                    getgenv().noclip = true
                    --SetEN("Noclip", "Tween", true)
                    if (plr.Character.HumanoidRootPart.Position - Vector3.new(30.017883300781, 68.458869934082, -146.99607849121)).magnitude <= 130
                    and plr.Character.HumanoidRootPart.Position.Y >= 60
                    and plr.Character.HumanoidRootPart.Position.Y < 80 then 
                        tween:Cancel()
                        done=true
                        plr.Character.HumanoidRootPart.CFrame = t
                        break
                    end
                    if  ((plr.Character.HumanoidRootPart.Position-t.p).magnitude < 80 or instanttp) and not disableinstanttp then 
                        tween:Cancel()
                        done=true
                        plr.Character.HumanoidRootPart.CFrame = t
                        break
                    end
                    if dieukien and type(dieukien)=="function" then 
                        if not dieukien() then 
                            tween:Cancel()
                            done=true
                            breakdk=true
                            break;
                        end
                    end
                    wait()
                end
                tween:Cancel()
                getgenv().noclip = false
                --SetEN("Noclip", "Tween", false)
            end
        )
        getgenv().noclip = false
        --SetEN("Noclip", "Tween", false)
        return breakdk;
    end
end
function reverse(t)
    local n = #t
    local i = 1
    while i < n do
      t[i],t[n] = t[n],t[i]
      i = i + 1
      n = n - 1
    end
    return t
  end
function GetPlrHive() 
    for _, v in pairs(game.Workspace.Honeycombs:GetChildren()) do
        if tostring(v.Owner.Value) == plr.Name then
            return v
        end
    end
end
if not getgenv().DisableClaimHive then 
    while not GetPlrHive() do 
        for _, v in pairs(reverse(game.Workspace.Honeycombs:GetChildren())) do
            if tostring(v.Owner.Value) == "nil" then
                tpT(v.LightHolder.CFrame)
                wait(1)
                game.ReplicatedStorage.Events.ClaimHive:FireServer(v.HiveID.Value)
                break;
            end
        end
    end
end
loadstring([[
    function GetFieldByText(text) 
        for k,v in pairs(GetListField()) do 
            if string.match(text,v) then return v end
        end
    end
    function GetNerestFieldByObject(Obj)
        local lis = GetListField()
        local old = "Sunflower Field"
        for k, v in pairs(lis) do
            if v and v~="Puffshroom Field" then
                if
                    (Obj.Position - GetFieldByName(v).Position).magnitude <
                        (Obj.Position - GetFieldByName(old).Position).magnitude
                 then
                    old = v
                end
            end
        end
        return old
    end

]])()
function TpToHive()
    pcall(function() 
        local sp = plr.SpawnPos.Value.p
        local p = CFrame.new(sp.X, sp.Y, sp.Z, -0.996, 0, 0.02, 0, 1, 0, -0.02, 0, -0.9) + Vector3.new(0, 0, 8)
        Going = true
        tpT(p, 100)
        Going = false
    end)
end
function NormalSell()
    local old = TvkStatCache.SessionAccessories.Hat
    if Settings['Equip Honey Mask'] then 
        game:GetService("ReplicatedStorage").Events.ItemPackageEvent:InvokeServer("Equip", {
            ["Mute"] = true,
            ["Type"] = "Honey Mask",
            ["Category"] = "Accessory"
        })
    end
    local Player = plr
    local Character = Player.Character
    local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    local sangzboi = HumanoidRootPart.CFrame
    TpToHive()
    wait(.2)
    game:GetService("ReplicatedStorage").Events.PlayerHiveCommand:FireServer("ToggleHoneyMaking")
    wait(.5)
    repeat
        local tpos = plr.PlayerGui.ScreenGui.ActivateButton
        if tpos.AbsolutePosition.Y ~= 4 then
            game:GetService("ReplicatedStorage").Events.PlayerHiveCommand:FireServer("ToggleHoneyMaking")
            TpToHive()
            wait(.5)
        end
        if string.match(tpos.TextBox.Text, "Stop") then
        else
            if string.match(tpos.TextBox.Text, "Collect") then
            else
                if string.match(tpos.TextBox.Text, "Talk") then
                else
                    game:GetService("ReplicatedStorage").Events.PlayerHiveCommand:FireServer(
                        "ToggleHoneyMaking"
                    )
                    wait(.5)
                end
            end
        end
        wait()
    until (function() if Settings['Auto Convert Balloon'] then 
    if GetHiveBallon(Settings['Convert at X Balloon'] or 0) then return false end
    end 
    if Player.CoreStats.Pollen.Value <= 0 then return true end
end)() or not Settings['Auto Farm'] or not CheckFarm('Farm')
    wait(3)
    game:GetService("ReplicatedStorage").Events.ItemPackageEvent:InvokeServer("Equip", {
        ["Mute"] = true,
        ["Type"] = old,
        ["Category"] = "Accessory"
    })
end

function TpToField(Field,dk)
    local p = GetFieldByName(Field).CFrame * CFrame.new(0, 0, 0) + Vector3.new(0, 8, 0)
    return tpT(p, 100,dk)
end

local MainTab = Window:MakeTab({
	Name = "Main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false,
    Default = true
})

local ServerSection = MainTab:AddSection({
    Name = 'Server Section'
})
function GetPingTextPath() 
    for i, v in ipairs(game.CoreGui.RobloxGui.PerformanceStats:GetChildren()) do
        if v:FindFirstChild("StatsMiniTextPanelClass") and v.StatsMiniTextPanelClass.TitleLabel.Text == "Ping" then
            return v.StatsMiniTextPanelClass.ValueLabel
        end
    end
end
function ConvertPing(v)
    v = v.Text:gsub(" ms", "")
    return tonumber(v)
end
function AutoRejoin(Status)
    getgenv().RejoinWhile = Status
    while getgenv().RejoinWhile do wait()
        if game.CoreGui.RobloxPromptGui.promptOverlay:FindFirstChild("ErrorPrompt") then
            if Settings['Auto Rejoin'] then    
                while wait() do
                    game:GetService("TeleportService"):Teleport(game.PlaceId, plr)
                    wait(10)
                end
            else
                game:Shutdown()
            end
        end
    end
end
AntiFoorezPingToggle = MainTab:AddToggle({
    Name = "Auto Rejoin",
    Default = Settings['Auto Rejoin'],
    Info = "Will rejoin when you get kicked.",
    Callback = function(bool)
        Settings['Auto Rejoin'] =bool
        spawn(function()
            AutoRejoin(Settings['Auto Rejoin'])
        end)
    end
})
function counttb(a) 
    local i = 0
    for k,v in pairs(a) do i=i+1 end
    return i
end
function comparetable(a,b) 
    if counttb(a)~=counttb(b) then return false end
    for k,v in pairs(a) do 
        if not b[k] then return false end
        if b[k] ~= v then return false end
    end
    for k,v in pairs(b) do 
        if not a[k] then return false end
        if a[k] ~= v then return false end
    end
    return true
end
SafeModeToggle = MainTab:AddToggle({
    Name = "Safe Mode",
    Default = Settings['Safe Mode'],
    Info = "Will auto kicked when suspicious activity is detected.",
    Callback = function(bool)
        Settings['Safe Mode'] =bool
        spawn(function()
            local dautien 
            while Settings['Safe Mode'] and wait(2) do 
                local set
                pcall(function() 
                    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
                    local data = StatCache.Get()
                    set = data.ServerSide.AntiCheat
                end)
                if set then 
                    if not dautien then 
                        dautien = set
                    end
                    if not comparetable(dautien,set) then 
                        plr:Kick("\n[Adel Hub]\n".." Safe Mode kicked you.")
                    end
                end
            end
        end)
    end
})
AntiFoorezPingToggle = MainTab:AddToggle({
    Name = "Anti Freeze Ping",
    Default = Settings['Anti Freeze Ping'],
    Info = "Will kick if you got freeze ping.",
    Callback = function(bool)
        Settings['Anti Freeze Ping'] = bool
        spawn(function()
            while Settings['Anti Freeze Ping'] and wait(1) do 
                pcall(
                    function()
                        if not game.CoreGui.RobloxGui:FindFirstChild("PerformanceStats") then
                            UserSettings().GameSettings.PerformanceStatsVisible = true
                            wait(1)
                        else
                            if not PingTextPath then 
                                PingTextPath = GetPingTextPath() 
                            end
                            if PingTextPath then 
                                if PingText == ConvertPing(PingTextPath) and PingText ~= 0 then
                                    bangnhaucmmsucvatruaditconmemayruathieunang = tick()
                                else
                                    deobangnhaucmmsucvatruaditconmemayruathieunang = tick()
                                end
                                if bangnhaucmmsucvatruaditconmemayruathieunang - deobangnhaucmmsucvatruaditconmemayruathieunang > 10 then 
                                    if Settings.KickMethod == "Close Game" then 
                                        game:Shutdown()
                                    else
                                        plr:Kick("\n[Adel Hub]\n".."Your ping got freeze.")
                                    end
                                    wait(10)
                                end
                                PingText = ConvertPing(PingTextPath)
                            end
                        end
                        
                    end
                )
            end
        end)
    end
})
function AutoKickT() 
    if not Settings['Time to Kick'] then Settings['Time to Kick'] = math.huge end
	while Settings['Auto Kick After X Time'] and wait() do 
		pcall(function() 
			local CurrentTick = tick()
			repeat wait()
			until tick() - CurrentTick >= Settings['Time to Kick'] * 60
			or not Settings['Auto Kick After X Time']
			if Settings['Auto Kick After X Time'] then
                plr:Kick("\n[Adel Hub]\n".. tostring(Settings['Time to Kick']) .." minute has been reached (Auto Kick After X Time)")
			end
		end)
	end
end
MainTab:AddToggle({
    Name = "Auto Kick After X Time",
    Default = Settings['Auto Kick After X Time'],
    Callback = function(bool)
        Settings['Auto Kick After X Time'] =bool
        spawn(AutoKickT)
    end
})
MainTab:AddSlider({
    Name = "Time to Kick",
    ValueName = " Minute",
    Min = 1,
    Max = 360,
    Default = Settings['Time to Kick'] or 180,
    Callback = function(number)
        Settings['Time to Kick'] = number
    end
})

MainTab:AddButton({
    Name = "Hop Server",
    Callback = function()
        Teleport()
    end
})

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local WindowFocusReleasedFunction = function()
	if getgenv().Settings['BoostFps'] then
		RunService:Set3dRenderingEnabled(false)
	end
	return
end
local WindowFocusedFunction = function()
	if getgenv().Settings['BoostFps'] then
		RunService:Set3dRenderingEnabled(true)
	end
	return
end
function Initialize()
	UserInputService.WindowFocusReleased:Connect(WindowFocusReleasedFunction)
	UserInputService.WindowFocused:Connect(WindowFocusedFunction)
	return
end
Initialize()
function BoostFPS()
    game:GetService("RunService"):Set3dRenderingEnabled(true)
    local Lighting = game:GetService("Lighting")
    local Terrain = workspace:FindFirstChildOfClass("Terrain")
    sethiddenproperty(Terrain, "Decoration", false)
    sethiddenproperty(game.Lighting, "Technology", 0)
    settings().Rendering.QualityLevel = "Level01"
    pcall(function()
        Terrain.WaterWaveSize = 0
        Terrain.WaterWaveSpeed = 0
        Terrain.WaterReflectance = 0
        Terrain.WaterTransparency = 0
    end)
    Lighting.GlobalShadows = false
    Lighting.FogEnd = 9e9
    for i, v in ipairs(Lighting:GetDescendants()) do
		if v:IsA("BlurEffect")
        or v:IsA("SunRaysEffect")
        or v:IsA("ColorCorrectionEffect")
        or v:IsA("BloomEffect")
        or v:IsA("DepthOfFieldEffect") then
			v.Enabled = false
        elseif v.Name == "FantasySky" then
            v:Destroy()
		end
	end
	wait(.25)
    for i, v in ipairs(workspace:GetDescendants()) do
        if v:IsA("Part")
        or v:IsA("SpawnLocation")
        or v:IsA("WedgePart")
        or v:IsA("Terrain")
        or v:IsA("UnionOperation")
        or v:IsA("CornerWedgePart")
        or v:IsA("TrussPart") then
			v.Material = "Plastic"
			v.Reflectance = 0
        elseif v:IsA("MeshPart") then
            v.Material = "Plastic"
			v.Reflectance = 0
            v.TextureID = ""
        elseif v.ClassName == "Decal"
        or v.ClassName == "Texture" then
            v.Transparency = 1
        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
			v.Lifetime = NumberRange.new(0)
        elseif v:IsA("Explosion") then
			v.BlastPressure = 1
			v.BlastRadius = 1
        end
    end
end

local VisualSection = MainTab:AddSection({
    Name = 'Visual Section'
})

BoostFPSToggle = MainTab:AddToggle({
    Name = "Boost FPS",
    Default = Settings['Boost FPS'],
    Callback = function(bool)
        Settings['Boost FPS'] = bool
        if Settings['Boost FPS'] then
            spawn(function()
                BoostFPS()
            end)
        end
    end
})

function PlayersESP(Status)
    _G.TogglePlayerESP = Status
    while _G.TogglePlayerESP and wait() do 
        pcall(function()
            for i1, v1 in ipairs(game:GetService("Players"):GetPlayers()) do
                for i, v in ipairs(game.workspace:GetChildren()) do
                    if v.Name ~= game.Players.LocalPlayer.Name and v.Name == v1.Name and not v.LowerTorso:FindFirstChild("Player ESP") then
                        local BillboardGui = Instance.new("BillboardGui")
                        local TextLabel = Instance.new("TextLabel")
                        BillboardGui.Name = "Player ESP"
                        BillboardGui.Parent = v.LowerTorso
                        BillboardGui.AlwaysOnTop = true
                        BillboardGui.LightInfluence = 1 
                        BillboardGui.Size = UDim2.new(0, 75, 0, 75)
                        BillboardGui.StudsOffset = Vector3.new(0, 2, 0)
                        TextLabel.Parent = BillboardGui
                        TextLabel.BackgroundColor3 = Color3.new(1, 1, 1)
                        TextLabel.BackgroundTransparency = 1
                        TextLabel.Size = UDim2.new(1, 0, 1, 0)
                        TextLabel.Text = v.Name
                        TextLabel.TextColor3 = Color3.new(255, 255, 255)
                        TextLabel.TextScaled = true
                        TextLabel.TextStrokeTransparency = 0.5
                    end
                end
            end
            wait(1)
        end)
    end
end 

ESPPlayerToggle = MainTab:AddToggle({
    Name = "Players ESP",
    Default = Settings['Players ESP'],
    Callback = function(bool)
        Settings['Players ESP'] = bool
        spawn(function()
            if not Settings['Players ESP'] then
                wait(1)
                for i, v in ipairs(game.Workspace:GetDescendants()) do
                    if v.Name == "Player ESP" then
                        v:Destroy()
                    end
                end
            end
            PlayersESP(Settings['Players ESP'])
        end)
    end
})

local DonanteSection = MainTab:AddSection({
    Name = 'Donate Section'
})
local Dropdown = MainTab:AddDropdown({
    Name = "Select Items",
    Default = Settings['Selected Items'],
    Options = ItemDonateList,
    Callback = function(a)
        Settings['Selected Items'] = a
    end
})
Settings['Amount Items'] = 1
AmountTextBox = MainTab:AddTextbox({
    Name = "Amount Items (number)",
    Default = Settings['Amount Items'],
    Callback = function(a)
        Settings['Amount Items'] = tonumber(a)
    end
})
function WindshrineCoDangCooldownKhongVay() 
    local co = true
    local khong = false
    if not TvkStatCache.SystemTimes then return khong end
    if not TvkStatCache.SystemTimes.WindShrine then return khong end
    if not TvkStatCache.SystemTimes.WindShrine then return khong end 
    if os.time() - TvkStatCache.SystemTimes.WindShrine > 60*60 then return khong end
    return co
end
function AutoDonate()
    while Settings["Auto Donate"] and wait() do 
        if CheckFarm("Donate") then 
            if not WindshrineCoDangCooldownKhongVay() and GetCurrenItem(Settings['Selected Items']) >= (Settings['Amount Items'] or math.huge) then 
                StopFarmList["Donate"] = true
                tpT(CFrame.new(game:GetService("Workspace").NPCs["Wind Shrine"].Platform.Position)+Vector3.new(0,4,0))
                game.ReplicatedStorage.Events.WindShrineDonation:InvokeServer(Settings['Selected Items'], Settings['Amount Items'])
                game.ReplicatedStorage.Events.WindShrineTrigger:FireServer()
                wait(3)
            end

            for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                if getgenv().IsToken(v) and CheckFarm("Donate") then
                    local win = game:GetService("Workspace").NPCs["Wind Shrine"].Platform
                    if (win.Position - v.Position).magnitude < 30 and CheckFarm("Donate") then 
                        StopFarmList["Donate"] = true
                        wait(.5)
                        tpT(v.CFrame)
                    end
                end
            end
            StopFarmList["Donate"] = false
        end
    end
end
AutoDonateToggle = MainTab:AddToggle({
    Name = "Auto Donate",
    Default = Settings["Auto Donate"],
    Callback = function(bool)
        Settings["Auto Donate"] = bool
        spawn(function()
            AutoDonate()
        end)
    end
})
function GetMemoListName()
    local tab = {}
    for k, v in pairs(game.Workspace.Toys:GetChildren()) do
        if string.match(v.Name, "Memory Match") then
            table.insert(tab, v.Name)
        end
    end
    return tab
end


-- local MemoryMatchSection = MainTab:AddSection({
--     Name = 'Memory Match Section'
-- })
-- Settings['Selected Memory Match'] = {}
-- MemoryMatchDropdown = MainTab:AddDropdown({
--     Name = "Select Memory Match",
--     Default = Settings['Selected Memory Match'],
--     Multiple = true,
--     Options = GetMemoListName(),
--     Callback = function(a)
--         Settings['Selected Memory Match'] = a
--     end
-- })
-- function MemoryMatchCheat()
--     while Settings["Auto Memory Match"] and wait(1) do 
--         for i, v in pairs(plr.PlayerGui.ScreenGui:WaitForChild("MinigameLayer"):GetChildren()) do
--             for k, q in pairs(v:WaitForChild("GuiGrid"):GetDescendants()) do
--                 if q.Name == "ObjContent" or q.Name == "ObjImage" then
--                     q.Visible = true
--                 end
--             end
--         end
--     end
-- end
-- AutoMemoryMatchToggle = MainTab:AddToggle({
--     Name = "Auto Memory Match",
--     Default = Settings["Auto Memory Match"],
--     Callback = function(bool)
--         Settings["Auto Memory Match"] = bool
--         spawn(function()
--             MemoryMatchCheat()
--         end)
--     end
-- })

-- local MemoryMatchHash = {}
-- local MemoryMatchEventListen = {}
-- game:GetService("ReplicatedStorage").Events.MemoryMatchEvent.OnClientEvent:Connect(function(a) 
--     if a.Action == "RevealTile" then 
--         table.insert(MemoryMatchEventListen,a)
--     end
    
-- end)
-- function PlayMatch(slot) 
--     --print("banoi")
--     if pcall(function() return slot.StageGrow.StagePop.StageFlip.ObjCard.ObjButton end) and pcall(function() return slot.StageGrow.StagePop.StageFlip.ObjCard.ObjContent.GuiTile.StageGrow.StagePop.StageFlip.ObjCard.ObjButton end) then 
--         --print("Tvk")
--         local bocon = slot.StageGrow.StagePop.StageFlip.ObjCard.ObjContent.GuiTile.StageGrow.StagePop.StageFlip.ObjCard.ObjButton
--         local bome = slot.StageGrow.StagePop.StageFlip.ObjCard.ObjButton
--         --print("cc2")
--         for k,v in pairs(getconnections(bome.Activated)) do 
--             if v.Function then 
--                 warpF2(v.Function)
--             end
--         end
--          for k,v in pairs(getconnections(bocon.Activated)) do 
--              --v:Fire()
--             if v.Function then 
--                 warpF2(v.Function)
--             end
--          end
--     end
-- end
-- function PlayMatchWait(slot,cac,dit) 
--     local ui = plr.PlayerGui.ScreenGui:FindFirstChild("MinigameLayer")
--     if ui then 
--         if ui:FindFirstChild("MemoryMatchFrame") then 
--             local CurrentTabS = #MemoryMatchEventListen
--             repeat wait() PlayMatch(slot) until #MemoryMatchEventListen ~=CurrentTabS or not cac.Parent or dit.Visible==false
--             return MemoryMatchEventListen[#MemoryMatchEventListen]
--         end
--     end
    
-- end


-- --print(a.Search(game.Players.LocalPlayer))
-- spawn(function() 
--     while wait(1) do 
--         if Settings["Auto Memory Match"] then
--             MemoryMatchHash={}
--             MemoryMatchEventListen={}
--             local memgui
--             local ui = plr.PlayerGui.ScreenGui:FindFirstChild("MinigameLayer")
--             if ui and ui:FindFirstChild("MemoryMatchFrame") and ui.MemoryMatchFrame:FindFirstChild("GuiGrid") then
--                 if ui.MemoryMatchFrame.GuiGrid:FindFirstChild("GuiGrid") then 
--                     for k,v in pairs(ui.MemoryMatchFrame.GuiGrid:GetChildren()) do 
--                         if #v:GetChildren()>0 and v.Name=="GuiGrid" then
--                             memgui=v 
--                             break
--                         end
--                     end
--                 end
--             end
--             if memgui then 
--                 local memchild = memgui:GetChildren()
--                 local i = 1
--                 local memframe =ui:FindFirstChild("MemoryMatchFrame")
--                 while i<=#memchild and  memframe and memframe.Parent and ui.Visible do 
--                     if memframe.Parent then 
--                         local v = memchild[i]
--                         if v then 
--                             wait(1)
--                             local CurrentTabS = #MemoryMatchEventListen
--                             local a = PlayMatchWait(v,memframe,ui)
--                             if memframe.Parent and ui.Visible then 
--                                 if MemoryMatchHash[a.TileType] then 
--                                     --wait(2)
--                                     PlayMatch(MemoryMatchHash[a.TileType].Obj)
--                                     i=i+1
--                                     MemoryMatchHash[a.TileType]=nil
--                                 else
--                                     local tiep = memchild[i+1]
--                                     if tiep then 
--                                         local a1 = PlayMatchWait(tiep,memframe,ui)
--                                         if memframe.Parent and ui.Visible then 
--                                             if MemoryMatchHash[a1.TileType] then 
--                                                 wait(2)
--                                                 PlayMatch(tiep)
--                                                 PlayMatch(MemoryMatchHash[a1.TileType].Obj)
--                                                 MemoryMatchHash[a1.TileType]=nil
--                                             else
--                                                 MemoryMatchHash[a1.TileType] = {Obj = tiep,Cac = a1}
--                                             end
--                                             MemoryMatchHash[a.TileType] = {Obj = v,Cac = a}
--                                         end
--                                     end
--                                     i=i+2
--                                 end   
--                             end
--                         end
--                     end
--                 end
--                 if memframe.Parent then memframe:Destroy() end
--                 i=1
--             else
--                 for o,v in pairs(Settings['Selected Memory Match']) do 
--                     local k = v
--                     if v and CheckFarm("Memory") then 
--                         local done=false
--                         warpF2(function() 
--                             local a = game:GetService("Workspace").Toys[k]
--                             print(a)
--                             if not CheckToy(a) then return end
--                             done=true
--                             StopFarmList["Memory"] = true
--                             tpT(CFrame.new(a.Platform.Position)+Vector3.new(0,3,0))
--                             wait(1)
--                             game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer(v)
--                             wait(.5)
--                         end)
--                         if done then break end
--                     end
--                 end
--                 StopFarmList["Memory"] = false
--             end
--         end
--     end
-- end)

-- local ListCraft = {"MoonCharm", "Glitter", "StarJelly", "PurplePotion", "SuperSmoothie", "Enzymes", "Oil", "Glue", "TropicalDrink", "Gumdrops","RedExtract", "BlueExtract"}
-- local CraftItemSection = MainTab:AddSection({
--     Name = 'Craft Items Section'
-- })

-- ListItemLabel = MainTab:AddLabel("Crafting Status: ")
-- local Sel = -1;
-- Settings["Select Item Craft"] = ""
-- Settings['Craft Amount Item'] = 0
-- local AutoCraft = false
-- local tb = {}
-- local tbk = {}
-- SelectItemCRaftDropdown = MainTab:AddDropdown({
--     Name = "Select Item Craft",
--     Default = Settings["Select Item Craft"],
--     Options = ListCraft,
--     Callback = function(a)
--         Settings["Select Item Craft"] = a
--     end
-- })

-- AmountCFraftTextBox = MainTab:AddTextbox({
--     Name = "Craft Amount Item",
--     Default = Settings['Craft Amount Item'],
--     Callback = function(a)
--         Settings['Craft Amount Item'] = tonumber(a)
--     end
-- })

-- MainTab:AddButton({
--     Name = "Add Items to List",
--     Callback = function()
--         if Settings['Craft Amount Item']
--         and Settings['Craft Amount Item'] > 0
--         and Settings["Select Item Craft"] ~= ""
--         and Settings["Select Item Craft"] then 
--             table.insert(tb, {
--                 Item = Settings["Select Item Craft"],
--                 Amount = Settings['Craft Amount Item']
--             })
--             table.insert(tbk,"x"..Settings['Craft Amount Item'].." "..Settings["Select Item Craft"])
--         end
--     end
-- })
-- function GetCraftingStatus() 
--     local data = game:GetService("ReplicatedStorage").Events.RetrievePlayerStats:InvokeServer()
--     local blender = data.BlenderState
    
--     if not blender then return 0 end
--     local n = blender.Count
--     local Start = blender.StartTime
    
--     local v32 = data.PlaytimeAtLoad;
--     local v33 = data.LoadTime;
--     local v29 = blender
    
--     local v34 = v32 + (ostime() - v33) - v29.StartTime;
--     local f = (60*n*5-v34)/60
--     if f<=0 then return 1,blender end
--     return 2,blender
-- end
-- AutoBlenderToggle = MainTab:AddToggle({
--     Name = "Auto Blender",
--     Default = Settings["Auto Blender"],
--     Callback = function(bool)
--         Settings["Auto Blender"] = bool
--         if bool then 
--             game:GetService("ReplicatedStorage").Events.BlenderCommand:InvokeServer("StopOrder")
--         end
--     end
-- })

-- SpawnTable["Craft"] = function() 
--     while wait(1) do
--         local t, b = GetCraftingStatus()
--         if t == 0 then 
--             ListItemLabel:Set("Blender Status: Crafting nil")
--             if Settings["Auto Blender"] then
--                 if #tb > 0 and CheckFarm("Craft") then 
--                     StopFarmList["Craft"] = true
--                     wait()
--                     tpT(CFrame.new(-431.52777099609375, 68.78433990478516, 41.02149963378906))
--                     wait(1)
--                     game:GetService("ReplicatedStorage").Events.BlenderCommand:InvokeServer("PlaceOrder",{["Recipe"] = tb[1].Item,["Count"] = tb[1].Amount})                 
--                 end
--             end 
--         end
--         if t == 2 then 
--             ListItemLabel:Set("Blender Status: Crafting x"..b.Count.." "..b.Recipe)
--         end
--         if t == 1 then 
--             ListItemLabel:Set("Blender Status: Crafted x"..b.Count.." "..b.Recipe)

--             if Settings["Auto Blender"] and CheckFarm("Craft") then 
--                 StopFarmList["Craft"] = true
--                 wait()
--                 tpT(CFrame.new(-431.52777099609375, 68.78433990478516, 41.02149963378906))
--                 wait(1)

--                 game:GetService("ReplicatedStorage").Events.BlenderCommand:InvokeServer("StopOrder")
--                 wait(.5)
--                 if #tb > 0 then 
--                     table.remove(tb, 1)
--                     table.remove(tbk, 1)
--                 end
--             end
--         end
--         StopFarmList["Craft"] = false
--     end
-- end

MainTab:AddSection({
    Name = 'Toys Section'
})

MainTab:AddToggle({
    Name = "Auto Use Instant Converter",
    Default = Settings['Auto Use Instant Converter'],
    Info = "Will use instant converter when your backpack is fulled.",
    Callback = function(bool)
        Settings['Auto Use Instant Converter'] = bool
    end
})
MainTab:AddToggle({
    Name = "Auto Use Ant Pass",
    Default = Settings['Auto Use Ant Pass'],
    Info = "Will use ant pass when your backpack is fulled.",
    Callback = function(bool)
        Settings['Auto Use Ant Pass'] = bool
    end
})
MainTab:AddToggle({
    Name = "Auto Use Micro Converter",
    Default = Settings['Auto Use Micro Converter'],
    Info = "Will use micro converter when your backpack is fulled.",
    Callback = function(bool)
        Settings['Auto Use Micro Converter'] = bool
    end
})


local MicsSection = MainTab:AddSection({
    Name = 'Miscellaneous Section'
})

-- OnettLidToggle = MainTab:AddToggle({
--     Name = "Auto Blender",
--     Default = Settings["Auto Onett's Lid Art"],
--     Callback = function(bool)
--         Settings["Auto Onett's Lid Art"] = bool
--     end
-- })

-- StockingToggle = MainTab:AddToggle({
--     Name = "Auto Stocking",
--     Default = Settings["Auto Stocking"],
--     Callback = function(bool)
--         Settings["Auto Stocking"] = bool
--     end
-- })

-- SamovarToggle = MainTab:AddToggle({
--     Name = "Auto Samovar",
--     Default = Settings["Auto Samovar"],
--     Callback = function(bool)
--         Settings["Auto Samovar"] = bool
--     end
-- })

-- CandlesToggle = MainTab:AddToggle({
--     Name = "Auto Honeyday Candles",
--     Default = Settings["Auto Honeyday Candles"],
--     Callback = function(bool)
--         Settings["Auto Honeyday Candles"] = bool
--     end
-- })

-- FeastToggle = MainTab:AddToggle({
--     Name = "Auto Beesmas Feast",
--     Default = Settings["Auto Beesmas Feast"],
--     Callback = function(bool)
--         Settings["Auto Beesmas Feast"] = bool
--     end
-- })
BuyAntToggle = MainTab:AddToggle({
    Name = "Auto Buy Ant Ticket",
    Default = Settings["Auto Buy Ant Ticket"],
    Callback = function(bool)
        Settings["Auto Buy Ant Ticket"] = bool
    end
})
local Dropdown = MainTab:AddDropdown({
    Name = "Auto Use Summoner",
    Default = Settings['Selected Auto Use Summoner & Machine'],
    Multiple = true,
    Options = {
        "Mythic Meteor Shower",
        "Sprout Summoner",
        "Honeystorm"
    },
    Callback = function(a)
        Settings['Selected Auto Use Summoner & Machine']  = a
    end
})
local FarmBuffList = {
    "Blue Extract",
    "Red Extract",
    "Oil",
    "Enzymes",
    "Glue",
    "Tropical Drink",
    "Stinger",
    "Glitter",
    "Magic Bean"
}
function IsBuffOn(Buff)
    for k,v in pairs(ListTileGrid) do 
        local PlGui = v
        for k, v in pairs(PlGui:GetChildren()) do
            if v:FindFirstChild("BG") then
                if v.BG:FindFirstChild("Icon") then
                    if string.match(v.BG.Icon.Image, BarId[Buff]) then
                        return true
                    end
                end
            end
        end
    end
    
    return false
end
game:GetService("Workspace").Map.Ground["5BeeZoneGround"].Size = Vector3.new(512, 16, 150)
local Dropdown = MainTab:AddDropdown({
    Name = "Auto Use Items",
    Default = Settings['Selected Auto Use Items'],
    Multiple = true,
    Options = FarmBuffList,
    Callback = function(a)
        Settings['Selected Auto Use Items']  = a
    end
})
SpawnTable["Buff"] = function() 
    while wait(2) do
        for k, v in pairs(Settings['Selected Auto Use Items']) do
            if v~="Glitter" and Settings['Selected Auto Use Items'] then
                if v ~= "Magic Bean" then 
                    if not IsBuffOn(v) then 
                        game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = v})
                    end
                else
                    game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = v})
                end
            end
        end
    end
end
local ListFieldBoost = {"Red Field Booster", "Blue Field Booster", "Field Booster", "Coconut Dispenser"}

local Dropdown = MainTab:AddDropdown({
    Name = "Auto Use Field Boost",
    Default = Settings['Selected Auto Field Boost'],
    Multiple = true,
    Options = ListFieldBoost,
    Callback = function(a)
        Settings['Selected Auto Field Boost']  = a
    end
})

SpawnTable["Field Boost"] = function() 
    while wait(3) do
        for k, v in pairs(Settings['Selected Auto Field Boost']) do
            if v and CheckToy(game.Workspace.Toys[v]) and CheckFarm("FieldBoost") then
                warpF2(function() 
                    StopFarmList["FieldBoost"] = true
                    tpT(CFrame.new(game.Workspace.Toys[v].Platform.Position)+Vector3.new(0,3,0))
                    wait(1)
                    game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer(v)
                    --require(game.ReplicatedStorage.Activatables.Toys):ButtonEffect(game.Workspace.Toys[v])
                    StopFarmList["FieldBoost"] = false
                end)
                wait(1)
            end
        end
    end
end
local Dispensers = {
    "Glue Dispenser",
    "Strawberry Dispenser",
    "Treat Dispenser",
    "Free Ant Pass Dispenser",
    "Blueberry Dispenser",
    "Honey Dispenser",
    "Free Royal Jelly Dispenser",
    "Wealth Clock"
}
local Dropdown = MainTab:AddDropdown({
    Name = "Auto Use Dispensers",
    Default = Settings['Selected Auto Use Dispensers'],
    Multiple = true,
    Options = Dispensers,
    Callback = function(a)
        Settings['Selected Auto Use Dispensers']  = a
    end
})
function CheckToyCD(toy) 
    local cd = game.Workspace.Toys[toy].Cooldown.Value
    if not TvkStatCache.ToyTimes[toy] then return true end
    return os.time()-TvkStatCache.ToyTimes[toy] > cd
end

spawn(function()
    while wait(2) do
        if Settings['Selected Auto Use Dispensers'] then
            for k, x in pairs(Settings['Selected Auto Use Dispensers']) do
                --print(k, x)
                if x then
                    local v = x
                    if CheckToyCD(v) and CheckToy(game.Workspace.Toys[v]) and CheckFarm("Dispenser") then
                        StopFarmList["Dispenser"] = true
                        local sucvat = game.Workspace.Toys[v]
                        if kc(sucvat.Platform.Position) > 2000 then 
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(sucvat.Platform.Position.X, sucvat.Platform.Position.Y + 5, sucvat.Platform.Position.Z)
                        else
                            tpT(CFrame.new(sucvat.Platform.Position.X, sucvat.Platform.Position.Y + 5, sucvat.Platform.Position.Z)) 
                        end
                        wait(1)
                        warpF2(function() 
                            game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer(v)
                            --require(game.ReplicatedStorage.Activatables.Toys):ButtonEffect(game.Workspace.Toys[v])
                        end)
                        wait(1)
                    end
                end
            end
        end
        StopFarmList["Dispenser"] = false
    end
end)

local ValidTB = {}
local a = require(game.ReplicatedStorage.Activatables.Toys)

local check1 = debug.getupvalue(a.ButtonEffect,1)
local check2 = debug.getupvalue(a.ButtonEffect,2)
function CheckToy(toy) 
    return warpF2(function() 
        return check1(a,toy) and check2(a,toy)   
    end)
end
local sent = false
function CollectST(st,pos, disablecollect,maxdis) 
    if not maxdis then maxdis = 30 end
    if not CheckFarm("Stocking") then return end
    if CheckToy(game:GetService("Workspace").Toys[st]) then 
        ValidTB["Stock"] = true
        StopFarmList["Stocking"] = true
        tpT(CFrame.new(pos))
        wait(1)
        warpF2(function() 
            game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer(st)
            --require(game.ReplicatedStorage.Activatables.Toys):ButtonEffect(game.Workspace.Toys[st])
        end)
        wait(3)
    end
    if not disablecollect then
        for k,v in ipairs(game.Workspace.Collectibles:GetChildren()) do 
            if getgenv().IsToken(v) then 
                if (v.Position-pos).magnitude < maxdis and CheckFarm("Stocking") then 
                    ValidTB["Stock"] = true
                    StopFarmList["Stocking"] = true
                    wait(1)
                    tpT(v.CFrame, 100)
                end
            end
        end
    end
end
SpawnTable["Stocking"] = function() 
    while wait(2) do 
        if Settings["Auto Stocking"] then 
            CollectST("Stockings",Vector3.new(232.93347167969, 35.397228240967, 235.30931091309),nil,15)
        end
        if Settings["Auto Onett's Lid Art"] then 
            CollectST("Onett's Lid Art",game:GetService("Workspace").Toys["Onett's Lid Art"].Platform.Position)
        end
        if Settings["Auto Samovar"] then 
            CollectST("Samovar", game:GetService("Workspace").Toys.Samovar.Platform.Position)
        end
        if Settings["Auto Honeyday Candles"] then 
            CollectST("Honeyday Candles", game:GetService("Workspace").Toys["Honeyday Candles"].Platform.Position)
        end
        if Settings["Auto Beesmas Feast"] then 
            CollectST("Beesmas Feast", game:GetService("Workspace").Toys["Beesmas Feast"].Platform.Position)
        end
        -- if Settings.AutoRoboPass then
        --     CollectST("Free Robo Pass Dispenser", game:GetService("Workspace").Toys["Free Robo Pass Dispenser"].Platform.Position, true)
        -- end
        if Settings['Selected Auto Use Summoner & Machine'] then
            for i, v in pairs(Settings['Selected Auto Use Summoner & Machine']) do
                if v then
                    CollectST(v, game:GetService("Workspace").Toys[v].Platform.Position, true)
                end
            end
        end
        if Settings["Auto Buy Ant Ticket"] and GetCurrenItem("AntPass") == 0 and GetCurrenItem("Ticket") >= 10 then
            CollectST("Ant Pass Dispenser", game:GetService("Workspace").Toys["Ant Pass Dispenser"].Platform.Position, true)
        end
        StopFarmList["Stocking"] = false
    end
end

local FarmTab = Window:MakeTab({
	Name = "Farm",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false,
    Default = false
})

local SettingsSection = FarmTab:AddSection({
    Name = 'Settings Farm Section'
})
function GetListField(a)
    local tablee = {}
    for _, v in pairs(game.Workspace.FlowerZones:GetChildren()) do
        table.insert(tablee, v.Name)
    end
    if a then 
        table.insert(tablee,a)
    end
    return tablee
end
SelectFieldDropdown = FarmTab:AddDropdown({
    Name = "Select Field",
    Default = Settings['Selected Field'],
    Options = GetListField(),
    Callback = function(a)
        Settings['Selected Field'] = a
        FarmFieldList["CurrentField"] = a
    end
})
DisableConvertToggle = FarmTab:AddToggle({
    Name = "Disable Convert Honey",
    Default = Settings['Disable Convert Honey'],
    Info = 'Will not convert honey.',
    Callback = function(bool)
        Settings['Disable Convert Honey'] = bool
    end
})

EquipMaskToggle = FarmTab:AddToggle({
    Name = "Equip Honey Mask",
    Default = Settings['Equip Honey Mask'],
    Info = 'Will auto equip honey mask when sell for fast convert pollen.',
    Callback = function(bool)
        Settings['Equip Honey Mask'] = bool
    end
})

DigToggle = FarmTab:AddToggle({
    Name = "Auto Dig",
    Default = Settings['Auto Dig'],
    Callback = function(bool)
        Settings['Auto Dig'] = bool
        spawn(function()while wait() do if Settings['Auto Dig'] then pcall(function()Dig()end)end end end)
    end
})

ResetBeeEnergySlider = FarmTab:AddSlider({
    Name = "Bee Energy",
    ValueName = "",
    Min = 0,
    Max = 100,
    Default = Settings['Bee Energy'],
    Callback = function(number)
        Settings['Bee Energy'] = number
    end
})
RSBeeEnergyToggle = FarmTab:AddToggle({
    Name = "Reset After Bee Energy Is Lower Than X",
    Default = Settings['Reset After Bee Energy Is Lower Than X'],
    Callback = function(bool)
        Settings['Reset After Bee Energy Is Lower Than X'] = bool
    end
})

ConvertBackpackSlider = FarmTab:AddSlider({
    Name = "Convert Backpack",
    ValueName = " %",
    Min = 0,
    Max = 100,
    Default = Settings['Convert Backpack'],
    Callback = function(number)
        Settings['Convert Backpack'] = number
    end
})

StayFieldSlider = FarmTab:AddSlider({
    Name = "Stay In Field",
    Info = "Will stay in field when full backpack.",
    ValueName = " second",
    Min = 0,
    Max = 20,
    Default = Settings['Stay Field'],
    Callback = function(number)
        Settings['Stay Field'] = number
    end
})

FarmTab:AddSlider({
    Name = "Convert at X Balloon",
    ValueName = "",
    Min = 0,
    Max = 200,
    Default = Settings['Convert at X Balloon'] or 0,
    Callback = function(number)
        Settings['Convert at X Balloon'] = tonumber(number)
    end
})

FarmTab:AddDropdown({
    Name = "Convert Balloon Method",
    Default = Settings["Convert Balloon Method"] or 'Convert when selling',
    Options = {'Convert as soon as enough blessings','Convert when selling'},
    Callback = function(a)
        Settings["Convert Balloon Method"] = a
    end
})

FarmTab:AddToggle({
    Name = "Auto Convert Balloon",
    Default = Settings['Auto Convert Balloon'],
    Callback = function(bool)
        Settings['Auto Convert Balloon'] = bool
    end
})

Settings["Selected Prioritize Token"] = {'Token Link'}
SelectprioritizetokenDropdown = FarmTab:AddDropdown({
    Name = "Select Prioritize Token",
    Default = Settings["Selected Prioritize Token"],
    Multiple = true,
    Options = TablePrioti(),
    Callback = function(a)
        Settings["Selected Prioritize Token"] = a
    end
})
function zForceTweenPT()
    while Settings['Force On Prioritize Token'] do wait()
        local tvnang = ListAllToken
        local function vohoangnang(TokenList) 
            for k, c in pairs(TokenList) do
                if k ~= "None" then
                    for i, v in pairs(c) do
                        if getgenv().IsToken(v) and v:FindFirstChild("FrontDecal") and v.FrontDecal.Texture ~= "rbxassetid://1629547638" and CheckFarm("FTPrio") then
                            StopFarm["FTPrio"] = true
                            repeat wait()
                                if kc(v.Position) > 2 then
                                    if (Vector3.new(0, v.Position.Y, 0) - Vector3.new(0, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, 0)).magnitude <= 12 then
                                        Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
                                    else
                                        tpT(CFrame.new(v.Position),nil,function() return v.Parent and getgenv().IsToken(v) end,true)
                                    end
                                end
                            until not v or not v.Parent or not getgenv().IsToken(v) or not v:FindFirstChild("FrontDecal") or not Settings['Force On Prioritize Token'] or not CheckFarm("FTPrio")
                        end
                    end
                end
            end
        end
        if getgenv().TempField and ListAllToken[getgenv().TempField] then
            vohoangnang(ListAllToken[getgenv().TempField])
        end
        for _, x in pairs(tvnang) do
            vohoangnang(x)
        end
        StopFarm["FTPrio"] = false
    end
end

SelectignoretoeknDropdown = FarmTab:AddDropdown({
    Name = "Select Ignore Token",
    Default = Settings["Selected Ignore Token"],
    Multiple = true,
    Options = TablePrioti(),
    Callback = function(a)
        Settings["Selected Ignore Token"] = a
    end
})

ForceOnDropdown = FarmTab:AddToggle({
    Name = "Force On Prioritize Token",
    Default = Settings['Force On Prioritize Token'],
    Info = 'Will tween to selected prioritize token',
    Callback = function(bool)
        Settings['Force On Prioritize Token'] = bool
        spawn(function (

        )
            zForceTweenPT()
        end)
    end
})
ShowerInstantDropdown = FarmTab:AddToggle({
    Name = "Shower Instant TP",
    Default = Settings['Shower Instant TP'],
    Info = 'Will instant tp to Coconut, Beemas light',
    Callback = function(bool)
        Settings['Shower Instant TP'] = bool
    end
})

local MaskF = {
    ["White"] = "Gummy Mask",
    ["Red"] = "Demon Mask",
    ["Blue"] = "Diamond Mask"
}
local MaskField = {
    ["White"] = {
        "Sunflower Field",
        "Dandelion Field",
        "Spider Field",
        "Pineapple Patch",
        "Pumpkin Patch",
        "Coconut Field"
    },
    ["Blue"] = {
        "Blue Flower Field",
        "Bamboo Field",
        "Pine Tree Forest",
        "Stump Field"
    },
    ["Red"] = {
        "Mushroom Field",
        "Clover Field",
        "Strawberry Field",
        "Cactus Field",
        "Rose Field",
        "Pepper Patch",
        "Mountain Top Field",
        "Ant Field"
    }
}
FarmTab:AddDropdown({
    Name = "Select White Mask",
    Default = Settings['White Mask'],
    Options = {"Gummy Mask", "Demon Mask", "Diamond Mask", "Honey Mask", "Bubble Mask", "Fire Mask"},
    Callback = function(a)
        Settings['White Mask'] = a
    end
})
FarmTab:AddDropdown({
    Name = "Select Red Mask",
    Default = Settings['Red Mask'],
    Options = {"Gummy Mask", "Demon Mask", "Diamond Mask", "Honey Mask", "Bubble Mask", "Fire Mask"},
    Callback = function(a)
        Settings['Red Mask'] = a
    end
})
FarmTab:AddDropdown({
    Name = "Select Blue Mask",
    Default = Settings['Blue Mask'],
    Options = {"Gummy Mask", "Demon Mask", "Diamond Mask", "Honey Mask", "Bubble Mask", "Fire Mask"},
    Callback = function(a)
        Settings['Blue Mask'] = a
    end
})
FarmTab:AddDropdown({
    Name = "Select Attack Mask",
    Default = Settings['Attack Mask'],
    Options = {"Gummy Mask", "Demon Mask", "Diamond Mask", "Honey Mask", "Bubble Mask", "Fire Mask"},
    Callback = function(a)
        Settings['Attack Mask'] = a
    end
})
function Conv2LayerTable(tab)
    local tabl = {}
    for k, v in pairs(tab) do
        for f, s in pairs(v) do
            tabl[s] = k
        end
    end
    return tabl
end
local MaskField2 = Conv2LayerTable(MaskField)
function GetCurrentFieldMask()
    local nr = GetNerestFieldByObject(plr.Character:WaitForChild("HumanoidRootPart"))
    if getgenv().IsValidTokenPos(plr.Character:WaitForChild("HumanoidRootPart"), nr) then
        local Colour = MaskField2[tostring(nr)]
        local Mask = MaskF[Colour]
        return Mask
    end
end
function AutoEquipMask()
    while Settings['Auto Equip Best Mask'] and wait(.5) do 
        if Killing then
            game:GetService("ReplicatedStorage").Events.ItemPackageEvent:InvokeServer("Equip", {
                ["Mute"] = true,
                ["Type"] = Settings.AttackMask,
                ["Category"] = "Accessory"
            })
        else
            game:GetService("ReplicatedStorage").Events.ItemPackageEvent:InvokeServer("Equip", {
                ["Mute"] = true,
                ["Type"] = GetCurrentFieldMask(),
                ["Category"] = "Accessory"
            })
        end
    end
end
FarmTab:AddToggle({
    Name = "Auto Equip Best Mask",
    Default = Settings['Auto Equip Best Mask'],
    Callback = function(bool)
        Settings['Auto Equip Best Mask'] = bool
        spawn(AutoEquipMask)
    end
})

local MaskField2 = Conv2LayerTable(MaskField)
function GetCurrentFieldMask()
    local nr = GetNerestFieldByObject(plr.Character:WaitForChild("HumanoidRootPart"))
    if getgenv().IsValidTokenPos(plr.Character:WaitForChild("HumanoidRootPart"), nr) then
        local Colour = MaskField2[tostring(nr)]
        local Mask = MaskF[Colour]
        return Mask
    end
end


-- MaskDropdown = FarmTab:AddDropdown({
--     Name = "Equip Best Mask",
--     Default = "",
--     Options = {},
--     Callback = function(a)
--         -- print(typeof(a))
--     end
-- })




local FarmSection = FarmTab:AddSection({
    Name = "Main Farm Section"
})

function CountSprink(name,pos) 
    local cc = 0
    for k,v in ipairs(game:GetService("Workspace").Gadgets:GetChildren()) do 
        if v.Name==name and v:FindFirstChild("Base") then 
            if (v.Base.Position-pos).magnitude<30 then 
                cc=cc+1
            end
        end
    end
    return cc
end
function GetEquipSrinkler()
    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
    return StatCache["Get"]()["EquippedSprinkler"]
end
function SetupTokenFolder(TokenFolder,ListAllToken) 
    local TokenIdCache = {}

    TokenFolder.ChildAdded:Connect(function(v)
        local field = GetNerestFieldByObject(v)
        if not ListAllToken[field] then 
            ListAllToken[field]={}
        end
        local Token
        if v:FindFirstChild("FrontDecal") then --Settings["Selected Prioritize Token"]
            local Piro = TokenIdCache[v.FrontDecal.Texture]
            if not Piro then
                for k,val in pairs(PrioritizeList) do
                    if string.match(v.FrontDecal.Texture,val) then
                        TokenIdCache[v.FrontDecal.Texture] = k
                        if table.find(Settings["Selected Prioritize Token"],k) then
                            Token=k
                            break; 
                        end
                        if table.find(Settings["Selected Ignore Token"],k) and string.match(v.FrontDecal.Texture, val) then
                            --delay(0,function() v:Destroy() end)
                            return
                        end
                    end
                end
            else
                if table.find(Settings["Selected Prioritize Token"],Piro) then Token = v end
                if table.find(Settings["Selected Ignore Token"],Piro) then return end
            end
            
        end
        if Token then 
            if not ListAllToken[field][Token] then 
                ListAllToken[field][Token]={}
            end
            table.insert(ListAllToken[field][Token],v)     
        else
            if not ListAllToken[field]["None"] then 
                ListAllToken[field]["None"]={}
            end
            table.insert(ListAllToken[field]["None"],v)    
        end
    end)

    TokenFolder.ChildRemoved:Connect(function(v) 
        local field = GetNerestFieldByObject(v)
        if not ListAllToken[field] then 
            ListAllToken[field]={}
        end
        local index=0
        for k,val in pairs(ListAllToken[field]) do 
            for k,val2 in pairs(val) do 
                if val2==v then 
                    table.remove(val,k)
                    break;
                end
            end
        end
    end)
end

SetupTokenFolder(game.Workspace.Collectibles,ListAllToken)
SetupTokenFolder(game:GetService("Workspace").Camera.DupedTokens,ListAllDupedToken)
local ListFlames = {}
local ListFlamesNoDark = {}
function AddFlameToList(ListFlames,tvk,k) 
    for k,v in pairs(ListFlames) do 
        if (tvk.Position-k).magnitude < 15 then 
            table.insert(ListFlames[k],tvk)
            return
        end
    end
    ListFlames[tvk.Position] = {v}
end
function RemoveFlameInList(ListFlames,c) 
    for k,v in pairs(ListFlames) do 
        for k,v2 in pairs(v) do 
            if v2==c or not v2.Parent then 
                table.remove(v,table.find(v,v2))
            end
        end
        if #v==0 then ListFlames[k] = nil end
    end
end
game.Workspace.PlayerFlames.ChildAdded:Connect(function(tvk) 
    delay(0,function() 
        if getgenv().TempField and Settings['Auto Farm'] and Settings['Gather Flame'] then 
            if IsValidTokenPos(tvk,getgenv().TempField) then 
                AddFlameToList(ListFlames,tvk,k)
            end
        end
        if getgenv().TempField and Settings['Auto Farm'] then 
            if IsValidTokenPos(tvk,getgenv().TempField) then 
                AddFlameToList(ListFlamesNoDark,tvk,k)
            end
        end
    end)
end)
game.Workspace.PlayerFlames.ChildRemoved:Connect(function(c) 
    RemoveFlameInList(ListFlames,c)
    RemoveFlameInList(ListFlamesNoDark,c)
end)
function GetNearestFlameGroup(ListFlames,DieuKien) 
    local gancmnnhatK
    local gancmnnhatV
    for k,v in pairs(ListFlames) do
        local pass = true
        if DieuKien then 
            for k,v in pairs(v) do 
                if not DieuKien(v) then 
                    table.remove(ListFlames,table.find(ListFlames,v))
                end
            end 
        end
        if #v < 3 then pass = false ListFlames[k] = nil end
        if pass then 
            if not gancmnnhatK or not gancmnnhatV then 
                gancmnnhatK = k
                gancmnnhatV = v
            end
            if kc(k)<kc(gancmnnhatK) then 
                gancmnnhatK = k
                gancmnnhatV = v
            end 
        end
    end
    --if gancmnnhatV then print(#gancmnnhatV) end
    return gancmnnhatV
end
function GetNearestFire(Field,ruabitheiunang)
    local nr
    if plr.Character:FindFirstChild("HumanoidRootPart") then 
        if ruabitheiunang then 
            local nrGroup = GetNearestFlameGroup(ListFlamesNoDark,function(v) 
                if not v:FindFirstChild("PF") then return false end
                if not v.Parent then return false end
                if v.PF.Color == game:GetService("ReplicatedStorage").LocalFX.LocalFlames.DarkFlame.PF then
                    return false 
                end
                return true
            end)
            if nrGroup and nrGroup[1] then 
                return nrGroup[1] 
            end
        else
            if Field then 
                local nrGroup = GetNearestFlameGroup(ListFlames,function(v) 
                    if not v:FindFirstChild("PF") then return false end
                    if not v.Parent then return false end
                    if not IsValidTokenPos(v,Field) then return false end
                    return true
                end)
                if nrGroup and nrGroup[1] then 
                    return nrGroup[1] 
                end
            else
                for k, v in pairs(game.Workspace.PlayerFlames:GetChildren()) do
                    if v:FindFirstChild("PF") then
                        local tuoidz
                        if Field then 
                            if IsValidTokenPos(v,Field) then 
                                if ruabitheiunang then 
                                    if v.PF.Color ~= game:GetService("ReplicatedStorage").LocalFX.LocalFlames.DarkFlame.PF then 
                                        tuoidz = true
                                    end
                                else
                                    tuoidz=true
                                end
                            end
                        else
                            if ruabitheiunang then 
                                if v.PF.Color ~= game:GetService("ReplicatedStorage").LocalFX.LocalFlames.DarkFlame.PF then 
                                    tuoidz = true
                                end
                            else
                                tuoidz=true
                            end
                        end
                        if tuoidz then
                            if not nr then 
                                nr=v
                            end
                            if (plr.Character.HumanoidRootPart.Position-v.Position).magnitude < (plr.Character.HumanoidRootPart.Position-nr.Position).magnitude then 
                                nr=v
                            end
                        end
                    end
                end
            end
        end
    end
    return nr
end
function GetListFire(Field) 
    local ListFire = {}
    -- for k, v in pairs(game.Workspace.PlayerFlames:GetChildren()) do
    --     if v:FindFirstChild("PF") then
    --         local tuoidz
    --         if Field then 
    --             if IsValidTokenPos(v,Field) then tuoidz = true end
    --         else
    --             tuoidz=true
    --         end
    --         if tuoidz then
    --             table.insert(ListFire,v)
    --         end
    --     end
    -- end
    for k,v in pairs(ListFlames) do 
        table.insert(ListFire,{Position = k})
    end
    return ListFire
end
function GetSortedFire(Field) 
    local ListFire = {}
    -- for k, v in pairs(game.Workspace.PlayerFlames:GetChildren()) do
    --     if v:FindFirstChild("PF") then
    --         local tuoidz
    --         if Field then 
    --             if IsValidTokenPos(v,Field) then tuoidz = true end
    --         else
    --             tuoidz=true
    --         end
    --         if tuoidz then
    --             table.insert(ListFire,v)
    --         end
    --     end
    -- end
    for k,v in pairs(ListFlames) do 
        table.insert(ListFire,{Position = k})
    end
    table.sort(ListFire,function(a,b) 
        return kc(a.Position)<kc(b.Position)
    end)
    return ListFire
end
function GetNearestDupe(Field) 
    local nr
    if plr.Character:FindFirstChild("HumanoidRootPart") then 
        for k, v in pairs(game:GetService("Workspace").Camera.DupedTokens:GetChildren()) do
            if IsToken(v) and getgenv().IsValidTokenPos(v,Field) and not IsTokenBlacklist(v) then
                if string.match(v.FrontDecal.Texture,"5877939956") then return v end
                if not nr then 
                    nr=v
                end
                if (plr.Character.HumanoidRootPart.Position-v.Position).magnitude < (plr.Character.HumanoidRootPart.Position-nr.Position).magnitude then 
                    nr=v
                end
            end
        end
    end
    return nr
end
function DisableGlider() 
    local uis = game:GetService("UserInputService")
    for k,v in pairs(getconnections(uis.JumpRequest)) do 
        v:Disable()    
    end
end
function EnableGlider() 
    local uis = game:GetService("UserInputService")
    for k,v in pairs(getconnections(uis.JumpRequest)) do 
        v:Enable()    
    end
end
function ValidFarm()
    return CheckFarm("Farm") and CheckFarm('CAI CON CAC')
end
getgenv().isActiveTokens = function(v)
    if v and v:IsA("Part") then
        return not ((v.Transparency + 0.05) > 0.7 and (v.Transparency - 0.05) < 0.7)
    end
end
function GetTokenNearPos(pos,field,mag) 
    local FieldTokens = ListAllToken[field]
    if not FieldTokens then return end
    for k, ss in pairs(FieldTokens) do
        for k,v in ipairs(ss) do 
            if getgenv().IsToken(v) and getgenv().IsValidTokenPos(v, field,FieldPosIn,(Whitelist and #Whitelist>0)) and getgenv().isActiveTokens(v) and not getgenv().IsTokenBlacklist(v) then
                local vthang = false 
                if Whitelist and #Whitelist>0 then 
                    for k,v2 in pairs(Whitelist) do 
                        if string.find(v.FrontDecal.Texture,v2) then 
                            vthang = true
                        end
                    end
                else
                    vthang = true
                end
                if vthang then 
                    if kc(v.Position) < mag then return v,true end
                end
            end
        end
    end
end
function IsAnyPiro(Field,t,ListAllToken,FieldPosIn,Whitelist) 
    if not ListAllToken[Field] then return false end

    if Settings['Gather Flame'] then 
        local rac = GetListFire(Field)
        for k,v in pairs(rac) do 
            local nr = GetTokenNearPos(v.Position,Field,30)
            if nr then return true end
        end
    end
    for k,v in pairs(ListAllToken[Field]) do 
        if k~="None" then 
            for k,v  in pairs(v) do 
                if getgenv().IsToken(v) and getgenv().IsValidTokenPos(v, Field,FieldPosIn,(Whitelist and #Whitelist>0)) and getgenv().isActiveTokens(v) and not getgenv().IsTokenBlacklist(v) then 
                    return true
                end
            end
        end
    end
    return false
end--LPH_JIT_MAX
GetNerestToken = (function(Field,t,ListAllToken,FieldPosIn,Whitelist)
    local token
    local Character = plr.Character
    local HumanoidRootPart =t or Character:FindFirstChild("HumanoidRootPart")
    if not HumanoidRootPart then return end
    local h = HumanoidRootPart.Position
    local Piro = {}

    -- Mat cuoi dupe nha cmm
    if Settings['Auto Collect Duped Token'] then 
        for k, v in pairs(game:GetService("Workspace").Camera.DupedTokens:GetChildren()) do
            if IsToken(v) and getgenv().IsValidTokenPos(v,Field) and not IsTokenBlacklist(v) then
                if string.match(v.FrontDecal.Texture,"5877939956") then return v,true end
            end
        end
        for k, v in pairs(game:GetService("Workspace").Camera.DupedTokens:GetChildren()) do
            if IsToken(v) and getgenv().IsValidTokenPos(v,Field) and not IsTokenBlacklist(v) then
                local BearMorphs = {"1472425802","1472580249","1472532912","1472491940"}
                for k, v2 in pairs(BearMorphs) do 
                    if string.match(v.FrontDecal.Texture,v2) then return v,true end
                end
            end
        end
        
    end
    
    local function SucVat(ListAllToken) 
        if not ListAllToken or not ListAllToken[Field] then return end

        local FieldTokens = ListAllToken[Field]
        for k, ss in pairs(FieldTokens) do
            if k~="None" then 
                local tok
                local ditme = k
                for k,v in ipairs(ss) do 
                    if getgenv().IsToken(v) and getgenv().IsValidTokenPos(v, Field,FieldPosIn,(Whitelist and #Whitelist>0)) and getgenv().isActiveTokens(v) and not getgenv().IsTokenBlacklist(v) then
                        if ditme == "Token Link" then 
                            return v,true
                        end
                        local huhu = false 
                        if Whitelist and #Whitelist>0 then 
                            for k,v2 in pairs(Whitelist) do 
                                if string.find(v.FrontDecal.Texture,v2) then 
                                    huhu = true
                                end
                            end
                        else
                            huhu = true
                        end
                        if huhu then 
                            if (v.Position-h).magnitude < 3 then return v,true end
                            if not tok then tok=v end
                            if (v.Position-h).magnitude < (tok.Position-h).magnitude then 
                                tok=v
                            end
                        end
                    end
                end
                if tok then 
                    Piro[tok]=(tok.Position-h).magnitude
                end
            end
        end
        local sml
        for k,v in pairs(Piro) do 
            if not sml then sml=k end
            if v<Piro[sml] then sml=k end
        end
        if sml then return sml end
    end

    local tok

    local sucvat = SucVat(ListAllToken)
    if sucvat then return sucvat,true end

    if Settings['Auto Collect Duped Token'] then 
        local ruabithieunang = SucVat(ListAllDupedToken)
        if ruabithieunang then return ruabithieunang,true end
    end
    if Settings['Gather Flame'] then 
        local rac = GetSortedFire(Field)
        for k,v in pairs(rac) do 
            local nr = GetTokenNearPos(v.Position,Field,30)
            if nr then  return nr,true end
        end
    end
    
    -- Piro token
    if ListAllToken[Field] then 
        --Normal token
        if ListAllToken[Field].None then 
            for _,v in ipairs(ListAllToken[Field].None) do 
                if getgenv().IsToken(v) and getgenv().IsValidTokenPos(v, Field,FieldPosIn,(Whitelist and #Whitelist>0)) and getgenv().isActiveTokens(v) and not getgenv().IsTokenBlacklist(v) then 
                    local huhu = false 
                    if Whitelist and #Whitelist>0 then 
                        for k,v2 in pairs(Whitelist) do 
                            if string.find(v.FrontDecal.Texture,v2) then 
                                huhu = true
                            end
                        end
                    else
                        huhu = true
                    end
                    if huhu then 
                        if not tok then tok=v end
                        if (v.Position-h).magnitude < (tok.Position-h).magnitude then 
                            tok=v
                        end
                    end 
                end
            end
        end
        if tok then return tok end
    end
    if Settings['Auto Collect Duped Token'] then 
        return GetNearestDupe(Field)
    end
end)
local sanghuman = require(game:GetService("ReplicatedStorage").BeeTypes).GetTypes()
function tuoidz(func) 
    spawn(function() 
        local Voiddz = 0
        local act6temp = 0
        local jimmy2 = game:GetService("ReplicatedStorage").Events.RetrieveCachedPlayerStat:InvokeServer("MaxBeeEnergy")
        local sangzboi = game:GetService("ReplicatedStorage").Events.RetrievePlayerStat:InvokeServer({"Honeycomb"})
        for k,v in pairs(sangzboi) do 
            for k,v in pairs(v) do 
                if v.Type and sanghuman[v.Type] then 
                    local act5 = 20
                    local thanhtuoi = sanghuman[v.Type].Bonuses
                    if thanhtuoi and thanhtuoi.MaxEnergy then 
                        for k,v in pairs(thanhtuoi.MaxEnergy) do 
                            if k=="Add" then act5=act5+v end
                            if k=="Mul" then act5=act5*v end
                        end
                    end
                    act5=act5*(1+0.05*(v.Lvl-1))
                    if jimmy2 then 
                        act5 = act5*jimmy2
                    end
                    if v.Mutas then 
                        if v.Mutas.Energy then 
                            act5 = act5*v.Mutas.Energy
                        end
                    end
                    if v.Energy==0 then v.Energy = act5 end
                    if v.Energy > 10^5 then v.Energy = act5 end
                    Voiddz=Voiddz+(v.Energy/act5)
                    act6temp = act6temp+1
                end
            end
        end
        func(Voiddz/act6temp)
    end)
end
function GetHumanoidRootPart() 
    if plr.Character then 
        return plr.Character:FindFirstChild("HumanoidRootPart")
    end
end

function GetCurrenItem(Item)
    local StatCache = TvkStatCache
    local a = StatCache["Eggs"][Item]
    if a then return a else return 0 end
end

function GetNearestBalloon(Field) 
    local nrs 
    for k,v in pairs(game:GetService("Workspace").Balloons.FieldBalloons:GetChildren()) do 
        if v:FindFirstChild("PlayerName") then 
            if v.PlayerName.Value==plr.Name then 
                if v:FindFirstChild("BalloonRoot") then 
                    if IsValidTokenPos(v.BalloonRoot,Field) then
                        if plr.Character:FindFirstChild("HumanoidRootPart") then 
                            if not nrs then 
                                nrs = v
                            end
                            if (plr.Character.HumanoidRootPart.Position-v.BalloonRoot.Position).magnitude<(plr.Character.HumanoidRootPart.Position-nrs.BalloonRoot.Position).magnitude then 
                                nrs = v
                            end
                        end
                    end
                end 
            end
        end
    end
    return nrs
end
function GetMark(Field)
    local dist = math.huge
    local mark
    for k, v in ipairs(game.Workspace.Particles:GetChildren()) do
        if v:IsA("Part")
        and v.Name == "AreaRing"
        and getgenv().IsValidTokenPos(v, Field) then
            if ValidFarm()
            and Settings['Auto Farm'] then
                local magnitude = (v.Position - plr.Character.HumanoidRootPart.Position).magnitude
                if magnitude < dist then
                    dist = magnitude
                    mark = v
                end
            end
        end
    end
    return mark
end

function tuoidz2() 
    if not Whitelist then return true end
    if #Whitelist==0 then return true end
end
function IsScrochStar() 
    local cac = "5101329167"
    for k,v in pairs(ListTileGrid) do 
        local PlGui = v
        for _,v in pairs(PlGui:GetChildren()) do 
            if v:FindFirstChild("BG") then 
                  if v.BG:FindFirstChild("Icon")  then 
                        if string.match(v.BG.Icon.Image,cac) then return true end
                  end
            end
        end
    end
    
    return false
end
local PopStarAura = "5101328809"
function IsPopStar()
    for k,v in pairs(ListTileGrid) do 
        local PlGui = v
        for _,v in pairs(PlGui:GetChildren()) do 
            if v:FindFirstChild("BG") then 
                  if v.BG:FindFirstChild("Icon") then 
                        if string.match(v.BG.Icon.Image,PopStarAura) then return true end
                  end
            end
      
      end
    end
    
    return false
end
function IsPrecise() 
    local cac = "rbxassetid://8172818074"
    for k,v in pairs(ListTileGrid) do 
        local PlGui = v
        for _,v in pairs(PlGui:GetChildren()) do 
            if v:FindFirstChild("BG") then 
                  if v.BG:FindFirstChild("Icon") then 
                        if string.match(v.BG.Icon.Image,cac) then return {Text = v.BG.Text.Text, Percent = v.BG.Bar.Size.Y.Scale} end
                  end
            end
        end
    end
    return false
end

function IsAnyCrosshair(Field) 
    for k, v in pairs(game.Workspace.Particles:GetChildren()) do
        if v:IsA("MeshPart") then
            if v.Name == "Crosshair" then
                if getgenv().IsValidTokenPos(v, Field) and (v.Color==Color3.fromRGB(144,119,87) or v.Color==Color3.fromRGB(119, 85, 255)) then
                    return true
                end
            end
        end
    end
end
function GetSortedCrossHair(Field)
    local token = {}
    local sortedtoken = {}

    local SortedFire = {}
    -- if  Settings.GatherFlame then SortedFire = GetSortedFire(Field) end 
    for k, v in pairs(game.Workspace.Particles:GetChildren()) do
        if v:IsA("MeshPart") then
            if v.Name == "Crosshair" then
                if getgenv().IsValidTokenPos(v, Field) and (v.Color~=Color3.fromRGB(17, 134, 19)) then
                    if false and Settings['Gather Flame'] then 
                        local tuoidz
                        for k,v2 in pairs(SortedFire) do 
                            if (v2.Position-v.Position).magnitude < 20 then 
                                tuoidz= true
                                break;
                            end
                        end
                        if tuoidz then 
                            table.insert(sortedtoken,v)
                        else
                            table.insert(token,v)
                        end
                    else
                        table.insert(token,v)
                    end
                end
            end
        end
    end
    

    local function Por(p)
        local nr
        local kk = 0
        for k, v in pairs(token) do
            if not nr then
                nr = v
                kk = k
            end
            
            if (v.Position - p.Position).magnitude < (nr.Position - p.Position).magnitude then
                nr = v
                kk = k
            end
        
        end
        if nr then
            table.insert(sortedtoken, nr)
            table.remove(token, kk)
            Por(nr)
        end
    end
    Por(plr.Character:WaitForChild("HumanoidRootPart"))
    
    return sortedtoken
end
function IsBoostEnd(Field)
    for k,v in pairs(ListTileGrid) do 
        local GUI = v
    for _, v in pairs(GUI:GetChildren()) do
        if v.Name == "IconTile" and v:FindFirstChild("BG") then
            for f, s in pairs(FieldIconID) do
                if
                    v.BG:FindFirstChild("Icon") and v.BG:FindFirstChild("Text") and v.BG:FindFirstChild("Bar") and
                        v.BG.Icon.Image == s and
                        v.BG.Bar.BackgroundColor3 == Color3.fromRGB(255, 228, 81)
                 then
                    if f == Field then
                        return false
                    end
                end
            end
        end
    end
    end
    
    return true
end
function CheckLuoiHai() 
    local plr = game.Players.LocalPlayer
    return plr.Character:FindFirstChild("Dark Scythe")
end
function CoNenNhatCrossHairNuaKhongVay(a)
    local phantram = Settings.CrossHairStand or 0
 
    local co = true
    local khong = false

    if not a then if plr.CoreStats.Pollen.Value >= (plr.CoreStats.Capacity.Value*phantram)/100 then 
        return co
    end end
    local Precise = IsPrecise()
    if not Precise or (Precise and (Precise.Text ~= "x10" or Precise.Percent < 0.6)) then 
        return co
    else
        return khong
    end
end
game.Workspace.Particles.ChildAdded:Connect(function(crosshair) 
    if CoNenNhatCrossHairNuaKhongVay() then return end
    delay(0,function() 
        if crosshair.Name == "Crosshair" then 
            if Settings['Auto Catch Crosshair'] then 
                if Settings['Auto Farm'] then 
                    if getgenv().TempField then 
                        if getgenv().IsValidTokenPos(crosshair,getgenv().TempField) then 
                            if getgenv().SetHeight and crosshair.BrickColor ~= BrickColor.new("Alder") then 
                                crosshair.CanCollide = true
                                crosshair.Size = Vector3.new(14,100,14)
                                crosshair.Transparency = 1
                            end
                        end
                    end
                end
            end
        end
    end)
end)
function WalkPathFind(destination,limittime,CallWhenWalk) 
    --print("Walked Path Find")
    if kc(destination.p,true)<7 then return end
    local PathfindingService = game:GetService("PathfindingService")
    local Players = game:GetService("Players")

    local RunService = game:GetService("RunService")
    
    local path = PathfindingService:CreatePath()
    
    local player = Players.LocalPlayer
    local character = player.Character
    local humanoid = character:WaitForChild("Humanoid")
    
    local TEST_DESTINATION = Vector3.new(100, 0, 100)
    
    local waypoints
    local nextWaypointIndex
    local reachedConnection
    local blockedConnection
    
    local stopeed = false
    local called = false
    local function followPath(destination)
        if stopeed then return end
        -- Compute the path
        local success, errorMessage = pcall(function()
            path:ComputeAsync(character.PrimaryPart.Position, destination.p)
        end)
        
        if success and path.Status == Enum.PathStatus.Success and not stopeed then
            -- Get the path waypoints
            waypoints = path:GetWaypoints()
            -- Detect if path becomes blocked
            blockedConnection = path.Blocked:Connect(function(blockedWaypointIndex)
                -- Check if the obstacle is further down the path
                if blockedWaypointIndex >= nextWaypointIndex then
                    -- Stop detecting path blockage until path is re-computed
                    blockedConnection:Disconnect()
                    -- Call function to re-compute new path
                    if not stopeed then 
                        followPath(destination)
                    end
                end
            end)
    
            -- Detect when movement to next waypoint is complete
            if not reachedConnection then
                reachedConnection = humanoid.MoveToFinished:Connect(function(reached)
                    if nextWaypointIndex and reached and nextWaypointIndex < #waypoints and not stopeed then
                        -- Increase waypoint index and move to next waypoint
                        nextWaypointIndex = nextWaypointIndex+1
                        local oldwaypoint = nextWaypointIndex
                        -- if CallWhenWalk then 
                        --     CallWhenWalk()
                        -- end
                        local c = tick()
                        while oldwaypoint == nextWaypointIndex and nextWaypointIndex < #waypoints and tick()-c < 10 and not stopeed do
                            humanoid:MoveTo(waypoints[nextWaypointIndex].Position)
                            wait(1)
                        end
                    else
                        stopeed = true
                        reachedConnection:Disconnect()
                        blockedConnection:Disconnect()
                    end
                end)
            end
    
            -- Initially move to second waypoint (first waypoint is path start; skip it)

            nextWaypointIndex = 2
            if CallWhenWalk and not stopeed and not called then 
                CallWhenWalk()
                called = true
            end
            humanoid:MoveTo(waypoints[nextWaypointIndex].Position)
        end
    end
    followPath(destination)
    if waypoints then 
        if not limittime then limittime = math.huge end
        local VoHoangNang = tick()
        repeat wait() until nextWaypointIndex>=#waypoints or tick() - VoHoangNang > limittime or stopeed or kc(destination.p,true)<3
        if reachedConnection then reachedConnection:Disconnect()
            end
            if blockedConnection then blockedConnection:Disconnect() end
    end
    stopeed = true
end
-- local LocalFlyingEntity =  require(game.ReplicatedStorage.LocalFlyingEntity)
-- local ListCross = {}
-- local temp
-- local ParticleTools = require(game.ReplicatedStorage.LocalFX.LocalTargetPracticeBeam)
-- game.Workspace.Particles.ChildAdded:Connect(function(v)
-- 	if v.Name == "Crosshair" and v ~= nil and v.BrickColor ~= BrickColor.new("Forest green") and v.BrickColor ~= BrickColor.new("Flint") then
-- 		temp = v
-- 	end
-- end)
-- local old
-- old = hookfunction(ParticleTools.Make,function(...) 
--     local rac = ...
--     if tostring(rac.Player)==plr.Name then 
--         if rac.Action == "Make" then 
--             temp = nil
--             local a = old(...)
--             if temp and rac and rac.FEID then 
--                 --print(rac.Attach.Parent,temp)
--                 local att = LocalFlyingEntity.GetEntity(rac.FEID).Part
--                 if att then 
--                     if not ListCross[att] then 
--                         ListCross[att] = {}
--                     end
--                     table.insert(ListCross[att],temp)
--                 end
                
--             end
--             return a
--         end
--     end
--     return old(...)
-- end)
local ListCross = loadstring(game:HttpGet('https://raw.githubusercontent.com/DonandScripts/IjK4rSEaL88KQAF2azTaH3tSTVPGYjbfXgW62mdFNeFMXhtUmq9I8CKPMux5IjK4rSEaL88KQAF2azTaH3tSTVPGYjbfXgW62mdF/main/Y9RmIXmHAfwi7XxqPwSAaRdL035FwA8QmZa32H9ajS4V6Isb4e.lua'))()

local plr = game.Players.LocalPlayer
spawn(function() 
    while task.wait() do 
            if getgenv().SetHeight and Settings['Auto Farm'] and ValidFarm() and Settings['Auto Catch Crosshair'] and tuoidz2() then 
            --print("Rua bi thieu tvk nang")
            local rac = IsScrochStar()
            local conhathaykvay = CoNenNhatCrossHairNuaKhongVay(true)
            local phantram = Settings.CrossHairStand or 0
            for k2,v in pairs(ListCross) do 
                for k,v in pairs(v) do 
                    if not v.Parent then ListCross[k2] = nil break; end
                end
            end
            for k2,v in pairs(ListCross) do 
                local deo
                local alder
                -- if ListGiftedBee[k2.TopTexture.Texture] then 
                --     deo = true
                -- end
                deo = true
                local count = 0
                local countalder = 0
                for k, v in pairs(v) do
                    v = v
                    if v:IsA("MeshPart") and v.Parent then
                        if v.Name == "Crosshair" then
                            if getgenv().IsValidTokenPos(v, getgenv().TempField) then
                                count = count+1
                                if deo then 
                                    if v.BrickColor ~= BrickColor.new("Alder") and not conhathaykvay then 
                                        v.CanCollide = true
                                        v.Size = Vector3.new(14,100,14)
                                        v.Transparency = 1
                                    elseif v.BrickColor == BrickColor.new("Alder") then
                                        countalder = countalder+1
                                        alder = v
                                    end
                                elseif not conhathaykvay then
                                    v.CanCollide = true
                                    v.Size = Vector3.new(14,100,14)
                                    v.Transparency = 1
                                end
                            end
                        end
                    end
                end
                if count == 3 and countalder==1 then 
                    if alder and not CoNenNhatCrossHairNuaKhongVay(true) and deo then 
                        if deo then 
                            local thieunang
                            if plr.CoreStats.Pollen.Value >= (plr.CoreStats.Capacity.Value*phantram)/100 then 
                                thieunang = true
                            end
                            --StopFarmList["SetHeight"] = true
                            local s,e = pcall(function() 
                                local SucVatVoHoangNang = tick()
                                repeat wait()
                                    WalkPathFind(CFrame.new(alder.Position)*CFrame.new(0,3,0),5,function() 
                                        StopFarmList["SetHeight"] = true
                                    end)
                                until (not thieunang and alder.BrickColor ~= BrickColor.new("Alder")) or alder.Parent == nil or not tuoidz2() or tick()-SucVatVoHoangNang > 5 or not CheckFarm("SetHeight")
                            end)
                            --if not s then print(e) end
                            getgenv().noclip = false
                            StopFarmList["SetHeight"] = false
                        end
                    else
                        --print("Hu")
                        if CoNenNhatCrossHairNuaKhongVay() then 
                            -- print("hhii")
                            local last
                            for k, v in pairs(v) do
                                v = v
                                if v:IsA("MeshPart") and v.Parent then
                                    if v.Name == "Crosshair" and (v.Color~=Color3.fromRGB(17, 134, 19)) then
                                        if getgenv().IsValidTokenPos(v, getgenv().TempField) and CheckFarm("SetHeight") then
                                            v.CanCollide = false
                                            v.Size = Vector3.new(8.5, 0.4, 8.5)
                                            v.Transparency = 0
                                        end
                                    end
                                end
                            end
                            for k, v in pairs(v) do
                                v = v
                                if v:IsA("MeshPart") and v.Parent then
                                    if v.Name == "Crosshair" and (v.Color~=Color3.fromRGB(17, 134, 19)) then
                                        if getgenv().IsValidTokenPos(v, getgenv().TempField) and CheckFarm("SetHeight") then
                                            v.CanCollide = false
                                            v.Size = Vector3.new(8.5, 0.4, 8.5)
                                            v.Transparency = 0
                                            StopFarmList["SetHeight"] = true  
                                            Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
                                            last=v
                                        end
                                    end
                                end
                            end
                            
                            if last then 
                                repeat wait() until last.Parent==nil or not tuoidz2() or not CheckFarm("SetHeight")
                            end
                            StopFarmList["SetHeight"] = false
                        end
                    end
                end
            end
        end
    end
end)
function UseInstant(Instant)
    game.ReplicatedStorage.Events.ToyEvent:FireServer(Instant)
end

function IsInstantValid(Instant)
    local replicatedstorage = game:GetService("ReplicatedStorage")
    local rep = replicatedstorage
    local r = require
    local player = plr

    local function getTimeSinceToyActivation(name)
        return r(rep.OsTime)() - r(rep.ClientStatCache):Get("ToyTimes")[name]
    end

    local function getTimeUntilToyAvailable(n)
        return workspace.Toys[n].Cooldown.Value - getTimeSinceToyActivation(n)
    end
    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
    local gt = StatCache.Get()
    local toy = gt["ToyTimes"]
    if toy[Instant] then
        return getTimeUntilToyAvailable(Instant) <= 0
    else
        return false
    end
end

function IsAnyInstantValid()
    local Lis = GetInstantList()
    for k, v in pairs(Lis) do
        if IsInstantValid(v.Name) then
            return true
        end
    end
    return false
end
function GetSortedBubble(Field)
    local token = {}
    local sortedtoken = {}
    for k, v in pairs(game.Workspace.Particles:GetChildren()) do
        if v:IsA("Part") then
            if v.Name == "Bubble" then
                if getgenv().IsValidTokenPos(v, Field) and ValidFarm() and Settings['Auto Farm'] then
                    table.insert(token,v)
                end
            end
        end
    end
    

    local function Por(p)
        local nr
        local kk = 0
        for k, v in pairs(token) do
            if not nr then
                nr = v
                kk = k
            end
            
            if (v.Position - p.Position).magnitude < (nr.Position - p.Position).magnitude then
                nr = v
                kk = k
            end
        
        end
        if nr then
            table.insert(sortedtoken, nr)
            table.remove(token, kk)
            Por(nr)
        end
    end
    Por(plr.Character:WaitForChild("HumanoidRootPart"))
    
    return sortedtoken
end

local FieldXYJSON = [[{"Mountain Top Field":{"Y":27,"X":23},"Bamboo Field":{"Y":17,"X":38},"Dandelion Field":{"Y":17,"X":35},"Pumpkin Patch":{"Y":16,"X":32},"Sunflower Field":{"Y":32,"X":19},"Mushroom Field":{"Y":22,"X":31},"Blue Flower Field":{"Y":16,"X":42},"Pine Tree Forest":{"Y":30,"X":22},"Strawberry Field":{"Y":25,"X":21},"Coconut Field":{"Y":20,"X":29},"Stump Field":{"Y":0,"X":0},"Spider Field":{"Y":25,"X":27},"Rose Field":{"Y":19,"X":30},"Ant Field":{"Y":12,"X":31},"Clover Field":{"Y":28,"X":25},"Pineapple Patch":{"Y":22,"X":32},"Cactus Field":{"Y":17,"X":32},"Pepper Patch":{"Y":26,"X":20}}]]
local FieldXY = game:GetService("HttpService"):JSONDecode(FieldXYJSON)

local StartC = tick()
local EndC=StartC
local fulled = false

spawn(function() 
    while wait(.5) do 
        local function Ret() 
            if not Settings['Auto Fire Face'] and not Settings['Auto Tide Face'] then             if plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("UpperTorso") and plr.Character.UpperTorso:FindFirstChild('adel') then 
                plr.Character.UpperTorso['adel']:Destroy()
            end end
            if Settings['Auto Fire Face'] and getgenv().TempField then 

                getgenv().xa = GetNearestFire(nil,true)
                -- do 
                --     local arrow = getgenv().arrow or Instance.new("Part",workspace)
                --     getgenv().arrow = arrow
                --     arrow.Color = Color3.new(255, 0, 125)
                --     arrow.Size = Vector3.new(5,1,5)
                --     arrow.Anchored = true
                --     arrow.CanCollide = false
                --     if getgenv().xa then 
                --         arrow.CFrame = CFrame.lookAt((CFrame.new(xa.Position)*CFrame.new(0,5,0)).p,xa.Position)
                --     else
                --         arrow.CFrame = CFrame.new()
                --     end
                -- end
                local bm = plr.Character.UpperTorso:FindFirstChild('adel') or Instance.new("BodyGyro",game.Players.LocalPlayer.Character.UpperTorso)
                bm.Name='adel'
                if xa and kc(xa.Position)<30 then 
                    bm.CFrame = CFrame.lookAt(game.Players.LocalPlayer.Character.UpperTorso.Position,xa.Position)
                else
                    bm.CFrame = CFrame.lookAt(game.Players.LocalPlayer.Character.UpperTorso.Position,GetFieldByName(getgenv().TempField).Position)
                end
                bm.MaxTorque = Vector3.new(0, math.huge, 0)
                bm.D = tonumber(shared.D or 0)
                bm.P = tonumber(shared.P or 5000)
                return
            end
            if Settings['Auto Tide Face'] then             
                local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
                local part = getIntersection(game.Workspace.Flowers,ray)
                if part then 
                    local curr,x,y = GetXY(part)
                    if curr and x and y then 
                        local CurrentField = GetFieldByFP(curr)
                        if CurrentField and FieldXY[CurrentField] then 
                            local maxX = FieldXY[CurrentField].X
                            local maxY = FieldXY[CurrentField].Y
                            
                            local tb = {}
    
                            if plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("UpperTorso") then 
                                local a = GetFlower(curr,x,0)
                                table.insert(tb,a)
                                local a = GetFlower(curr,x,maxY)
                                table.insert(tb,a)
                                local a = GetFlower(curr,0,y)
                                table.insert(tb,a)
                                local a = GetFlower(curr,maxX,y)
                                table.insert(tb,a)
    
                                local xa
                                for k,v in pairs(tb) do 
                                    if not xa then xa = v end
                                    if (v.Position-plr.Character.HumanoidRootPart.Position).magnitude>(xa.Position-plr.Character.HumanoidRootPart.Position).magnitude then 
                                        xa=v
                                    end
                                end
                                if xa then
                                    local bm = plr.Character.UpperTorso:FindFirstChild('adel') or Instance.new("BodyGyro",game.Players.LocalPlayer.Character.UpperTorso)
                                    bm.Name='adel'
                                    bm.CFrame = CFrame.lookAt(game.Players.LocalPlayer.Character.UpperTorso.Position,xa.Position)
                                    bm.MaxTorque = Vector3.new(0, math.huge, 0)
                                    bm.D = tonumber(shared.D or 0)
                                    bm.P = tonumber(shared.P or 5000)
                                    return
                                end
                            end
                        end
                    else
                    end
                else
                end
            else
            end
            if plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("UpperTorso") and plr.Character.UpperTorso:FindFirstChild('adel') then 
                plr.Character.UpperTorso['adel']:Destroy()
            end
        end
        Ret()
        
    end
end)


local CollectThings = {
    Shower = {},
    Coco = {},
    Metor = {}
}

local ListTr = {}

local rac = game:GetService("ReplicatedStorage").Events.LocalFX
rac.OnClientEvent:Connect(function(...) 
    if Settings['Auto Triangulate'] then 
        local cac,rac = ...
        if cac=="Triangulate" then
            if plr.Character:FindFirstChild("HumanoidRootPart") then 
                if rac.Part1==plr.Character.HumanoidRootPart then 
                    table.insert(ListTr,{Start = tick(),Obj = rac})
                end
            end
        end
    else
        while #ListTr>0 do 
            table.remove(ListTr,1)
        end
    end

    if Settings['Auto Farm Metor'] then 
        local suc,vat,rua,thieu,nang = ...
        if suc == "MythicMeteor" then 
            table.insert(CollectThings.Metor,{Start=tick(),Obj = vat})
        end
    end
    for k,v in pairs(CollectThings.Metor) do 
        local delay = v.Obj.Delay or 2.5     
        local tuoidz = v.Obj.Dur or 0.8
        if (tick() > (tuoidz+v.Start+delay)) then 
            table.remove(CollectThings.Metor,table.find(CollectThings.Metor,v))
        end
    end
end)

game.Workspace.Particles.ChildAdded:Connect(function(v) 
    if v.Name=="WarningDisk" then 
        if v.Size.X==30 then 
            table.insert(CollectThings.Coco,v) 
        elseif v.Size.X==8 then
            table.insert(CollectThings.Shower,v) 
        end    
    end
end)

game.Workspace.Particles.ChildRemoved:Connect(function(v) 
    local type
    if v.Name=="WarningDisk" then 
        if v.Size.X==30 then 
            type="Coco"
        elseif v.Size.X==8 then
            type="Shower"
        end    
    end
    if type then 
        for k,val in pairs(CollectThings[type]) do 
            if val==v then table.remove(CollectThings[type],k) end
        end
    end
end)
function GetCurrenMicro()
    local StatCache = TvkStatCache
    return StatCache["Eggs"]["Micro-Converter"]
end
function GetSortedCoconut(Field, IsShower)
    local type="Coco"
    if IsShower then 
        type="Shower"
    end
    local coco = {}
    local cac = 1
    if Settings['Shower Instant TP'] then cac = 0.5 end
    for k,v in pairs(CollectThings[type]) do 
        if plr.Character:FindFirstChild("HumanoidRootPart") and (v.Position-plr.Character.HumanoidRootPart.Position).magnitude<80
        and v:FindFirstChild("Mesh")
        then
            table.insert(coco,v)
        end
    end
    return coco;
end
function CheckItemCooldown(rua,cd) 
    local thieu = TvkStatCache.PlayerActiveTimes
    if thieu then 
        local nang = thieu[rua]
        if nang then 
            if os.time()-nang > cd then return true end
        else
            return true
        end
    else
        return true
    end
end

local tuoiResetTime
local tuoiTimeBlock
getgenv().DatSprinkler= false
local f = nil
getgenv().DiNhatTokenDi= false
-- spawn(function()
--     while task.wait() do
--         LPH_NO_VIRTUALIZE(function()
--             --local pm,eed = pcall(function()
--             if Settings['Auto Farm'] and ValidFarm() and not getgenv().DiNhatTokenDi and not getgenv().GotoField and not Selling then 
--                 -- if not DangNhatToken then
--                 --     sucvatruabithieunang = false
--                 --     piro = nil
--                 --     token = nil
--                 -- end
--                 local token 
--                 local piro
--                 local DangNhatToken
--                 local sucvatruabithieunang = false
--                 local TempField= FarmFieldList[LevelFarm[#LevelFarm]]
--                 local FieldPosIn = FieldFarmPos[TempField]
--                 if not token then 
--                     token,piro = GetNerestToken(TempField,nil,ListAllToken,FieldPosIn,Whitelist)
--                 end
--                 if token and token.Parent == game:GetService("Workspace").Camera.DupedTokens then 
--                     sucvatruabithieunang = true
--                 end
--                 if Settings['Prioritize Token Collection only'] then 
--                     if piro then 
--                         getgenv().DisableSetSpeed = false
--                     else
--                         getgenv().DisableSetSpeed = true
--                     end
--                 end
--                 if token then
--                     if getgenv().IsValidTokenPos(token, TempField,FieldPosIn) and getgenv().IsToken(token) and not getgenv().IsTokenBlacklist(token) then
--                         DangNhatToken = true 
--                         Walkk(CFrame.new(token.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, token.Position.Z),token)
--                         local Black = Instance.new("Part")
--                         Black.Parent = token
--                         Black.Name = "Blacklisted"
--                         Black.Anchored=true
--                         Black.CanCollide=false
--                         Black.Transparency=1
--                         Black.CFrame=CFrame.new(1000000,100000,100000)
--                         game.Debris:AddItem(Black,2)
--                         if Settings['Prioritize Token Collection only'] then 
--                             getgenv().DisableSetSpeed = true
--                         else
--                             getgenv().DisableSetSpeed = false
--                         end
--                         if sucvatruabithieunang then 
--                             wait(1)
--                         end
--                         DangNhatToken = false
--                     end
--                 else
--                     if plr.Character:FindFirstChild("HumanoidRootPart") then 
--                         if Settings['Auto Walk To Mark'] and GetMark(TempField) then
--                             local mark = GetMark(TempField)
--                             if mark
--                             and Settings['Auto Farm'] then
--                             if (plr.Character:FindFirstChild("HumanoidRootPart").Position - mark.Position).magnitude > mark.Size.X / 1.5 then  
--                                 Walkk(CFrame.new(mark.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, mark.Position.Z))
--                             else
--                                 local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
--                                 local part = getIntersection(game.Workspace.Flowers,ray)
--                                 if part then 
--                                     local curr,x,y = GetXY(part)
--                                     if curr and x and y then 
--                                         local n = (FieldPosIn and FieldPosIn.WalkRd) or 3
--                                         local xnew = math.random(x-n,x+n)
--                                         local ynew = math.random(y-n,y+n)
--                                         local newflower = GetFlower(curr,xnew,ynew)
--                                         if newflower then 
--                                             if getgenv().IsValidTokenPos(newflower,TempField,FieldPosIn) then
--                                                 Walkk(newflower.CFrame)
--                                             end
--                                         end
                                    
--                                     end
--                                 end
--                             end
--                             end
--                         elseif Settings['Auto Walk To Balloon'] and GetNearestBalloon(TempField) then 
--                             local nrs = GetNearestBalloon(TempField)
--                             Walkk(nrs.BalloonRoot.CFrame)
--                         else
--                             local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
--                             local part = getIntersection(game.Workspace.Flowers,ray)
--                             if part then 
--                                 local curr,x,y = GetXY(part)
--                                 if curr and x and y then 
--                                     local xnew = math.random(x-5,x+5)
--                                     local ynew = math.random(y-5,y+5)
--                                     local newflower = GetFlower(curr,xnew,ynew)
--                                     if newflower then 
--                                         if getgenv().IsValidTokenPos(newflower.Position+Vector3.new(0,2,0),TempField) then
--                                             Walkk(newflower.CFrame)
--                                             newflower = nil
--                                         end
--                                     end
--                                 end
--                             end
--                         end
--                     end
--                 end
--             --end)
--             --if not pm then print(eed) end
--             end
--         end)()
--     end
-- end)
-- local CollectBubble 

-- spawn(function()
--     while wait() do
--         local TempField= FarmFieldList[LevelFarm[#LevelFarm]]
--         local FieldPosIn = FieldFarmPos[TempField]
--         if Settings['Auto Collect Bubble'] and Settings['Auto Farm'] and tuoidz2() then
--             for k, v in ipairs(GetSortedBubble(TempField)) do
--                 if v:IsA("Part") then
--                     if v.Name == "Bubble" and not CollectBubble then
--                         CollectBubble = v
--                         -- if getgenv().IsValidTokenPos(v, TempField,FieldPosIn) and ValidFarm() and Settings['Auto Farm'] and Settings['Auto Collect Bubble'] then
--                         --     Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
--                         -- end
--                     end
--                 end
--             end
--         end
--     end
-- end)
local lonnhat
local lonnhat1 = false
spawn(function()
    while task.wait() do
        local TempField= FarmFieldList[LevelFarm[#LevelFarm]]
        local FieldPosIn = FieldFarmPos[TempField]
        for k,v in pairs(ListTr) do 
            lonnhat1 = false
            lonnhat = nil
            if tick() > (v.Obj.Dur*3/5+v.Start) and not (tick() > (v.Obj.Dur+v.Start)) and Settings['Auto Farm'] and ValidFarm() and Settings['Auto Triangulate'] then 
                repeat task.wait()
                    -- local BestPos = GetBestTriagulatePoint(Field,v.Obj.RootPos,v.Obj.Part2.Position)
                    -- if BestPos then 
                    --     local Pos = CFrame.new(BestPos.x,plr.Character.HumanoidRootPart.Position.Y,BestPos.y)
                    --     tpT(Pos,nil,nil,nil,true)
                    -- end
                    -- wait(1)
                    local posa,posb,posc,posd
                    if TempField=="Stump Field" then 
                         posa = Vector3.new(383.16137695312, 96.24715423584, -211.4790802002)
                         posb = Vector3.new(390.18466186523, 96.247131347656, -135.6063079834)
                         posc = Vector3.new(457.4714050293, 96.247131347656, -137.40628051758)
                         posd = Vector3.new(457.81576538086, 96.247138977051, -215.57917785645)
                    else
                        if GetFieldByName(TempField):FindFirstChild("ID") and FieldXY[TempField] then 
                            local FieldID = GetFieldByName(TempField).ID.Value
                            posa = GetFlower("FP"..FieldID,0,0).Position
                            posb = GetFlower("FP"..FieldID,FieldXY[TempField].X,0).Position
                            posc = GetFlower("FP"..FieldID,FieldXY[TempField].X,FieldXY[TempField].Y).Position
                            posd = GetFlower("FP"..FieldID,0,FieldXY[TempField].Y).Position
                        end
                        --print(posa,posb,posc,posd)
                    end
                    if posa and posb and posc and posd and v.Obj and v.Obj.RootPos and v.Obj.Part1 then 

                        local ListTd = {}
                    
                        ListTd[1] = {pos=posa,DT=DienTichTamGiac(v.Obj.RootPos,v.Obj.Part1.Position,posa)}
                        ListTd[2] = {pos=posb,DT=DienTichTamGiac(v.Obj.RootPos,v.Obj.Part1.Position,posb)}
                        ListTd[3] = {pos=posc,DT=DienTichTamGiac(v.Obj.RootPos,v.Obj.Part1.Position,posc)}
                        ListTd[4] = {pos=posd,DT=DienTichTamGiac(v.Obj.RootPos,v.Obj.Part1.Position,posd)}
                        for k,v in pairs(ListTd) do 
                            if not lonnhat then lonnhat = v end
                            if v.DT > lonnhat.DT then lonnhat=v end
                           -- print(v.DT)
                        end
                        if lonnhat then 
                            lonnhat1 = true
                            --print(CountMark(TempField,lonnhat.pos,v.Obj.RootPos,v.Obj.Part2.Position))
                            --tpT(CFrame.new(lonnhat.pos.X,plr.Character.HumanoidRootPart.Position.Y,lonnhat.pos.Z),nil,nil,nil,true)
                        end
                    end
                until (tick() > (v.Obj.Dur+v.Start)) or not Settings['Auto Farm'] or not ValidFarm()
                RemoveVal(ListTr,v)
                lonnhat1 = false
                lonnhat = nil
            elseif (tick() > (v.Obj.Dur+v.Start)) then
                RemoveVal(ListTr,v)
            end
        end
    end
end)
function DienTichTamGiac(x,y,z)
    x=Vector3.new(x.X,0,x.Z)
    y=Vector3.new(y.X,0,y.Z)
    z=Vector3.new(z.X,0,z.Z)
    
    local a = (x-y).magnitude
    local b = (y-z).magnitude
    local c = (x-z).magnitude
    local cv = a+b+c
    local p = cv/2
    local S =(p*(p-a)*(p-b)*(p-c))
    return S
end 
local RunService = game:GetService("RunService")--LPH_NO_VIRTUALIZE
getgenv().GotoField= true
-- local AutoFarm = LPH_NO_VIRTUALIZE(function(Status)
--         getgenv().StartFarm = Status
--         --while getgenv().StartFarm do
--             if ValidFarm() and Settings['Auto Farm'] then
--                 local currentTime = tick()
--                 if not tuoiTimeBlock and (not tuoiResetTime or tick()-tuoiResetTime > 20) then 
--                     if Settings['Reset After Bee Energy Is Lower Than X'] then 
--                         tuoiTimeBlock = true
--                         tuoidz(function(tuoidz) 
--                             if tuoidz*100 <= (Settings['Bee Energy'] or 50) then 
--                                 pcall(function() 
--                                     game.Players.LocalPlayer.Character.Humanoid.Health = 0
--                                     local act2
--                                     repeat wait() 
--                                         pcall(function() 
--                                             if game.Players.LocalPlayer.Character.Humanoid.Health > 0 and not game.Players.LocalPlayer.Character:FindFirstChild("ForceField") then 
--                                                 act2 = true
--                                             end
--                                         end)
--                                     until act2
                                      
--                                     wait(.2)
--                                     repeat wait() 
--                                         pcall(function() 
--                                             if not game.Players.LocalPlayer.Character:FindFirstChild("ForceField") then 
--                                                 act2 = true
--                                             end
--                                         end)
--                                     until act2
--                                     game.Players.LocalPlayer.Character.Humanoid.Health = 0
--                                 end)
--                             end
--                             tuoiTimeBlock = false
--                         end)
--                     end
--                     tuoiResetTime = tick()
--                 end
--                 if not plr.Character or not plr.Character:FindFirstChild("Humanoid") or not plr.Character:FindFirstChild("HumanoidRootPart") or plr.Character:FindFirstChild("Humanoid").Health==0 then 
--                     wait(8)
--                 end
--                 local TempField= FarmFieldList[LevelFarm[#LevelFarm]]
--                 getgenv().TempField = TempField
--                 local Character = plr.Character
--                 local HumanoidRootPart = GetHumanoidRootPart()
--                 local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
--                 local part = getIntersection(game.Workspace.Flowers,ray)
--                 if not getgenv().SprinklerLastPlaced then getgenv().SprinklerLastPlaced = 0 end
--                 if tick()-getgenv().SprinklerLastPlaced > 5*60 or not IsValidCharactPos(TempField) then
--                     TpToField(TempField)
--                     wait(1)
--                     getgenv().SprinklerLastPlaced = tick()
--                     if not getgenv().SprinklerLastPlaced then getgenv().SprinklerLastPlaced = tick() end
--                     if not NoSprink and Sprinklers[GetEquipSrinkler()] and Sprinklers[GetEquipSrinkler()] > 1 then
--                         local old = plr.Character.HumanoidRootPart.CFrame
--                         if CountSprink(GetEquipSrinkler(),GetFieldByName(TempField).Position) < Sprinklers[GetEquipSrinkler()] then 
--                             wait(1)
--                             getgenv().SprinklerLastPlaced = tick()
--                             local datcmm = 0
--                             for i=1,Sprinklers[GetEquipSrinkler()] do 
--                                 if plr.Character:FindFirstChild("Humanoid")
--                                 and plr.Character:FindFirstChild("HumanoidRootPart") then
--                                     tpT(old*CFrame.new(0,10,0), 100)
--                                     getgenv().noclip = true
--                                     wait(.8)
--                                     -- game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
--                                     --     {["Name"] = "Sprinkler Builder"}
--                                     -- )
--                                     getgenv().DatSprinkler = true
--                                     wait(1.5)
--                                 end
--                             end
--                             getgenv().noclip = false
--                             if ValidFarm() then 
--                                 tpT(old, 100)
--                             end
--                         end  
--                     else
--                         if (GetEquipSrinkler() and Sprinklers[GetEquipSrinkler()] and CountSprink(GetEquipSrinkler(),GetFieldByName(TempField).Position) < Sprinklers[GetEquipSrinkler()]) then 
                        
--                         end
--                         getgenv().SprinklerLastPlaced = tick()
--                         -- game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
--                         --     {["Name"] = "Sprinkler Builder"}
--                         -- )
--                         getgenv().DatSprinkler = true
--                         wait(1)
--                     end
--                 end
--                 getgenv().DatSprinkler = false
--                 if TempField == FarmFieldList["CurrentField"] then 
--                     if table.find(Settings['Selected Auto Use Items'], 'Glitter') then 
--                         if CheckItemCooldown("Glitter",15*60) then 
--                             -- game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
--                             --         {["Name"] = "Glitter"}
--                             --     )
--                         end
--                     end
--                 end
--                 local FieldPosIn = FieldFarmPos[TempField]
--                 if FieldPosIn then 
--                     if #FieldPosIn["List"]>0 then 
--                         if (plr.Character.HumanoidRootPart.Position-FieldPosIn.List[1].p).magnitude>FieldPosIn.Range then 
--                             Walkk(FieldPosIn.List[1],nil,function() 
--                                 return (plr.Character.HumanoidRootPart.Position-FieldPosIn.List[1].p).magnitude>=FieldPosIn.Range
--                             end)
--                         end  
--                     end
--                 end
--                 getgenv().DiNhatTokenDi = false
--                 if Settings['Avoid Mob'] then 
--                     local function IsMob() 
--                         for k,v in ipairs(game:GetService("Workspace").Monsters:GetChildren()) do 
--                             if v:FindFirstChild("Head") and not string.match(v.Name,"Vici") and not string.match(v.Name,"Windy") and not string.match(v.Name,"Mondo") then 
--                                 if (plr.Character:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Target") and tostring(v.Target.Value)==plr.Name) or v:FindFirstChild("adel") then 
--                                     if (plr.Character.HumanoidRootPart.Position-v.Head.Position).magnitude<28 then 
--                                         if not v:FindFirstChild("Ignored") then 
--                                             local ractvk = Instance.new("Part")
--                                             ractvk.Name = "Ignored"
--                                             ractvk.Parent = v
--                                             ractvk.Anchored=true
--                                             ractvk.CanCollide=false
--                                             ractvk.Transparency=1
--                                             ractvk.CFrame=CFrame.new(10000,10000,10000)
--                                         end
--                                         return true
--                                     end
--                                 end
--                             end
--                         end
--                     end
--                     if plr.Character:FindFirstChild("Humanoid") then 
--                         if IsMob() then 
--                             getgenv().DiNhatTokenDi = true
--                             DisableGlider()
--                             local oldj
--                             repeat wait()
--                                 if plr.Character:FindFirstChild("Humanoid") then
--                                 if not oldj then oldj = plr.Character.Humanoid.JumpPower end
--                                 plr.Character.Humanoid.JumpPower= 80
--                                 plr.Character.Humanoid.Jump=true
--                                 end
--                             until not IsMob() or not Settings['Auto Farm'] or not ValidFarm() or not Settings['Avoid Mob']
--                             if plr.Character:FindFirstChild("Humanoid") and oldj then
--                                 plr.Character.Humanoid.JumpPower=oldj
--                             end
--                             oldj = nil
--                             wait(.1)
--                             EnableGlider()
--                             getgenv().noclip = false
--                         else
--                         end
--                     end
--                 end
--                 if Settings['Auto Triangulate'] and tuoidz2() then 
--                     if lonnhat and lonnhat1 then
--                         getgenv().DiNhatTokenDi = true
--                         tpT(CFrame.new(lonnhat.pos.X,plr.Character.HumanoidRootPart.Position.Y,lonnhat.pos.Z),nil,nil,nil,true)
--                     end
--                 end

--                 if Settings['Auto Collect Light'] and tuoidz2() then
--                     local GetNuts = GetSortedCoconut(TempField,true)
--                     while #GetNuts > 0 do 
--                         for k,v in pairs(GetNuts) do 
--                             if v:FindFirstChild("Mesh") and ValidFarm() and Settings['Auto Farm'] then 
--                                 repeat wait()
--                                     getgenv().DiNhatTokenDi = true
--                                     local vP = v.Position
--                                     if kc(vP) > 1 then
--                                         if Settings['Shower Instant TP'] then 
--                                             plr.Character.HumanoidRootPart.CFrame = CFrame.new(vP.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, vP.Z)
--                                         else 
--                                             Walkk(CFrame.new(vP.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, vP.Z))
--                                         end
--                                     end
--                                 until not v.Parent or not v:FindFirstChild("Mesh") or not Settings['Auto Farm'] or not ValidFarm()
--                             end
--                         end
--                         GetNuts = GetSortedCoconut(TempField,true)
--                         wait()
--                     end
--                 end 
    
--                 if Settings['Auto Collect Coconut'] and tuoidz2()then
--                     local GetNuts = GetSortedCoconut(TempField)
--                     while #GetNuts > 0 do 
--                         for k,v in pairs(GetNuts) do 
--                             if v:FindFirstChild("Mesh") and ValidFarm() and Settings['Auto Farm'] then 
--                                 repeat wait()
--                                     getgenv().DiNhatTokenDi = true
--                                     local vP = v.Position
--                                     if kc(vP) > 2 then
--                                         if Settings['Shower Instant TP'] then 
--                                             plr.Character.HumanoidRootPart.CFrame = CFrame.new(vP.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, vP.Z)
--                                         else 
--                                             Walkk(CFrame.new(vP.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, vP.Z))
--                                         end
--                                     end
--                                 until not v.Parent or not v:FindFirstChild("Mesh") or not Settings['Auto Farm'] or not ValidFarm()
--                             end
--                         end
--                         GetNuts = GetSortedCoconut(TempField)
--                         wait()
--                     end
--                 end
    
--                 if Settings['Auto Collect Bubble'] and tuoidz2() then
--                     for k, v in ipairs(GetSortedBubble(TempField)) do
--                         if v:IsA("Part") then
--                             if v.Name == "Bubble" then
--                                 if getgenv().IsValidTokenPos(v, TempField,FieldPosIn) and ValidFarm() and Settings['Auto Farm'] and Settings['Auto Collect Bubble'] then
--                                     Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
--                                 end
--                             end
--                         end
--                     end
--                 end
--                 if Settings['Auto Catch Crosshair'] and tuoidz2() then 
--                     if true then 
--                         local Precise = IsPrecise()
--                         local IsPI = false
--                         if not Precise or (Precise and (Precise.Text ~= "x10" or Precise.Percent < 0.6)) then 
--                             --getgenv().SetHeight = false
--                             IsPI = true
--                             local last
--                             local Sorted = GetSortedCrossHair(TempField)
--                             local phantram = Settings.CrossHairStand or 0
--                             --print(#Sorted)
--                             --print(phantram)
--                             if true and plr.CoreStats.Pollen.Value >= (plr.CoreStats.Capacity.Value*phantram)/100 then 
--                                 getgenv().SetHeight = true
--                                 getgenv().TempField = TempField
--                                 IsPI = false
--                             else
--                                 getgenv().SetHeight = false
--                                 while #Sorted>0 do
--                                     for k, v in pairs(Sorted) do
--                                         if v:IsA("MeshPart") then
--                                             if getgenv().IsValidTokenPos(v, TempField) and ValidFarm() and Settings['Auto Farm'] and (v.Color~=Color3.fromRGB(17, 134, 19)) then
--                                                 getgenv().DiNhatTokenDi = true
--                                                 Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
--                                                 last = v
--                                                 if last then 
--                                                     local phantram = Settings.CrossHairStand or 0
--                                                     --print(phantram)
--                                                     if plr.CoreStats.Pollen.Value >= (plr.CoreStats.Capacity.Value*phantram)/100 then 
--                                                         --print("tvk")
--                                                         getgenv().SetHeight = true
--                                                         getgenv().TempField = TempField
--                                                         IsPI = false
--                                                         break
--                                                     end
--                                                 end
--                                             end
--                                         end
--                                     end   
--                                     Sorted = GetSortedCrossHair(TempField)
--                                 end
--                             end
--                         end
--                         if not IsPI then
--                             getgenv().SetHeight = true
--                             getgenv().TempField = TempField-- thieu dong nay nhe :huhuhu:
--                         else 
--                             getgenv().SetHeight = false
--                         end
--                     elseif not true then
--                         getgenv().SetHeight = false
--                         for k, v in pairs(GetSortedCrossHair(TempField)) do
--                             if v:IsA("MeshPart") then
--                                 if getgenv().IsValidTokenPos(v, TempField) and ValidFarm() and Settings['Auto Farm'] then
--                                     getgenv().DiNhatTokenDi = true
--                                     Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
--                                     local phantram = Settings.CrossHairStand or 0
--                                     --print(phantram)
--                                     if plr.CoreStats.Pollen.Value >= (plr.CoreStats.Capacity.Value*phantram)/100 then 
--                                         --print("tvk")
--                                         repeat wait() until not v.Parent or not Settings['Auto Catch Crosshair']
--                                     end
--                                 end
--                             end
--                         end
--                     end
--                 end
--                 if Settings['Auto Bubble Bloat Collector'] and IsPopStar() and tuoidz2() then 
--                     repeat wait()
--                             for k, v in pairs(GetSortedBubble(TempField)) do
--                                 if v:IsA("Part") then
--                                     if v.Name == "Bubble" then
--                                         if getgenv().IsValidTokenPos(v, TempField,FieldPosIn) and ValidFarm()  and Settings['Auto Farm']  then
--                                             getgenv().DiNhatTokenDi = true
--                                             Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
--                                         end
--                                     end
--                                 end
--                             end
--                         for _,v in pairs(game.Workspace.Collectibles:GetChildren()) do 
--                             if ValidFarm() and Settings['Auto Farm'] and getgenv().IsToken(v) and getgenv().IsValidTokenPos(v,TempField) and v.FrontDecal.Texture==PrioritizeList["Summon Frog"] then
--                                 getgenv().DiNhatTokenDi = true
--                                 Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))                                       
--                             end
--                         end
--                     until not IsPopStar() or not Settings['Auto Bubble Bloat Collector'] or not  Settings['Auto Farm'] 
--                 end
    
--                 if Settings['Gather Flame'] and tuoidz2() then
--                     local tuoidz3 = true
--                     local function checkdk() 
--                         if Settings.OnlyGatherWhenVoHoangNang then 
--                             if not IsScrochStar() then return true end   
--                         end 
--                         local piro = IsAnyPiro(TempField,nil,ListAllToken,FieldPosIn,Whitelist)
--                         if piro then 
--                             return true
--                         end
    
--                         local cross = IsAnyCrosshair(TempField)
--                         if cross then 
--                             if CoNenNhatCrossHairNuaKhongVay() then 
--                                 return true
--                             end
--                         end
--                     end
--                     local function CheckXa() 
--                         if CheckLuoiHai() then 
--                             if Settings['Auto Fire Face'] then 
--                                 if getgenv().xa and getgenv().xa.Parent and ValidFarm() and Settings['Gather Flame'] and Settings['Auto Farm'] and IsValidTokenPos(getgenv().xa,TempField) then 
--                                     local v = getgenv().xa
--                                     if v:FindFirstChild("PF") then 
--                                         if v.PF.Color ~= game:GetService("ReplicatedStorage").LocalFX.LocalFlames.DarkFlame.PF then
--                                             return true
--                                         end
--                                     end
                                    
--                                 end
--                             end
--                         end
--                     end
--                     if CheckXa() then 
--                         local v = getgenv().xa
--                         getgenv().DiNhatTokenDi = true
--                         Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z)) 
--                     end
--                     if tuoidz3 and not checkdk() and ValidFarm() and not CheckXa() then 
--                         local v = GetNearestFire(TempField)
--                         local t = tick()
--                         while v and not checkdk() and ValidFarm() and not CheckXa() do
--                             --print("Rua bi nang")
--                             getgenv().DiNhatTokenDi = true
--                             Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
--                             local t = tick()
--                             local tuoidz
--                             while wait(.5) do
--                                 --print("Rua bi nangggg")
--                                 if CheckXa() then               
--                                     tuoidz=true
--                                     break 
--                                 end
--                                 if not ValidFarm() then tuoidz = true break end
--                                 --Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
--                                 if not Settings['Auto Farm'] then 
--                                     tuoidz=true
--                                     break
--                                 end
--                                 if not Settings['Gather Flame'] then
--                                     tuoidz=true
--                                     break
--                                 end
--                                 if (tick() - t) > 10 then
--                                     break
--                                 end
--                                 if not v.Parent then break end
--                                if checkdk() then tuoidz=true break end
--                                getgenv().DiNhatTokenDi = true
--                                Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
--                             end 
--                             if tuoidz then break end
--                             wait()
--                         end
--                     end      
--                 end
--                 local sucvatruabithieunang = false
--                 local token 
--                 local piro
--                 if not token then 
--                     token,piro = GetNerestToken(TempField,nil,ListAllToken,FieldPosIn,Whitelist)
--                 end
--                 if token and token.Parent == game:GetService("Workspace").Camera.DupedTokens then 
--                     sucvatruabithieunang = true
--                 end
--                 if Settings['Prioritize Token Collection only'] then 
--                     if piro then 
--                         getgenv().DisableSetSpeed = false
--                     else
--                         getgenv().DisableSetSpeed = true
--                     end
--                 end
--                 --print(token,FieldPosIn)
                
--                 if token then
--                     if getgenv().IsValidTokenPos(token, TempField,FieldPosIn) and getgenv().IsToken(token) and not getgenv().IsTokenBlacklist(token) and Settings.Farm and ValidFarm() then
--                         Walkk(CFrame.new(token.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, token.Position.Z),token)
--                         local Black = Instance.new("Part")
--                         Black.Parent = token
--                         Black.Name = "Blacklisted"
--                         Black.Anchored=true
--                         Black.CanCollide=false
--                         Black.Transparency=1
--                         Black.CFrame=CFrame.new(1000000,100000,100000)
--                         game.Debris:AddItem(Black,2)
--                         if Settings['Prioritize Token Collection only'] then 
--                             getgenv().DisableSetSpeed = true
--                         else
--                             getgenv().DisableSetSpeed = false
--                         end
--                         if sucvatruabithieunang then 
--                             wait(1)
--                         end
--                     else
--                         wait()
--                         f = nil
--                     end
--                 else
--                      if plr.Character:FindFirstChild("HumanoidRootPart") then 
--                          if Settings['Auto Walk To Mark']
--                          and GetMark(TempField) then
--                              local mark = GetMark(TempField)
--                              if mark
--                              and Settings['Auto Farm'] then
--                                 if (plr.Character:FindFirstChild("HumanoidRootPart").Position - mark.Position).magnitude > mark.Size.X / 1.5 then  
--                                     Walkk(CFrame.new(mark.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, mark.Position.Z))
--                                 else
--                                     local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
--                                     local part = getIntersection(game.Workspace.Flowers,ray)
--                                     if part then 
--                                         local curr,x,y = GetXY(part)
--                                         if curr and x and y then 
--                                             local n = (FieldPosIn and FieldPosIn.WalkRd) or 3
--                                             local xnew = math.random(x-n,x+n)
--                                             local ynew = math.random(y-n,y+n)
--                                             local newflower = GetFlower(curr,xnew,ynew)
--                                             if newflower then 
--                                                 if getgenv().IsValidTokenPos(newflower,TempField,FieldPosIn) then
--                                                     Walkk(newflower.CFrame)
--                                                 end
--                                             end
                                        
--                                         end
--                                     end
--                                 end
--                              end
--                             elseif Settings['Auto Walk To Balloon'] and GetNearestBalloon(TempField) then
--                                 local nrs = GetNearestBalloon(TempField)
--                                 Walkk(nrs.BalloonRoot.CFrame)
--                          else
--                              local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
--                              local part = getIntersection(game.Workspace.Flowers,ray)
                             
--                              if part then 
--                                  local curr,x,y = GetXY(part)
--                                  if curr and x and y then 
--                                      local xnew = math.random(x-5,x+5)
--                                      local ynew = math.random(y-5,y+5)
--                                      local newflower = GetFlower(curr,xnew,ynew)
--                                      if newflower then 
--                                          if getgenv().IsValidTokenPos(newflower.Position+Vector3.new(0,2,0),TempField) then
--                                              Walkk(newflower.CFrame)
--                                          end
--                                      end
                                 
--                                  end
--                              end
--                          end
--                      end
--                      wait()
--                 end
--                 -- local token 
--                 -- local piro
--                 -- local DangNhatToken
--                 -- local sucvatruabithieunang = false
--                 -- local TempField= FarmFieldList[LevelFarm[#LevelFarm]]
--                 -- local FieldPosIn = FieldFarmPos[TempField]
--                 -- if not token then 
--                 --     token,piro = GetNerestToken(TempField,nil,ListAllToken,FieldPosIn,Whitelist)
--                 -- end
--                 -- if token and token.Parent == game:GetService("Workspace").Camera.DupedTokens then 
--                 --     sucvatruabithieunang = true
--                 -- end
--                 -- if Settings['Prioritize Token Collection only'] then 
--                 --     if piro then 
--                 --         getgenv().DisableSetSpeed = false
--                 --     else
--                 --         getgenv().DisableSetSpeed = true
--                 --     end
--                 -- end
--                 -- if token then
--                 --     if getgenv().IsValidTokenPos(token, TempField,FieldPosIn) and getgenv().IsToken(token) and not getgenv().IsTokenBlacklist(token) then
--                 --         DangNhatToken = true 
--                 --         Walkk(CFrame.new(token.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, token.Position.Z),token)
--                 --         local Black = Instance.new("Part")
--                 --         Black.Parent = token
--                 --         Black.Name = "Blacklisted"
--                 --         Black.Anchored=true
--                 --         Black.CanCollide=false
--                 --         Black.Transparency=1
--                 --         Black.CFrame=CFrame.new(1000000,100000,100000)
--                 --         game.Debris:AddItem(Black,2)
--                 --         if Settings['Prioritize Token Collection only'] then 
--                 --             getgenv().DisableSetSpeed = true
--                 --         else
--                 --             getgenv().DisableSetSpeed = false
--                 --         end
--                 --         if sucvatruabithieunang then 
--                 --             wait(1)
--                 --         end
--                 --         DangNhatToken = false
--                 --     end
--                 -- else
--                 --     if plr.Character:FindFirstChild("HumanoidRootPart") then 
--                 --         if Settings['Auto Walk To Mark'] and GetMark(TempField) then
--                 --             local mark = GetMark(TempField)
--                 --             if mark
--                 --             and Settings['Auto Farm'] then
--                 --             if (plr.Character:FindFirstChild("HumanoidRootPart").Position - mark.Position).magnitude > mark.Size.X / 1.5 then  
--                 --                 Walkk(CFrame.new(mark.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, mark.Position.Z))
--                 --             else
--                 --                 local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
--                 --                 local part = getIntersection(game.Workspace.Flowers,ray)
--                 --                 if part then 
--                 --                     local curr,x,y = GetXY(part)
--                 --                     if curr and x and y then 
--                 --                         local n = (FieldPosIn and FieldPosIn.WalkRd) or 3
--                 --                         local xnew = math.random(x-n,x+n)
--                 --                         local ynew = math.random(y-n,y+n)
--                 --                         local newflower = GetFlower(curr,xnew,ynew)
--                 --                         if newflower then 
--                 --                             if getgenv().IsValidTokenPos(newflower,TempField,FieldPosIn) then
--                 --                                 Walkk(newflower.CFrame)
--                 --                             end
--                 --                         end
                                    
--                 --                     end
--                 --                 end
--                 --             end
--                 --             end
--                 --         elseif Settings['Auto Walk To Balloon'] and GetNearestBalloon(TempField) then 
--                 --             local nrs = GetNearestBalloon(TempField)
--                 --             Walkk(nrs.BalloonRoot.CFrame)
--                 --         else
--                 --             local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
--                 --             local part = getIntersection(game.Workspace.Flowers,ray)
--                 --             if part then 
--                 --                 local curr,x,y = GetXY(part)
--                 --                 if curr and x and y then 
--                 --                     local xnew = math.random(x-5,x+5)
--                 --                     local ynew = math.random(y-5,y+5)
--                 --                     local newflower = GetFlower(curr,xnew,ynew)
--                 --                     if newflower then 
--                 --                         if getgenv().IsValidTokenPos(newflower.Position+Vector3.new(0,2,0),TempField) then
--                 --                             Walkk(newflower.CFrame)
--                 --                             newflower = nil
--                 --                         end
--                 --                     end
--                 --                 end
--                 --             end
--                 --         end
--                 --     end
--                 -- end

--                 fulled=false
--                 if IsBackPackFull(Settings['Convert Backpack']) and ValidFarm() and not NoSell and not Settings['Disable Convert Honey'] then
--                     StartC=tick()      
--                     if StartC-EndC>tonumber(Settings['Stay Field']) then 
--                         Selling=true
--                         getfenv().Selling=Selling

--                         if Settings['Auto Use Instant Converter'] and IsAnyInstantValid() and GetCurrenItem("Ticket") > 0 then
--                             local Lis = GetInstantList()
--                             for _, v in pairs(Lis) do
--                                 if IsInstantValid(v.Name) then
--                                     if ValidFarm() then 
--                                         tpT(CFrame.new(v.Platform.Position)+Vector3.new(0,3,0))
--                                         wait(1)
--                                         UseInstant(v.Name)
--                                         wait(1)
--                                         if IsBackPackFull(Settings['Convert Backpack']) then
--                                             NormalSell()
--                                         end
--                                         break
--                                     end
--                                 end
--                             end
--                         elseif Settings['Auto Use Micro Converter'] and  GetCurrenMicro() and GetCurrenMicro() > 0 then
--                             game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
--                                 {["Name"] = "Micro-Converter"}
--                             )
--                             wait(.5)
--                         elseif Settings['Auto Use Ant Pass'] and GetCurrenItem("AntPass") > 0 and not game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value then
--                             UseAnt()
--                             wait(.4)
--                             if IsBackPackFull(Settings['Convert Backpack']) then
--                                 NormalSell()
--                             end
--                         else
--                             NormalSell()
--                         end
--                         Selling=false
--                         getfenv().Selling=Selling
--                     end
--                 else
--                     EndC=tick()
--                 end

--                 -- local sucvatruabithieunang = false
--                 -- local token 
--                 -- local piro
--                 -- if not token then 
--                 --     token,piro = GetNerestToken(TempField,nil,ListAllToken,FieldPosIn,Whitelist)
--                 -- end
--                 -- if token and token.Parent == game:GetService("Workspace").Camera.DupedTokens then 
--                 --     sucvatruabithieunang = true
--                 -- end
--                 -- if IsBackPackFull(Settings['Convert Backpack']) and not NoSell and not Settings['Disable Convert Honey'] then
--                 --     StartC=tick()      
--                 --     if StartC-EndC>tonumber(Settings['Stay Field']) then 
--                 --         Selling=true
--                 --         getfenv().Selling=Selling
    
--                 --         if Settings['Auto Use Instant Converter'] and IsAnyInstantValid() and GetCurrenItem("Ticket") > 0 then
--                 --             local Lis = GetInstantList()
--                 --             for _, v in pairs(Lis) do
--                 --                 if IsInstantValid(v.Name) then
--                 --                     if ValidFarm() then 
--                 --                         tpT(CFrame.new(v.Platform.Position)+Vector3.new(0,3,0))
--                 --                         wait(1)
--                 --                         UseInstant(v.Name)
--                 --                         wait(1)
--                 --                         if IsBackPackFull(Settings['Convert Backpack']) then
--                 --                             NormalSell()
--                 --                         end
--                 --                         break
--                 --                     end
--                 --                 end
--                 --             end
--                 --         elseif Settings['Auto Use Micro Converter'] and  GetCurrenMicro() and GetCurrenMicro() > 0 then
--                 --             game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
--                 --                 {["Name"] = "Micro-Converter"}
--                 --             )
--                 --             wait(.5)
--                 --         elseif Settings['Auto Use Ant Pass'] and GetCurrenItem("AntPass") > 0 and not game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value then
--                 --             UseAnt()
--                 --             wait(.4)
--                 --             if IsBackPackFull(Settings['Convert Backpack']) then
--                 --                 NormalSell()
--                 --             end
--                 --         else
--                 --             NormalSell()
--                 --         end
--                 --         Selling=false
--                 --         getfenv().Selling=Selling
--                 --     end
--                 --     wait(3)
--                 -- else
--                 --     EndC=tick()
--                 -- end
--             else
--                 wait()
--             end
--             --task.wait()
--         --end
--     --end
-- end)
--RunService.Heartbeat:Connect(AutoFarm)

-- spawn(function()
--     while task.wait() do
--         AutoFarm()
--     end
-- end)

function ConCacBaMay()
    while true do
        local TempField= FarmFieldList[LevelFarm[#LevelFarm]]
        local FieldPosIn = FieldFarmPos[TempField]
        local sucvatruabithieunang = false
        local token 
        local piro
        if not token then 
            token,piro = GetNerestToken(TempField,nil,ListAllToken,FieldPosIn,Whitelist)
        end
        if token and token.Parent == game:GetService("Workspace").Camera.DupedTokens then 
            sucvatruabithieunang = true
        end
        if Settings['Prioritize Token Collection only'] then 
            if piro then 
                getgenv().DisableSetSpeed = false
            else
                getgenv().DisableSetSpeed = true
            end
        end
        --print(token,FieldPosIn)
        for i = 1,5 do 
            if token then
                print('?')
                if getgenv().IsValidTokenPos(token, TempField,FieldPosIn) and getgenv().IsToken(token) and not getgenv().IsTokenBlacklist(token) and Settings['Auto Farm'] and ValidFarm() then
                    print('token')
                    Walkk(CFrame.new(token.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, token.Position.Z),token)
                    local Black = Instance.new("Part")
                    Black.Parent = token
                    Black.Name = "Blacklisted"
                    Black.Anchored=true
                    Black.CanCollide=false
                    Black.Transparency=1
                    Black.CFrame=CFrame.new(1000000,100000,100000)
                    game.Debris:AddItem(Black,2)
                    if Settings['Prioritize Token Collection only'] then 
                        getgenv().DisableSetSpeed = true
                    else
                        getgenv().DisableSetSpeed = false
                    end
                    if sucvatruabithieunang then 
                        wait(1)
                    end
                else
                    task.wait()
                    f = nil
                end
            else
            --     print('??')
                if plr.Character:FindFirstChild("HumanoidRootPart") then 
                    --print('cc')
                    local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
                    local part = getIntersection(game.Workspace.Flowers,ray)
                    
                    if part then 
                        local curr,x,y = GetXY(part)
                        if curr and x and y then 
                            local xnew = math.random(x-5,x+5)
                            local ynew = math.random(y-5,y+5)
                            local newflower = GetFlower(curr,xnew,ynew)
                            if newflower then 
                                if getgenv().IsValidTokenPos(newflower.Position+Vector3.new(0,2,0),TempField) then
                                    print('walk')
                                    Walkk(newflower.CFrame)
                                end
                            end
                        
                        end
                    end
                    task.wait()
                end
            end 
        end
    end
end

spawn(function()ConCacBaMay()end)

-- spawn(function()
--     while true do wait()
--         if Settings['Auto Farm'] and ValidFarm() then
--             if not tuoiTimeBlock and (not tuoiResetTime or tick()-tuoiResetTime > 20) then 
--                 if Settings['Reset After Bee Energy Is Lower Than X'] then 
--                     tuoiTimeBlock = true
--                     tuoidz(function(tuoidz) 
--                         if tuoidz*100 <= (Settings['Bee Energy'] or 50) then 
--                             pcall(function() 
--                                 game.Players.LocalPlayer.Character.Humanoid.Health = 0
--                                 local act2
--                                 repeat wait() 
--                                     pcall(function() 
--                                         if game.Players.LocalPlayer.Character.Humanoid.Health > 0 and not game.Players.LocalPlayer.Character:FindFirstChild("ForceField") then 
--                                             act2 = true
--                                         end
--                                     end)
--                                 until act2
                                  
--                                 wait(.2)
--                                 repeat wait() 
--                                     pcall(function() 
--                                         if not game.Players.LocalPlayer.Character:FindFirstChild("ForceField") then 
--                                             act2 = true
--                                         end
--                                     end)
--                                 until act2
--                                 game.Players.LocalPlayer.Character.Humanoid.Health = 0
--                             end)
--                         end
--                         tuoiTimeBlock = false
--                     end)
--                 end
--                 tuoiResetTime = tick()
--             end
--             if not plr.Character or not plr.Character:FindFirstChild("Humanoid") or not plr.Character:FindFirstChild("HumanoidRootPart") or plr.Character:FindFirstChild("Humanoid").Health==0 then 
--                 wait(8)
--             end
--             local TempField= FarmFieldList[LevelFarm[#LevelFarm]]
--             getgenv().TempField = TempField
--             local Character = plr.Character
--             local HumanoidRootPart = GetHumanoidRootPart()
--             local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
--             local part = getIntersection(game.Workspace.Flowers,ray)
--             if not getgenv().SprinklerLastPlaced then getgenv().SprinklerLastPlaced = 0 end
--             getgenv().GotoField = true
--             if tick()-getgenv().SprinklerLastPlaced > 5*60 or not IsValidCharactPos(TempField) then
--                 TpToField(TempField)
--                 wait(1)
--                 getgenv().SprinklerLastPlaced = tick()
--                 if not getgenv().SprinklerLastPlaced then getgenv().SprinklerLastPlaced = tick() end
--                 if not NoSprink and Sprinklers[GetEquipSrinkler()] and Sprinklers[GetEquipSrinkler()] > 1 then
--                     local old = plr.Character.HumanoidRootPart.CFrame
--                     if CountSprink(GetEquipSrinkler(),GetFieldByName(TempField).Position) < Sprinklers[GetEquipSrinkler()] then 
--                         wait(1)
--                         getgenv().SprinklerLastPlaced = tick()
--                         local datcmm = 0
--                         for i=1,Sprinklers[GetEquipSrinkler()] do 
--                             if plr.Character:FindFirstChild("Humanoid")
--                             and plr.Character:FindFirstChild("HumanoidRootPart") then
--                                 tpT(old*CFrame.new(0,10,0), 100)
--                                 getgenv().noclip = true
--                                 wait(.8)
--                                 game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
--                                     {["Name"] = "Sprinkler Builder"}
--                                 )
--                                 getgenv().DatSprinkler = true
--                                 wait(1.5)
--                             end
--                         end
--                         getgenv().noclip = false
--                         if ValidFarm() then 
--                             tpT(old, 100)
--                         end
--                     end  
--                 else
--                     if (GetEquipSrinkler() and Sprinklers[GetEquipSrinkler()] and CountSprink(GetEquipSrinkler(),GetFieldByName(TempField).Position) < Sprinklers[GetEquipSrinkler()]) then 
                    
--                     end
--                     getgenv().SprinklerLastPlaced = tick()
--                     game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
--                         {["Name"] = "Sprinkler Builder"}
--                     )
--                     getgenv().DatSprinkler = true
--                     wait(1)
--                 end
--             end
--             getgenv().GotoField = false
--             if TempField == FarmFieldList["CurrentField"] then 
--                 if table.find(Settings['Selected Auto Use Items'], 'Glitter') then 
--                     if CheckItemCooldown("Glitter",15*60) then 
--                         game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
--                                 {["Name"] = "Glitter"}
--                             )
--                     end
--                 end
--             end
--             if IsBackPackFull(Settings['Convert Backpack']) and not NoSell and not Settings['Disable Convert Honey'] then
--                 StartC=tick()      
--                 if StartC-EndC>tonumber(Settings['Stay Field']) then 
--                     Selling=true
--                     getfenv().Selling=Selling

--                     if Settings['Auto Use Instant Converter'] and IsAnyInstantValid() and GetCurrenItem("Ticket") > 0 then
--                         local Lis = GetInstantList()
--                         for _, v in pairs(Lis) do
--                             if IsInstantValid(v.Name) then
--                                 if ValidFarm() then 
--                                     tpT(CFrame.new(v.Platform.Position)+Vector3.new(0,3,0))
--                                     wait(1)
--                                     UseInstant(v.Name)
--                                     wait(1)
--                                     if IsBackPackFull(Settings['Convert Backpack']) then
--                                         NormalSell()
--                                     end
--                                     break
--                                 end
--                             end
--                         end
--                     elseif Settings['Auto Use Micro Converter'] and  GetCurrenMicro() and GetCurrenMicro() > 0 then
--                         game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
--                             {["Name"] = "Micro-Converter"}
--                         )
--                         wait(.5)
--                     elseif Settings['Auto Use Ant Pass'] and GetCurrenItem("AntPass") > 0 and not game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value then
--                         UseAnt()
--                         wait(.4)
--                         if IsBackPackFull(Settings['Convert Backpack']) then
--                             NormalSell()
--                         end
--                     else
--                         NormalSell()
--                     end
--                     getfenv().Selling=Selling
--                 end
--                 wait(3)
--                 Selling=false
--             else
--                 EndC=tick()
--             end
--         end
--     end
-- end)

AutoFarmToggle = FarmTab:AddToggle({
    Name = "Auto Farm",
    Default = Settings['Auto Farm'],
    Info = "Will tween to field selected before and auto farm.",
    Callback = function(bool)
        Settings['Auto Farm'] = bool
        spawn(function()
            --AutoFarm(Settings['Auto Farm'])
        end)
    end
})
local plr = game.Players.LocalPlayer

AvoidMobToggle = FarmTab:AddToggle({
    Name = "Avoid Mob",
    Default = Settings['Avoid Mob'],
    Info = "Will jump when near mob.",
    Callback = function(bool)
        Settings['Avoid Mob'] = bool
        if Settings['Avoid Mob'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

loadstring([[
    function IsSprout()
        local Particles = game.Workspace.Particles
        local Folder2 = Particles.Folder2
        for k, v in pairs(Folder2:GetChildren()) do
            if v.Name == "Sprout" then
                return v
            end
        end
        return nil
    end
]])()

function AutoSprout(Status)
    getgenv().AutoSprout = Status
    while getgenv().AutoSprout do wait() 
        local Sprout = IsSprout()
        if Sprout ~= nil then
            local Fieldname = GetNerestFieldByObject(Sprout)
            if  CheckFieldReq(Fieldname) then 
                FarmFieldList["Sprout"] = Fieldname
                while (wait(1) and getgenv().AutoSprout) do
                    local t = IsSprout()
                    FarmFieldList["Sprout"] = Fieldname
                    if t ~= Sprout then 
                        break;
                    end
                end
                wait(20)
            end
        else
            FarmFieldList["Sprout"] = nil
        end
    end
    FarmFieldList["Sprout"] = nil
end

AutoSproutToggle = FarmTab:AddToggle({
    Name = "Auto Sprout",
    Default = Settings['Auto Sprout'],
    Info = "Will tween to any field with sprouts.",
    Callback = function(bool)
        Settings['Auto Sprout'] = bool
        if Settings['Auto Sprout'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
        spawn(function()
            AutoSprout(Settings['Auto Sprout'])
        end)
    end
})
AutoGuidingFieldToggle = FarmTab:AddToggle({
    Name = "Auto Guiding Field",
    Default = Settings['Auto Guiding Field'],
    Info = "Will cultivate on a field with a guiding star.",
    Callback = function(bool)
        Settings['Auto Guiding Field'] = bool
        if Settings['Auto Guiding Field'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

AutoTideFaceToggle = FarmTab:AddToggle({
    Name = "Auto Tide Face",
    Default = Settings['Auto Tide Face'],
    Info = "Will adjust Tide Popper's face direction for the best results.",
    Callback = function(bool)
        Settings['Auto Tide Face'] = bool
        if Settings['Auto Tide Face'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

AutoFireFaceToggle = FarmTab:AddToggle({
    Name = "Auto Fire Face",
    Default = Settings['Auto Fire Face'],
    Info = "Will face the nearest fire.",
    Callback = function(bool)
        Settings['Auto Fire Face'] = bool
        if Settings['Auto Fire Face'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

AutoFieldBoostToggle = FarmTab:AddToggle({
    Name = "Auto Field Boost",
    Default = Settings['Auto Field Boost'],
    Info = "Will cultivate on the field that you have boosted.",
    Callback = function(bool)
        Settings['Auto Field Boost'] = bool
        if Settings['Auto Field Boost'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

GatherFlameToggle = FarmTab:AddToggle({
    Name = "Auto Bubble Bloat Collector",
    Default = Settings['Auto Bubble Bloat Collector'],
    Info = 'Will focus on collecting bubbles when the Bubble Bloat Passive is activated.',
    Callback = function(bool)
        Settings['Auto Bubble Bloat Collector'] = bool
        if Settings['Auto Bubble Bloat Collector'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

FarmTab:AddToggle({
    Name = "Auto Triangulate",
    Default = Settings['Auto Triangulate'],
    Callback = function(bool)
        Settings['Auto Triangulate'] = bool
        if Settings['Auto Triangulate'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

AutoCollectBubbleToggle = FarmTab:AddToggle({
    Name = "Auto Collect Bubble",
    Default = Settings['Auto Collect Bubble'],
    Callback = function(bool)
        Settings['Auto Collect Bubble'] = bool
        if Settings['Auto Collect Bubble'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

AutoWalktoMarkToggle = FarmTab:AddToggle({
    Name = "Auto Walk To Mark",
    Default = Settings['Auto Walk To Mark'],
    Callback = function(bool)
        Settings['Auto Walk To Mark'] = bool
        if Settings['Auto Walk To Mark'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

AutoWalktoBallonToggle = FarmTab:AddToggle({
    Name = "Auto Walk To Balloon",
    Default = Settings['Auto Walk To Balloon'],
    Callback = function(bool)
        Settings['Auto Walk To Balloon'] = bool
        if Settings['Auto Walk To Balloon'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

CollectDupedTokenToggle = FarmTab:AddToggle({
    Name = "Auto Collect Duped Token",
    Default = Settings['Auto Collect Duped Token'],
    Callback = function(bool)
        Settings['Auto Collect Duped Token'] = bool
        if Settings['Auto Collect Duped Token'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

GatherFlameToggle = FarmTab:AddToggle({
    Name = "Auto Gather Flame",
    Default = Settings['Gather Flame'],
    Callback = function(bool)
        Settings['Gather Flame'] = bool
        if Settings['Gather Flame'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

AutoCollectCooToggle = FarmTab:AddToggle({
    Name = "Auto Catch Crosshair",
    Default = Settings['Auto Catch Crosshair'],
    Callback = function(bool)
        Settings['Auto Catch Crosshair'] = bool
        if Settings['Auto Catch Crosshair'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

AutoCollectCooToggle = FarmTab:AddToggle({
    Name = "Auto Collect Coconut",
    Default = Settings['Auto Collect Coconut'],
    Callback = function(bool)
        Settings['Auto Collect Coconut'] = bool
        if Settings['Auto Collect Coconut'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

AutoCollectLightToggle = FarmTab:AddToggle({
    Name = "Auto Collect Light",
    Default = Settings['Auto Collect Light'],
    Callback = function(bool)
        Settings['Auto Collect Light'] = bool
        if Settings['Auto Collect Light'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

local AutoQuestSection = FarmTab:AddSection({
    Name = 'Quests Section'
})
local SupportedList = {
    "Black Bear",
    "Polar Bear",
    "Brown Bear",
    "Panda Bear",
    "Science Bear",
    "Bucko Bee",
    "Riley Bee",
    "Spirit Bear",
    "Onett"
}
local QuestListDropdown = FarmTab:AddDropdown({
    Name = "Select Quest",
    Default = getgenv().Settings["Selected Quests"],
    Multiple = true,
    Options = SupportedList,
    Callback = function(a)
        Settings["Selected Quests"] = a
    end
})
local NPCLV = {
    [0] = {
        "Black Bear",
        "Mother Bear",
        "Brown Bear",
        "Riley Bee",
        "Bucko Bee",
        "Bee Bear 4"
    },
    [5] = {
        "Panda Bear"
    },
    [10] = {
        "Science Bear"
    },
    [15] = {
        "Polar Bear",
        "Honey Bee"
    },
    [30] = {
        "Onett"
    },
    [35] = {
        "Spirit Bear"
    }
}
local FieldLV = {
    [0] = {
        "Mushroom Field",
        "Blue Flower Field",
        "Sunflower Field",
        "Dandelion Field",
        "Clover Field",
        "Puffshroom Field"
    },
    [5]={
        "Strawberry Field",
        "Bamboo Field",
        "Spider Field"
    },
    [10] = {
        "Pineapple Patch",
        "Stump Field"
    },
    [15] = {
        "Rose Field",
        "Pine Tree Forest",
        "Pumpkin Patch",
        "Cactus Field"
    },
    [25] = {
        "Mountain Top Field"
    },
    [35] = {
        "Coconut Field",
        "Pepper Patch"
    }
}
function RedBlueWhite(bee)
    local FieldColor = {
        ["Red"] = "Strawberry Field",
        ["Blue"] = "Pine Tree Forest",
        ["White"] = "Pineapple Patch"
    }
    if bee < 5 then
        FieldColor["Red"] = "Mushroom Field"
        FieldColor["Blue"] = "Blue Flower Field"
        FieldColor["White"] = "Sunflower Field"
    else
        if bee >= 5 and bee < 15 then
            FieldColor["Red"] = "Strawberry Field"
            FieldColor["Blue"] = "Bamboo Field"
            FieldColor["White"] = "Spider Field"
        else
            if bee >= 15 then
                FieldColor["Red"] = "Rose Field"
                FieldColor["Blue"] = "Pine Tree Forest"
                FieldColor["White"] = "Pumpkin Patch"
                if bee >= 35 then
                    if not CheckCoco() then
                        FieldColor["White"] = "Coconut Field"
                    end
                    FieldColor["Red"] = "Pepper Patch"
                end
            end
        end
    end
    return FieldColor
end
local col = {"Red", "Blue", "White"}
local FieldColor = {
    ["Red"] = "Strawberry Field",
    ["Blue"] = "Pine Tree Forest",
    ["White"] = "Pineapple Patch"
}
function GetCurrentAmountOfBee()
    local bee = 0
    for _, v in pairs(game.Workspace.Honeycombs:GetChildren()) do
        if tostring(v.Owner.Value) == plr.Name then
            for l, s in pairs(v.Cells:GetChildren()) do
                if s.CellType.Value ~= "Empty" and tostring(s.CellType.Value) ~= "nil" then
                    bee = bee + 1
                end
            end
        end
    end
    return bee
end
function CheckQuestReq(Field) 
    local curr = GetCurrentAmountOfBee()
    for k,v in pairs(NPCLV) do 
        if table.find(v,Field) then 
            return curr>=k
        end
    end
   return false
end
function CheckFieldReq(Field) 
    local curr = GetCurrentAmountOfBee()
    for k,v in pairs(FieldLV) do 
        if table.find(v,Field) then 
            return curr>=k
        end
    end
   return false
end
function IsInArr(it, arr)
    for k, v in pairs(arr) do
        if v == it then
            return true
        end
    end
    return false
end
function GetQuestListMD()
    local v1 = require(game.ReplicatedStorage.Quests)

    local v5 = require(game.ReplicatedStorage.NPCs)
    local ListQuest = {}
    warpF2(function() 
        local v91 = TvkStatCache
        for v96, v97 in pairs(v91.Quests.Active) do
            local l__Name__98 = v97.Name
            local v99 = v1:Get(l__Name__98)
            
            if
                v99 ~= nil and v99.NPC and v99.Theme ~= "Xmas" and not v99.Hidden and
                    (not v99.Expiration or require(game.ReplicatedStorage.OsTime)() < v99.Expiration)
             then
                local v101 = v1:Progress(l__Name__98, v91)
                local v102 = true
                local ListTask = {}
                for v103, v104 in ipairs(v99.Tasks) do
                    local v58 = v104.Description
                    if type(v58) ~= "string" then
                        v58 = v58(TvkStatCache)
                    end 
                    local Task = {
                        Description = v58,
                        IsCompleted = function()
                            return warpF2(function() 
                                local v102 = true
                                local v91 = TvkStatCache
                                local v101 = v1:Progress(l__Name__98, v91)
                                if v101 and v101[v103] and v101[v103][1] < 1 then
                                    return false
                                end
                                return true
                            end)
                        end,
                        Type = v104.Type,
                        Zone = v104.Zone,
                        Item = v104.Item,
                        MonsterType = v104.MonsterType,
                        Tag = v104.Tag,
                        Color = v104.Color,
                        Toy = v104.Toy,
                        Name = v99.Name
                    }
                    table.insert(ListTask, Task)
                end
                ListQuest[v99.NPC] = ListTask
            end
        end
    end)
    return ListQuest
end
function GetQuestColor(typequest, tablequest, typeofquest)
    if not typeofquest then typeofquest = 'Collect Pollen' end
    local v1 = require(game.ReplicatedStorage.Quests)

    local v5 = require(game.ReplicatedStorage.NPCs)
    local ListQuest = {}
    local v91 = require(game.ReplicatedStorage.ClientStatCache):Get()
    for i,v in pairs(tablequest) do 
	    for v96, v97 in pairs(v91.Quests.Active) do
	        local l__Name__98 = v97.Name
	        local v99 = v1:Get(l__Name__98)
	        if
	            v99.NPC == v and v99.Theme ~= "Xmas" and not v99.Hidden and
	                (not v99.Expiration or require(game.ReplicatedStorage.OsTime)() < v99.Expiration)
	        then
	            local v101 = v1:Progress(l__Name__98, v91)
	            local v102 = true
	            local ListTask = {}
	            for v103, v104 in ipairs(v99.Tasks) do
	                if v101 and v101[v103] and v101[v103][1] < 1 and v104[typequest] ~= nil and v104.Type ~= nil and v104.Type == typeofquest then
	                    return v104[typequest]
	                end 
	            end
	        end
        end
    end
end

function ToTrueFalse(tabl, f)
    local out = {}
    for k, v in pairs(tabl) do
        if f then
            out[k] = f
        else
            out[k] = false
        end
    end

    return out
end

local TimerMob = {
    ["Rhino Beetle"] = {"Rhino Bush", "Rhino Cave 1", "Rhino Cave 2", "Rhino Cave 3", "PineappleBeetle"},
    ["Spider"] = {"Spider Cave"},
    ["Werewolf"] = {"WerewolfCave"},
    ["Scorpion"] = {"RoseBush", "RoseBush2"},
    ["Mantis"] = {"ForestMantis1", "ForestMantis2", "PineappleMantis1"},
    ["Ladybug"] = {"MushroomBush", "Ladybug Bush", "Ladybug Bush 2", "Ladybug Bush 3"}
}

function GetQuestNPC(npc)
    local ListQuest = GetQuestListMD()
    for k, v in pairs(ListQuest) do
        if k == npc then
            return v
        end
    end
end
function GetQuestName(npc) 
    local ListQuest = GetQuestNPC(npc)
    if ListQuest then 
        for k,v in pairs(ListQuest) do 
            if v.Name then 
                return v.Name
            end
        end
    end
end
function GetQuestType(quest)
    local type = ""
    if quest.Type == "Collect Pollen" then
        if quest.Zone then
            type = "Zone"
        elseif quest.Color then
            type = "Color"
        else
            tpye = "Pollen"
        end
    elseif quest.Type == "Defeat Monsters" then
        type = "Kill"
    elseif quest.Type == "Use Items" then
        type = "Use"
    elseif quest.Type == "Use Toy" then
        type = "Toy"
    elseif quest.Type == "Collect Tokens" then
        type = "Token"
    elseif quest.Type == "Collect Goo" then
        if quest.Zone then
            type = "Zone"
        elseif quest.Tag then
            type = "Color"
        else
            type = "Goo"
        end
    end
    return type
end

function GetQuestTable(quest)
    local questtb = {}
    for k, v in pairs(quest) do
        local type = GetQuestType(v)
        if not questtb[type] then
            questtb[type] = {}
        end
        table.insert(questtb[type], v)
    end
    return questtb
end
function GetAntQuest(QuestTF)
    for k, v in pairs(QuestTF) do
        if v then
            local QuestNPC = GetQuestNPC(v)
            if QuestNPC then
                local QuestTb = GetQuestTable(QuestNPC)
                if QuestTb["Kill"] then
                    for k, v in pairs(QuestTb["Kill"]) do
                        if not v.IsCompleted() then
                            if v.MonsterType then
                                if string.match(v.MonsterType, "Ant") then
                                    return v
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
local Blacklist = {"Gummy Bear", "Ant Challenge Info", "Bubble Bee Man 2", "Stick Bug"}
game:GetService("RunService").Stepped:connect(function()
    if plr.PlayerGui.ScreenGui.NPC.Visible == true and Settings['Auto Farm Quest']
    then 
        plr.PlayerGui.Camera.Controllers.NPC.IncrementDialogue:Invoke()
    end
end)

function AutoGetQuest(Status)
    getgenv().AutoFarmQuest = Status
    while getgenv().AutoFarmQuest do wait() 
        if CheckFarm("tuoidz") and Settings['Auto Farm Quest'] and not Selling then
            for _, v in ipairs(game.Workspace.NPCs:GetChildren()) do
                if v:FindFirstChild("Platform") and v.Platform.AlertPos.AlertGui.ImageLabel.ImageTransparency == 0 and not IsInArr(v.Name, Blacklist) and CheckQuestReq(v.Name)
                and (function() 
                    if (Settings['Ignore Honey Bee Quest']) then
                        if v.Name=="Honey Bee" then return false end
                    end
                    if getgenv().PolarOnly then 
                        if v.Name ~= "Polar Bear" then return false end
                    end
                    return true
                end)() then
                    StopFarmList["tuoidz"] = true

                    tpT(CFrame.new(v.Platform.Position.X, v.Platform.Position.Y + 5, v.Platform.Position.Z))
                    wait(1)
                    local cut
                    local sucvatrua
                    
                    if not sucvatrua and Settings['Auto Farm Quest'] and not Selling then        
                        local cac = require(game.ReplicatedStorage.Activatables.NPCs)
                        cac.ButtonEffect(game.Players.LocalPlayer,game:GetService("Workspace").NPCs[v.Name])
                        repeat wait(.1) until plr.PlayerGui.ScreenGui.NPC.Visible == false or not Settings['Auto Farm Quest']
                    end
                    wait(1)
                end
            end
            StopFarmList["tuoidz"] = false
        end
    end
    StopFarmList["tuoidz"] = false
end

AutoFarmQuestToggle = FarmTab:AddToggle({
    Name = "Auto Farm Quest",
    Default = Settings['Auto Farm Quest'],
    Callback = function(bool)
        Settings['Auto Farm Quest'] = bool
        spawn(function()
            AutoGetQuest(Settings['Auto Farm Quest'])
        end)
    end
})

SpawnTable["QuestColor"] = function() 
    --[[while wait(.2) do 
        local v = Settings["Selected Quests"]
        --for k,v in next, Settings["Selected Quests"] do 
            if v and Settings['Auto Farm Quest'] then 
                if GetQuestColor('Color', v) then 
                    FarmFieldList["QuestPollen"] = RedBlueWhite(GetCurrentAmountOfBee())[GetQuestColor('Color', v)]
                    if GetQuestColor('Type', v, 'Collect Goo')=="Collect Goo" then 
                        if Settings['Auto Gumdrops When Have Goo Quest'] then 
                            game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = "Gumdrops"})
                        end
                    end
                else
                    FarmFieldList["QuestPollen"] = nil
                end
            end
            if GetQuestColor('Type', v, 'Use Toy') == 'Use Toy' then 
                game.ReplicatedStorage.Events.ToyEvent:FireServer(GetQuestColor('Toy', v, 'Use Toy'))
                wait(2)
            end
            if not Settings['Auto Farm Quest'] then
                FarmFieldList["QuestPollen"] = nil
            end
        --end
    end]]
    while wait(.2) do 
        for k,v in pairs(Settings["Selected Quests"]) do 
            local rac = v
            if v and Settings['Auto Farm Quest'] then 
                local QuestNPC = GetQuestNPC(rac)
                if QuestNPC then 
                    local QuestTb = GetQuestTable(QuestNPC)
                    if QuestTb["Color"] then 
                        for k,v in pairs(QuestTb["Color"]) do
                            if not v.IsCompleted() then
                                FarmFieldList["QuestPollen"] = RedBlueWhite(GetCurrentAmountOfBee())[v.Color]
                                repeat wait(1)
                                    if v.Type=="Collect Goo" then 
                                        if Settings['Auto Gumdrops When Have Goo Quest'] then 
                                            game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = "Gumdrops"})
                                        end
                                    end
                                until v.IsCompleted() or not Settings['Auto Farm Quest'] or not table.find(Settings["Selected Quests"], rac)
                            end
                        end
                    end
                    if QuestTb["Toy"] then 
                        for k,v in pairs(QuestTb["Toy"]) do 
                            if not v.IsCompleted() then 
                                

                                game.ReplicatedStorage.Events.ToyEvent:FireServer(v.Toy)
                                wait(2)
                            end
                        end
                    end
                end
            end
        end
        FarmFieldList["QuestPollen"] = nil--["QuestPollen"]-1]] 
    end
end

SpawnTable["Quest Pollen"] = function() 
    --[[while wait(.2) do 
        local v = Settings["Selected Quests"]
        --for k,v in pairs(Settings["Selected Quests"]) do 
            local rac = v
            if v and Settings['Auto Farm Quest'] then 
                if GetQuestColor('Zone', v) then 
                    FarmFieldList["QuestField"] = GetQuestColor('Zone', v)
                    if GetQuestColor('Type', v, 'Collect Goo')=="Collect Goo" then
                        if Settings['Auto Gumdrops When Have Goo Quest'] then 
                            game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = "Gumdrops"})
                        end
                    end
                else
                    FarmFieldList["QuestField"] = nil--["QuestField"]-1]
                end
            end
            if not Settings['Auto Farm Quest'] then
                FarmFieldList["QuestField"] = nil--["QuestField"]-1
            end
        --end
    end]]
    while wait(.2) do 
        for k,v in pairs(Settings["Selected Quests"]) do 
            local rac = v
            if v and Settings['Auto Farm Quest'] then 
                local QuestNPC = GetQuestNPC(v)
                if QuestNPC then 
                    local QuestTb = GetQuestTable(QuestNPC)
                    if QuestTb["Zone"] then 
                        for k,v in pairs(QuestTb["Zone"]) do 
                            if not v.IsCompleted() then 
                                FarmFieldList["QuestField"] = v.Zone
                                repeat wait(1)
                                if v.Type=="Collect Goo" then 
                                    if Settings['Auto Gumdrops When Have Goo Quest'] then 
                                        game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = "Gumdrops"})
                                    end
                                end
                                until v.IsCompleted() or not Settings['Auto Farm Quest'] or not table.find(Settings["Selected Quests"], rac)
                            end
                        end
                    end
                    
                end
            end
        end
        FarmFieldList["QuestField"] = nil--["QuestField"]-1]] 
    end
end

function GetMobIns(Mob)
    return game.Workspace.MonsterSpawners:FindFirstChild(Mob)
end
function GetAttach(Mob)
    local Att = Mob:FindFirstChild("Attachment")
    if Att then
        return Att
    else
        return Mob:FindFirstChild("TimerAttachment")
    end
end

local MonsterTypeMD = require(game.ReplicatedStorage.MonsterTypes)

function CheckMob(Mob)
    if TimerMob[Mob]==nil then return end
    for k, v in pairs(TimerMob[Mob]) do
        local t = GetMobIns(v)
        if t then 
            local data = TvkStatCache.MonsterTimes
            local rac2 = data[v]
            if rac2 then 
                local Reduce = 0
                pcall(function() 
                    Reduce = TvkStatCache.ModifierCaches.Value.MonsterCooldownReduction._
                end)
                Reduce=1-Reduce
                local cac = os.time()-rac2
                local rac = MonsterTypeMD.Get(t.MonsterType.Value).Stats.RespawnCooldown
                if cac>rac*Reduce+(Settings['Mob Spawn Delay'] or 30) then 
                    return {
                        Part = t,
                        Status = function()
                            local data = TvkStatCache.MonsterTimes
                            local rac2 = data[v]
                            local cac = os.time()-rac2
                            local rac = MonsterTypeMD.Get(t.MonsterType.Value).Stats.RespawnCooldown
                            return cac>rac*Reduce+(Settings['Mob Spawn Delay'] or 30)
                        end
                    }
                end
            end
        end
    end
end
SpawnTable["FarmBoost"] = function() 
    while wait(1) do
        if Settings['Auto Field Boost'] then
            for k, v in pairs(GetCurrentFieldBoost()) do
                --Field = k
                FarmFieldList["FieldBoost"] = k
                repeat
                    wait(.1)
                    FarmFieldList["FieldBoost"] = k
                until IsBoostEnd(k) or not Settings['Auto Field Boost']
            end
        end
        FarmFieldList["FieldBoost"] = nil--["FieldBoost"]-1]] 
    end
end
SpawnTable["Guiding"] = function() 
    while wait(.2) do
        if Settings['Auto Guiding Field'] then
            local rac = game.Workspace.Particles:FindFirstChild("Guiding Star")
            if rac then 
                local nrf = GetNerestFieldByObject(rac)
                if CheckFieldReq(nrf) then 
                    FarmFieldList["Guiding"]=nrf
                    repeat wait(1) until not rac.Parent or not Settings['Auto Guiding Field']
                end
            end
        end
        FarmFieldList["Guiding"] = nil--["Guiding"]-1]] 
       
    end
end
function CheckSnail()
        local k = "StumpSnail"
        local t = GetMobIns(k)
        if t then 
        if GetAttach(t).TimerGui.TimerLabel.Visible == false then
            return t
        end
    end
end
SpawnTable["QuestMob"] = function() 
    while wait(.2) do 
        if Settings['Auto Kill Mob'] and Settings['Auto Farm'] and ValidFarm() then
            for i,v1 in pairs(Settings['Selected Mob']) do
                if v1 then
                    local mob = CheckMob(v1)
                    if mob then
                        NoSprink=true
                        FarmFieldList["QuestMob"] = GetNerestFieldByObject(mob.Part)
                        while wait(1) and Settings['Auto Kill Mob'] do
                            local t = tick()
                            if not mob.Status() then
                                break
                            end
                        end
                        if Settings['Auto Kill Mob'] then
                            local r = tick()
                            repeat wait() until tick()-r>=3 or not Settings['Auto Kill Mob']
                        end
                        NoSprink=false
                    end
                end
            end
            FarmFieldList["QuestMob"] = nil
        end
        --[[local v = Settings["Selected Quests"]
        if v and Settings['Auto Farm Quest'] then
            if GetQuestColor('Type', v, 'Defeat Monsters') == 'Defeat Monsters' then
                if GetQuestColor('MonsterType', v, 'Defeat Monsters') then
                    if not string.match(GetQuestColor('MonsterType', v, 'Defeat Monsters'),"Ant") then 
                        local mob = CheckMob(GetQuestColor('MonsterType', v, 'Defeat Monsters'))
                        if mob then
                            local t = tick()
                            NoSprink=true
                            FarmFieldList["QuestMob"] = GetNerestFieldByObject(mob.Part) 
                            repeat wait(1)
                            until not GetQuestColor('MonsterType', v, 'Defeat Monsters') or not Settings['Auto Farm Quest'] or mob.Status()==false or tick()-t > 60
                            if Settings['Auto Farm Quest'] and v then 
                                local e = tick()
                                repeat wait() until tick()-e >= 4 or not Settings['Auto Farm Quest']
                                wait(4)
                            end
                            NoSprink=false
                        else
                            FarmFieldList["QuestMob"] = nil
                        end
                    else
                        if GetCurrenItem("AntPass") > 0 then
                            AutoFAnt2=true
                            repeat wait() AutoFAnt2=true until v.IsCompleted() or not Settings['Auto Farm Quest'] 
                            AutoFAnt2=false
                        end
                    end
                end
            end
        end]]
        for k,v in pairs(Settings["Selected Quests"]) do 
            local rac = v
            if v and Settings['Auto Farm Quest'] then 
                local QuestNPC = GetQuestNPC(v)
                if QuestNPC then 
                    local QuestTb = GetQuestTable(QuestNPC)
                    if QuestTb["Kill"] then 
                        for k,v in pairs(QuestTb["Kill"]) do 
                            if not v.IsCompleted() then 
                                if v.MonsterType then 
                                    if not string.match(v.MonsterType,"Ant") then 
                                        local mob = CheckMob(v.MonsterType)
                                        if mob then -- or mob.Status()==false or tick()-t > 60
                                            local t = tick()
                                            NoSprink=true
                                            FarmFieldList["QuestMob"] = GetNerestFieldByObject(mob.Part) 
                                            repeat wait(1)
                                            until (v.IsCompleted() and not GetAntQuest(Settings["Selected Quests"])) or not Settings['Auto Farm Quest'] or mob.Status()==false or tick()-t > 60 or not table.find(Settings['Selected Quests'], rac) 
                                            if Settings['Auto Farm Quest'] and table.find(Settings['Selected Quests'], rac) then 
                                                local e = tick()
                                                repeat wait() until tick()-e >= 4 or not Settings['Auto Farm Quest']
                                            end
                                            FarmFieldList["QuestMob"] = nil
                                            NoSprink=false
                                        end
                                    else
                                        if GetCurrenItem("AntPass") > 0 then
                                            AutoFAnt2=true
                                            repeat wait() AutoFAnt2=true until v.IsCompleted() or not Settings['Auto Farm Quest'] or not table.find(Settings['Selected Quests'], rac) 
                                            AutoFAnt2=false
                                        end
                                    end
                                end
                            end
                        end
                    end
                    if QuestTb["Token"] then 
                        for k,v in pairs(QuestTb["Token"]) do 
                            if v.Tag then 
                                if string.match(v.Tag,"Rage") then 
                                    if Settings['Auto Kill Snail'] and CheckSnail() then 
                                        repeat wait() ccsnail=true until v.IsCompleted() or not Settings['Auto Farm Quest'] or not table.find(Settings['Selected Quests'], rac) or not Settings['Auto Kill Snail'] or not CheckSnail()
                                        ccsnail=false
                                    end
                                    if Settings['Auto Ant Challenge'] and not v.IsCompleted() then 
                                        if GetCurrenItem("AntPass") > 0 then
                                            AutoFAnt2=true
                                            repeat wait() AutoFAnt2=true until v.IsCompleted() or not Settings['Auto Farm Quest'] or not table.find(Settings['Selected Quests'], rac) or not Settings['Auto Ant Challenge']
                                            AutoFAnt2=false
                                        end
                                    end
                                end
                            end
                        end
                    end
                    if QuestTb["Use"] then 
                        for k,v in pairs(QuestTb["Use"]) do 
                            pcall(function()
                                if not v.IsCompleted() and (v.Item=="Blueberry" or v.Item=="Strawberry") then 
                                    local DoEvent = game.ReplicatedStorage.Events.ConstructHiveCellFromEgg
                                    local v91, v92, v93, v94, v95=  DoEvent:InvokeServer(1, 1, v.Item, 1)
                                    if v92 then
                                        u1:Set({ "Eggs", v.Item }, v91);
                                        u1:Set("DiscoveredBees", v94);
                                        u1:Set("Honeycomb", v93);
                                        u1:Set({ "Totals", "EggUses" }, v95);
                                    end;
                                end
                            end)

                        end
                    end                         
                end
            end
        end
        FarmFieldList["QuestMob"] = nil--["QuestMob"]-1]] 
    end
end



IgnoredhoneyToggle = FarmTab:AddToggle({
    Name = "Ignore Honey Bee Quest",
    Default = Settings['Ignore Honey Bee Quest'],
    Info = 'Will not accept honey bee quest.',
    Callback = function(bool)
        Settings['Ignore Honey Bee Quest'] = bool
    end
})

AutoGumDropToggle = FarmTab:AddToggle({
    Name = "Auto Gumdrops When Have Goo Quest",
    Default = Settings['Auto Gumdrops When Have Goo Quest'],
    Info = 'Will drop gumdrops when have goo quest.',
    Callback = function(bool)
        Settings['Auto Gumdrops When Have Goo Quest'] = bool
    end
})

AutoAntToggle = FarmTab:AddToggle({
    Name = "Auto Ant Challenge",
    Default = Settings['Auto Ant Challenge'],
    Info = 'Will auto ant challenge when have rage token quest.',
    Callback = function(bool)
        Settings['Auto Ant Challenge'] = bool
    end
})

AutoSnailToggle = FarmTab:AddToggle({
    Name = "Auto Kill Snail",
    Default = Settings['Auto Kill Snail'],
    Info = 'Will auto kill snail when have rage token quest.',
    Callback = function(bool)
        Settings['Auto Kill Snail'] = bool
    end
})


local MicsFarmSection = FarmTab:AddSection({
    Name = "Miscellaneous Farm Section"
})
function RemoveVal(tb,val) 
    for k,v in pairs(tb) do 
        if v==val then 
            table.remove(tb,k)
            break;
        end    
    end
end
function GetFieldByPos(pos) 
    local ray = Ray.new(pos+Vector3.new(0,1,0), Vector3.new(0, -1000, 0))
    local thieutvknang = workspace:FindPartOnRayWithWhitelist(ray, {game.Workspace.Flowers})
    if thieutvknang then 
        local curr,x,y = GetXY(thieutvknang)
        local CurrentField = GetFieldByFP(curr)
        return CurrentField
    end
end
function IsFieldHaveMetor(field) 
    for k,v in pairs(game.Workspace.Particles:GetChildren()) do 
        if v.Name == "Part" and v.BrickColor == BrickColor.new("Institutional white") and v.Material  == Enum.Material.Neon then
            local tuoidz = GetFieldByPos(v.Position)
            if tuoidz then 
                if tuoidz == field then 
                    return true
                end
            end
        end
    end
end
function FarmMeteors(Status)
    getgenv().FarmMeteor = Status
    local sucvat = {"1629547638"}
        
    for k,v in pairs(TokenId) do 
        table.insert(sucvat,v)
    end
    for k,v in pairs(TokenId2) do 
        table.insert(sucvat,v)
    end
    while getgenv().FarmMeteor and task.wait()  do 
        if #CollectThings.Metor > 0 and CheckFarm("Metor") then 
            for k,v in pairs(game.Workspace.Particles:GetChildren()) do 
                if v.Parent and v.Name == "Part" and v.BrickColor == BrickColor.new("Institutional white") and v.Material == Enum.Material.Neon then 
                    local tuoidz = GetFieldByPos(v.Position)
                    StopFarmList["Metor"] = false
                    if tuoidz and CheckFieldReq(tuoidz) then 
                        repeat wait() 
                            FarmFieldList["Metor"] = tuoidz
                            NoSell = true
                            if IsValidCharactPos(tuoidz) then 
                                Whitelist = sucvat
                                for k,v in pairs(CollectThings.Metor) do                                    
                                    local delay = v.Obj.Delay or 2.5     
                                    local dur = (v.Obj.Dur or 0.8) + delay
                                    if v.Obj.Pos and tick() >(dur*4/5+v.Start) and not (tick() > (dur+v.Start)) and  IsValidTokenPos(v.Obj.Pos,tuoidz) then 
                                        StopFarmList["Metor"] = true
                                        repeat wait() plr.Character.HumanoidRootPart.CFrame = CFrame.new(v.Obj.Pos)*CFrame.new(0,3,0) until (tick() > (dur+v.Start)) or not getgenv().FarmMeteor or not CheckFarm("Metor") 
                                    elseif (tick() > (dur+v.Start)) then
                                        RemoveVal(CollectThings.Metor,v)
                                    end
                                    StopFarmList["Metor"] = false
                                end 
                            end           
                        until not IsFieldHaveMetor(tuoidz) or not getgenv().FarmMeteor or not CheckFarm("Metor")
                        --print("tvk")
                        Whitelist = {}
                    end
                end
            end
        else
            NoSell=false
            StopFarmList["Metor"] = false
            FarmFieldList["Metor"] = nil
        end
    end
    FarmFieldList["Metor"] = nil
    Whitelist = {}
    NoSell = false
    StopFarmList["Metor"] = false
end

AtFarmMetorToggle = FarmTab:AddToggle({
    Name = "Auto Farm Meteor Shower",
    Default = Settings['Auto Farm Metor'],
    Callback = function(bool)
        Settings['Auto Farm Metor'] = bool
        spawn(function() 
            FarmMeteors(Settings['Auto Farm Metor'])
        end)
    end
})

AtFarmSparklesToggle = FarmTab:AddToggle({
    Name = "Auto Farm Sparkles",
    Default = Settings['Auto Farm Sparkles'],
    Callback = function(bool)
        Settings['Auto Farm Sparkles'] = bool
    end
})

AtFarmLeavesToggle = FarmTab:AddToggle({
    Name = "Auto Farm Leaves",
    Default = Settings['Auto Farm Leaves'],
    Callback = function(bool)
        Settings['Auto Farm Leaves'] = bool
    end
})

function CollectTokenThanhTuoi(Field,TokenList)
    local collected = false
    for k, v in pairs(game.workspace.Collectibles:GetChildren()) do
        local pass = false
        if v:FindFirstChild("FrontDecal") then 
            for k,v2 in pairs(TokenList) do 
                if string.match(v.FrontDecal.Texture,v2) then pass = true break end
            end
            --pass = table.find(TokenList, v.FrontDecal.Texture) 
        end
        if v.Name == "C"
        and not v:FindFirstChild("Ignored")
        and v:FindFirstChild("FrontDecal")
        and pass then
            if IsToken(v) and IsValidTokenPos(v,Field) and not v:FindFirstChild("Ignored") then 
                local cac
                if not cac then 
                    StopFarmList["Firefly"] = true
                    Walkk(v.CFrame)
                    local ractvk = Instance.new("Part")
                    ractvk.Name = "Ignored"
                    ractvk.Parent = v
                    ractvk.Anchored=true
                    ractvk.CanCollide=false
                    ractvk.Transparency=1
                    ractvk.CFrame=CFrame.new(10000,10000,10000)
                    game.Debris:AddItem(ractvk,2)
                end
            end
        end
    end
    return collected
end

function GetCurrentField() 
    if not plr.Character:FindFirstChild("HumanoidRootPart") then return end
    return GetNerestFieldByObject(plr.Character.HumanoidRootPart)
end
function GetNearestFirefly() 
    local gancmnnhat
    for k,v in pairs(game.Workspace.NPCBees:GetChildren()) do 
        if v.Name == "Firefly" then 
            if v:FindFirstChild("BodyVelocity") and v.BodyVelocity.Velocity == Vector3.new(0,0,0) then 
                local tuoidz = GetNerestFieldByObject(v)
                if tuoidz then 
                    local sanghuman = IsValidTokenPos(v,tuoidz)
                    if sanghuman then 
                        if sanghuman < 4 then 
                            if not gancmnnhat then 
                                gancmnnhat = v
                            end
                            if (plr.Character.HumanoidRootPart.Position-v.Position).magnitude < (plr.Character.HumanoidRootPart.Position-gancmnnhat.Position).magnitude then 
                                gancmnnhat = v
                            end
                        end
                    end
                end
            end
        end
    end
    return gancmnnhat
end

AtFarmFireFlyToggle = FarmTab:AddToggle({
    Name = "Auto Farm FireFly",
    Default = Settings['Auto Farm FireFly'],
    Callback = function(bool)
        Settings['Auto Farm FireFly'] = bool
        spawn(function() 
            while wait() and Settings['Auto Farm FireFly'] do 
                if CheckFarm("Firefly") and plr.Character:FindFirstChild("HumanoidRootPart") then 
                    if game.Workspace.NPCBees:FindFirstChild("Firefly") and not CollectTokenThanhTuoi(GetCurrentField(),{"2306224708"}) then 
                        local tuoidz = GetNearestFirefly()
                        if tuoidz then 
                            StopFarmList["Firefly"] = true
                            local sanghuman = GetNerestFieldByObject(tuoidz)
                            if sanghuman then 
                                if not IsValidCharactPos(sanghuman) then 
                                    TpToField(sanghuman)
                                else
                                    Walkk(tuoidz.CFrame)
                                end
                            end
                        else
                            StopFarmList["Firefly"] = false
                        end
                    end
                end
            end
            StopFarmList["Firefly"] = false
        end)
    end
})



loadstring([[
    function GetLeaves(tvk)
        local dist = math.huge
        local m = nil
        local rac = "LeafBurst"
        if tvk then rac = "Sparkles" end
        for _,v in ipairs(game.Workspace.Flowers:GetChildren()) do
            if v:FindFirstChild(rac)
            and not v:FindFirstChild("Ignored") then
                local magnitude = (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude
                if magnitude < dist then
                    dist = magnitude
                    m = v
                end
            end
        end
        return m
    end
]])()

SpawnTable["Leave"] = function() 
    while wait(1) do 
        local tuoidz = false
        if Settings['Auto Farm Leaves'] then 
            if CheckFarm("Leaf") then 
                local v = GetLeaves()
                if v then
                    StopFarmList["Leaf"] = true
                    tpT(v.CFrame, 100)
                    wait(.5)
                    Dig()
                    wait(.5)
                    ValidLeaf = true
                    StopFarmList["Leaf"] = false
                    local ractvk = Instance.new("Part")
                    ractvk.Name = "Ignored"
                    ractvk.Parent = v
                    ractvk.Anchored=true
                    ractvk.CanCollide=false
                    ractvk.Transparency=1
                    ractvk.CFrame=CFrame.new(10000,10000,10000)
                else
                    StopFarmList["Leaf"] = false
                end
            else
                StopFarmList["Leaf"] = false
            end
        else -- k ph cho nay
        end -- cai stopfarmleve ma false thi no se auto farm honey tiep
        if Settings['Auto Farm Sparkles'] then 
            if CheckFarm("Leaf") then 
                local v = GetLeaves(true)
                if v then
                    tuoidz = true
                    StopFarmList["Leaf"] = true
                    tpT(v.CFrame, 100)
                    wait(.5)
                    Dig()
                    wait(.5)
                    local ractvk = Instance.new("Part")
                    ractvk.Name = "Ignored"
                    ractvk.Parent = v
                    ractvk.Anchored=true
                    ractvk.CanCollide=false
                    ractvk.Transparency=1
                    ractvk.CFrame=CFrame.new(10000,10000,10000)
                    for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                        if
                           (v.Position-plr.Character.HumanoidRootPart.Position).magnitude <20
                         then
                            Walkk(
                                CFrame.new(
                                    v.Position.X,
                                    plr.Character:WaitForChild("HumanoidRootPart").Position.Y,
                                    v.Position.Z
                                )
                            )
                        end
                    end
                else
                    StopFarmList["Leaf"] = false
                end
            else
                StopFarmList["Leaf"] = false
            end
        else 
            StopFarmList["Leaf"] = false
        end
        if not tuoidz then 
            StopFarmList["Leaf"] = false
        end
    end
end

local MobTab = Window:MakeTab({
	Name = "Mob",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false,
    Default = false
})

local MobSection = MobTab:AddSection({
    Name = 'Mob Section'
})

MobDropdown = MobTab:AddDropdown({
    Name = "Select Mob",
    Default = Settings['Selected Mob'],
    Multiple = true,
    Options = {'Rhino Beetle','Spider','Werewolf','Scorpion','Mantis','Ladybug'},
    Callback = function(a)
        Settings['Selected Mob'] = a
    end
})

MobSpawnSlider = MobTab:AddSlider({
    Name = "Mob Spawn Delay",
    ValueName = " Second",
    Min = 1,
    Max = 100,
    Default = Settings['Mob Spawn Delay'],
    Callback = function(number)
        Settings['Mob Spawn Delay'] = number
    end
})

KillMobToggle = MobTab:AddToggle({
    Name = "Auto Kill Mob",
    Default = Settings['Auto Kill Mob'],
    Info = 'Will auto kill mob selected.',
    Callback = function(bool)
        Settings['Auto Kill Mob'] = bool
        if Settings['Auto Kill Mob'] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

local WildBeeSection = MobTab:AddSection({
    Name = 'Wild Bee Section'
})
MobTab:AddButton({
    Name = "Check Vicious Bee",
    Callback = function()
        if game.workspace.Particles:FindFirstChild("Vicious") or game.workspace.Particles:FindFirstChild("Gifted Vicious") then 
            Window:MakeNotification({
                Title = "Script Notifications",
                Description = "Found vicious bee.",
                Duration = 5
            })
        else
            Window:MakeNotification({
                Title = "Script Notifications",
                Description = "Not found vicious bee.",
                Duration = 5
            })
        end
    end
})

KillViciousToggle = MobTab:AddToggle({
    Name = "Auto Vicious Bee",
    Default = Settings["Auto Vicious Bee"],
    Info = 'Will auto kill vicious bee.',
    Callback = function(bool)
        Settings["Auto Vicious Bee"] = bool
    end
})
ViciousLevelSlider = MobTab:AddSlider({
    Name = "Min Vicious Level",
    ValueName = " Level",
    Min = 1,
    Max = 20,
    Default = Settings['Min Vicious Level'],
    Callback = function(number)
        Settings['Min Vicious Level'] = number
    end
})
MobTab:AddButton({
    Name = "Check Windy Bee",
    Callback = function()
        if game.workspace.NPCBees:FindFirstChild("Windy") then 
            Window:MakeNotification({
                Title = "Script Notifications",
                Description = "Found Windy Bee.",
                Duration = 5
            })
        else
            Window:MakeNotification({
                Title = "Script Notifications",
                Description = "Not found Windy Bee.",
                Duration = 5
            })
        end
    end
})
KillWindyBeeToggle = MobTab:AddToggle({
    Name = "Auto Windy Bee",
    Default = Settings["Auto Windy Bee"],
    Info = 'Will auto kill windy bee.',
    Callback = function(bool)
        Settings["Auto Windy Bee"] = bool
        if Settings["Auto Windy Bee"] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})
function HopServer()
    while Settings["Hop Server"] do wait(2) 
        if (Settings["Auto Vicious Bee"]
        and not (game.workspace.Particles:FindFirstChild("Vicious") or game.workspace.Particles:FindFirstChild("Gifted Vicious")))
        or (Settings["Auto Windy Bee"]
        and not game.workspace.NPCBees:FindFirstChild("Windy")) then 
            Teleport()
        end
    end
end
MobTab:AddToggle({
    Name = "Hop Server",
    Default = Settings["Hop Server"],
    Info = 'Will hop server if there are not have vicious bee or windy bee.',
    Callback = function(bool)
        Settings["Hop Server"] = bool
        spawn(function()
            HopServer()
        end)
    end
})

local BossSection = MobTab:AddSection({
    Name = 'Boss Section'
})
SelectBossDropdown = MobTab:AddDropdown({
    Name = "Select Boss",
    Default = Settings["Selected Boss"],
    Multiple = true,
    Options = {'Coconut Crab', 'Stump Snail','King Beetle','Tunnel Bear','Commando Chick','Mondo Chick','Snow Bear (Beemas)'},
    Callback = function(a)
        Settings["Selected Boss"] = a
    end
})

BossKillToggle = MobTab:AddToggle({
    Name = "Auto Kill Boss",
    Default = Settings["Auto Kill Boss"],
    Info = 'Will auto kill boss selected.',
    Callback = function(bool)
        Settings["Auto Kill Boss"] = bool
        if Settings["Auto Kill Boss"] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})

local ChagllengSection = MobTab:AddSection({
    Name = 'Challenge Section'
})

GoAntToggle = MobTab:AddToggle({
    Name = "Auto Go Ant Challenge",
    Default = Settings["Auto Challenge Ant"],
    Callback = function(bool)
        Settings["Auto Challenge Ant"] = bool
    end
})

local PlanterTab = Window:MakeTab({
	Name = "Planter",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false,
    Default = false
})
local ListPlanter = {}
for k,v in pairs(game:GetService("ReplicatedStorage").LocalPlanters["Planter Pots"]:GetChildren()) do 
    table.insert(ListPlanter,v.Name)
end

local SelectListPlanter = {}
if Settings['List Planter'] then SelectListPlanter = Settings['List Planter'] else Settings['List Planter'] = SelectListPlanter end
for i=1,6 do 
    local rac = SelectListPlanter[i]
    local info = SelectListPlanter[i] or {['Selected Planter']="",['Selected Field']={},AutoFarmPuff=false,['Ignore Planter When Smoking']=false}
    PlanterTab:AddSection({
        Name = 'Planter ' .. i .. ' Section'
    })
    PlanterTab:AddDropdown({
        Name = "Select Planter",
        Default = info['Selected Planter'],
        Options = ListPlanter,
        Callback = function(v)
            if not v then
                return
            end
            info['Selected Planter']=v
        end
    })
    local ia = 1
    local function createField(v) 
        local currindex=ia
        PlanterTab:AddDropdown({
            Name = "Select Field " .. ia,
            Default = v or 'nil',
            Options = GetListField("None"),
            Callback = function(v)
                if not v then
                    return
                end
                info['Selected Field'][currindex]=v
            end
        })
        ia=ia+1
    end
    info.CurrL = PlanterTab:AddLabel("Current Field: ")
    PlanterTab:AddButton({
        Name = "Add More Field",
        -- Info = "This is a Button.",
        Callback = function()
            createField()
        end
    })
    PlanterTab:AddSlider({
        Name = "Collect At x %",
        ValueName = " %",
        Min = 1,
        Max = 100,
        Default = info['Collect At x %'] or 100,
        Callback = function(number)
            info['Collect At x %'] = number
        end
    })
    PlanterTab:AddSlider({
        Name = "Ignore Field At X % Degradation",
        ValueName = " %",
        Min = 1,
        Max = 100,
        Default = info['Ignore Field At X % Degradation'] or 100,
        Callback = function(number)
            info['Ignore Field At X % Degradation'] = number
        end
    })
    PlanterTab:AddToggle({
        Name = "Ignore Planter When Smoking",
        Default = info['Ignore Planter When Smoking'],
        -- Info = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean pretium ultrices pellentesque. Maecenas lacus nisl, tempor eget sollicitudin quis, blandit et massa. Donec accumsan nec magna id tempor. Integer interdum mollis ligula in semper. Curabitur vulputate elementum dolor, sed tempus sapien lobortis non. Vivamus pulvinar enim eget augue suscipit euismod non vel erat. Proin et mauris et metus vulputate facilisis. Nunc convallis dolor in turpis mollis, nec sodales justo fermentum. Duis egestas blandit velit ut semper. Nunc dolor nisi, vulputate non malesuada dictum, aliquet et odio. Suspendisse potenti. Pellentesque vitae felis turpis. In imperdiet purus nec auctor malesuada. Suspendisse nisl arcu, finibus sed posuere auctor, cursus in nisl. Fusce accumsan dui sit amet placerat aliquam. Quisque non est tristique, finibus lectus sit amet, bibendum ligula.",
        Callback = function(bool)
            info['Ignore Planter When Smoking'] = bool
        end
    })
    PlanterTab:AddToggle({
        Name = "Auto Planter",
        Default = info.AutoFarmPuff,
        -- Info = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean pretium ultrices pellentesque. Maecenas lacus nisl, tempor eget sollicitudin quis, blandit et massa. Donec accumsan nec magna id tempor. Integer interdum mollis ligula in semper. Curabitur vulputate elementum dolor, sed tempus sapien lobortis non. Vivamus pulvinar enim eget augue suscipit euismod non vel erat. Proin et mauris et metus vulputate facilisis. Nunc convallis dolor in turpis mollis, nec sodales justo fermentum. Duis egestas blandit velit ut semper. Nunc dolor nisi, vulputate non malesuada dictum, aliquet et odio. Suspendisse potenti. Pellentesque vitae felis turpis. In imperdiet purus nec auctor malesuada. Suspendisse nisl arcu, finibus sed posuere auctor, cursus in nisl. Fusce accumsan dui sit amet placerat aliquam. Quisque non est tristique, finibus lectus sit amet, bibendum ligula.",
        Callback = function(bool)
            info.AutoFarmPuff = bool
        end
    })
    for k,v in pairs(info['Selected Field']) do 
        createField(v)
    end
    if #info['Selected Field']==0 then 
        createField()
    end
   
    if not rac then 
        table.insert(SelectListPlanter,info)
    end
end
function GetPlanterData(name) 
    local concaccon = require(game:GetService("ReplicatedStorage").LocalPlanters)
    local concacbo = concaccon.LoadPlanter
    local PlanterTable = debug.getupvalues(concacbo)[4]
    for k,v in pairs(PlanterTable) do 
        if v.IsMine and v.PotModel and v.PotModel.Parent and tostring(v.PotModel)==name then 
            return v
        end
    end
end
function GetPlanterAtField(Field) 
    local concaccon = require(game:GetService("ReplicatedStorage").LocalPlanters)
    local concacbo = concaccon.LoadPlanter
    local PlanterTable = debug.getupvalues(concacbo)[4]
    for k,v in pairs(PlanterTable) do 
        if v.IsMine and v.PotModel and v.PotModel.Parent and v.Pos then
            if GetFieldByPos(v.Pos+Vector3.new(0,5,0)) == Field then return v end
        end
    end
end
function GetPlanterVoHoangNang(name) 
    local planter = GetPlanterData(name)
    if not planter then return 0 end
    if Settings['Ignore Planter When Smoking'] then
        if planter and planter.Puffshroom then 
            return 0
        end
    end
    if planter then 
        local s,e = pcall(function() 
            return planter.Gui.Bar.FillBar.Size.X.Scale/planter.Gui.Bar.Size.X.Scale
        end)
        if s then return e else return 1 end
    end
end
function IsPlanterCompleted(name) 
    local tuoidz = GetPlanterVoHoangNang(name)
    if not tuoidz then return true end
    return tuoidz==1
end
local FieldPL=Settings['FieldConCacJDay'] or {}
if not Settings['FieldConCacJDay'] then Settings['FieldConCacJDay'] = FieldPL end
function ConvertListFieldPlanter(ListField) 
    local tuoidz = {}
    for k,v in pairs(ListField) do 
        if v~="None" then 
            table.insert(tuoidz,v)
        end
    end
    return tuoidz
end
SpawnTable["Planter"] = function() 
    while wait(1) do 
        for k,v in pairs(SelectListPlanter) do
            if not Settings['FieldConCacJDay'][k] then 
                Settings['FieldConCacJDay'][k] = 1 
            end
            local ListField = ConvertListFieldPlanter(v['Selected Field'])
            if v.AutoFarmPuff and v['Selected Planter']~="" and ListField[Settings['FieldConCacJDay'][k]] and ListField[Settings['FieldConCacJDay'][k]] ~="" and v.Field~="None" and CheckFarm("Planter") then 
                local data = GetPlanterAtField(ListField[Settings['FieldConCacJDay'][k]]) or GetPlanterData(v['Selected Planter'])
                if not data then
                    local Field = GetFieldByName(ListField[Settings['FieldConCacJDay'][k]])
                    v.CurrL:Set("Current Field: "..ListField[Settings['FieldConCacJDay'][k]])
                    if Field then 
                        local t = tick()
                        repeat wait() 
                            if CheckFarm("Planter") then 
                                StopFarmList["Planter"]=true
                                tpT(Field.CFrame+Vector3.new(0,3,0))
                                wait(2)
                                if (Field.Position-plr.Character.HumanoidRootPart.Position).magnitude < 40 then  
                                    game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = v['Selected Planter']}) 
                                end
                            end
                            
                        until GetPlanterData(v['Selected Planter']) or tick()-t>3 or not v.AutoFarmPuff or not CheckFarm("Planter")
                    end
                elseif data.PotModel and tostring(data.PotModel)~=v['Selected Planter'] and data.Pos then
                    StopFarmList["Planter"]=true
                    tpT(CFrame.new(data.Pos)*CFrame.new(0,3,0))
                    game:GetService("ReplicatedStorage").Events.PlanterModelCollect:FireServer(data.ActorID)
                    StopFarmList["Planter"]=false
                else
                    if (data.FieldDeg or 0)*100 >= (v['Ignore Field At X % Degradation'] or 100) or GetPlanterVoHoangNang(v['Selected Planter'])*100 >=(v['Collect At x %'] or 100) then 
                        local pos = data.Pos
                        StopFarmList["Planter"]=true
                        tpT(CFrame.new(pos)*CFrame.new(0,3,0))
                        local t = tick()
                        game:GetService("ReplicatedStorage").Events.PlanterModelCollect:FireServer(data.ActorID)
                        repeat wait()
                        until not  GetPlanterData(v['Selected Planter']) or tick()-t>3 or not CheckFarm("Planter") 
                        wait(3)
                        if CheckFarm("Planter") then
                            for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                                if IsToken(v)
                                and (v.Position-pos).magnitude<40 then
                                    if CheckFarm("Planter") then
                                        Walkk(
                                            CFrame.new(
                                                v.Position.X,
                                                plr.Character:WaitForChild("HumanoidRootPart").Position.Y,
                                                v.Position.Z
                                            )
                                        )
                                    end
                                end
                            end
                        end
                        Settings['FieldConCacJDay'][k]=Settings['FieldConCacJDay'][k]+1
                        if Settings['FieldConCacJDay'][k]>#ListField then 
                            Settings['FieldConCacJDay'][k]=1
                        end
                    end
                end
            end
        end
        StopFarmList["Planter"]=false
    end
end

local PuffroomTab = Window:MakeTab({
	Name = "Puffroom",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false,
    Default = false
})
local puffpart
if not game.Workspace.FlowerZones:FindFirstChild("Puffshroom Field") then 
    puffpart = Instance.new("Part", game.Workspace.FlowerZones)
    puffpart.Anchored=true
    puffpart.CanCollide=false
    puffpart.Transparency=1
    puffpart.Name="Puffshroom Field"
    puffpart.CFrame=CFrame.new(10000,10000,10000)
    local Range = Instance.new("IntValue", puffpart)
    Range.Name="Range"
    Range.Value = 20
else
    puffpart = game.Workspace.FlowerZones:FindFirstChild("Puffshroom Field")
end
PuffroomTab:AddSection({
    Name = 'Puffshroom Settings Section'
})
PuffroomTab:AddDropdown({
    Name = "Select Allow Puffshroom Rarity",
    Default = Settings['Selected Allow Puffshroom Rarity'] or {},
    Multiple = true,
    Options = {
        "Mythic","Legendary","Epic","Rare","Normal"
    },
    Callback = function(v)
        Settings['Selected Allow Puffshroom Rarity'] = v
    end
})
PuffroomTab:AddDropdown({
    Name = "Select Puffshroom Prioritize Rarity",
    Default = Settings['Selected Puffshroom Prioritize Rarity'] or {},
    Multiple = true,
    Options = {
        "Mythic","Legendary","Epic","Rare","Normal"
    },
    Callback = function(v)
        Settings['Selected Puffshroom Prioritize Rarity'] = v
    end
})
PuffroomTab:AddDropdown({
    Name = "Select Allow Puffshroom Field",
    Default = Settings['Selected Allow Puffshroom Field'] or {},
    Multiple = true,
    Options = GetListField(),
    Callback = function(v)
        Settings['Selected Allow Puffshroom Field'] = v
    end
})
PuffroomTab:AddDropdown({
    Name = "Select Puffshrom Field Priority",
    Default = Settings['Selected Puffshrom Field Priority'] or {},
    Multiple = true,
    Options = GetListField('None'),
    Callback = function(v)
        Settings['Selected Puffshrom Field Priority'] = v
    end
})
PuffroomTab:AddToggle({
    Name = "Puffshroom Priority Raity Mythical to Normal",
    Default = Settings["Puffshroom Priority Raity Mythic > Normal"],
    Callback = function(bool)
        Settings["Puffshroom Priority Raity Mythic > Normal"] = bool
    end
})
PuffroomTab:AddToggle({
    Name = "Puffshroom Priority High Level",
    Default = Settings["Puffshroom Priority High Level"],
    Callback = function(bool)
        Settings["Puffshroom Priority High Level"] = bool
    end
})
PuffroomTab:AddToggle({
    Name = "Ignore Puffshroom",
    Info = 'Will stop farming cultivating the current Puffshroom if a higher-priority Puffshroom is detected',
    Default = Settings["Ignore Puffshroom"],
    Callback = function(bool)
        Settings["Ignore Puffshroom"] = bool
    end
})
PuffroomTab:AddSlider({
    Name = "Min Puffshroom Level",
    ValueName = " Level",
    Min = 1,
    Max = 25,
    Default = Settings['Min Puffshroom Level'] or 1,
    Callback = function(number)
        Settings['Min Puffshroom Level'] = number
    end
})
PuffroomTab:AddSection({
    Name = 'Puffshroom Section'
})
PuffroomTab:AddToggle({
    Name = "Auto Farm Puffshroom",
    Default = Settings["Auto Farm Puffshroom"],
    Callback = function(bool)
        Settings["Auto Farm Puffshroom"] = bool
        if Settings["Auto Farm Puffshroom"] and not Settings['Auto Farm'] then
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Turn on auto farm first.",
                Duration = 5
            })
        end
    end
})
local PuffRaity = {
    "Mythic","Legendary","Epic","Rare","Normal"
}
function GetPuffRoomLevel(v) 
--    game:GetService("Workspace").Happenings.Puffshrooms.PuffballMushroomModelCommon["Puffball Top"].Attachment.Gui.NameRow.TextLabel
    local level = 25
    if v:FindFirstChild("Puffball Top") and v["Puffball Top"]:FindFirstChild("Attachment") and  v["Puffball Top"].Attachment:FindFirstChild("Gui") and  v["Puffball Top"].Attachment.Gui:FindFirstChild("NameRow") and v["Puffball Top"].Attachment.Gui:FindFirstChild("NameRow"):FindFirstChild("TextLabel") then 
        while level>0 do 
            if v["Puffball Top"].Attachment.Gui.NameRow.TextLabel.Text:find(tostring(level)) then 
                return level
            end
            level=level-1
        end
    end
    return 0
end

function PiroField(v,f) 
    for k,v in pairs(v) do 
        if v:FindFirstChild("Puffball Stem") and table.find(Settings['Selected Puffshrom Field Priority'], GetNerestFieldByObject(v["Puffball Stem"])) then 
            return v
        end
    end
    if f then return end

    local Nearest
    for k,v in pairs(v) do 
        if not Nearest and v:FindFirstChild("Puffball Stem") then Nearest=v end
        if plr.Character:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Puffball Stem") then 
            if (plr.Character.HumanoidRootPart.Position-v["Puffball Stem"].Position).magnitude<(plr.Character.HumanoidRootPart.Position-Nearest["Puffball Stem"].Position).magnitude then 
                Nearest=v
            end
        end
    end
    return Nearest
end
function GetRaity(puff) 
    for k,v in pairs(PuffRaity) do 
        if string.match(puff.Name,v) then 
            return v
        end
    end
    return "Normal"
end
function GetNearestPushroom(Field)

    -- Mythic > Legendary > Epic > Level 10+ > Rare > Highest Level
    local ListPuff = {}
    for k,v in pairs(game:GetService("Workspace").Happenings.Puffshrooms:GetChildren()) do
        if v:FindFirstChild("Puffball Stem") then 
            local a = GetRaity(v)
            if table.find(Settings['Selected Allow Puffshroom Rarity'], a) then 
                local lv = GetPuffRoomLevel(v)
                if lv<= Settings['Min Puffshroom Level'] then 
                    if table.find(Settings['Selected Allow Puffshroom Field'], GetNerestFieldByObject(v["Puffball Stem"]))then 
                        table.insert(ListPuff,v)
                    end
                end
            end
        end
    end
    table.sort(ListPuff,function(a,b) 
        return a["Puffball Stem"].Position.magnitude < b["Puffball Stem"].Position.magnitude
    end)
    -- Mythic > Legendary > Epic
    local BestRaity = {}
    for k,v in pairs(PuffRaity) do 
        table.insert(BestRaity,v)
    end
    if not Settings["Puffshroom Priority Raity Mythic > Normal"] then 
        reverse(BestRaity)
    end

    local Check=false
    local ReturnList = {}
    for k,v in pairs(BestRaity) do 
        if table.find(Settings['Selected Puffshroom Prioritize Rarity'], v) then 
            for k2,v2 in pairs(ListPuff) do 
                if string.match(v2.Name,v) then table.insert(ReturnList,v2) Check=true end
            end
            if Check then break end
        end
    end
    if Check then 
        return PiroField(ReturnList)
    end
    -- Piro Field
    local piro = PiroField(ListPuff,true)
    if piro then 
        return piro
    end

    -- Highest
    local Highest
    for k,v in pairs(ListPuff) do 
        if v:FindFirstChild("Puffball Stem") then 
            if not Highest then Highest=v end
            if Settings["Puffshroom Priority High Level"] then 
                if GetPuffRoomLevel(v)>GetPuffRoomLevel(Highest) then Highest=v end
            else
                if GetPuffRoomLevel(v)<GetPuffRoomLevel(Highest) then Highest=v end
            end
        end
    end
    return Highest
end
SpawnTable["Puffroom"] = function() 
    local sucvat = {"1629547638"}
    
    for k,v in pairs(TokenId) do 
        table.insert(sucvat,v)
    end
    for k,v in pairs(TokenId2) do 
        table.insert(sucvat,v)
    end
    while wait(.3) do 
        if Settings["Auto Farm Puffshroom"] then 
            if (#game:GetService("Workspace").Happenings.Puffshrooms:GetChildren()) == 0 then 
                FarmFieldList["Pushroom"] = nil--["Pushroom"]-1]]     
            else
                local v = GetNearestPushroom()
                local loncac = true
                if v then 
                    if v:FindFirstChild("Puffball Stem")
                    and Settings["Auto Farm Puffshroom"] then 
                        local Curr = GetNerestFieldByObject(v["Puffball Stem"])
                        local cc = v 
                        puffpart.CFrame = v["Puffball Stem"].CFrame
                        FarmFieldList["Pushroom"] ="Puffshroom Field"
                        repeat wait(1) 
                            if Settings.IgnorePuff then 
                                if GetNearestPushroom()~=cc then loncac=false break end
                            end
                        until (not v.Parent
                        or not v:FindFirstChild("Puffball Stem")
                        or not Settings["Auto Farm Puffshroom"]) 
                        local NearestField = GetFieldByPos(puffpart.Position)
                        if NearestField then 
                            FarmFieldList["Pushroom"] = NearestField
                        end
                        Whitelist = sucvat
                        game.Workspace.FlowerZones['Puffshroom Field'].Range.Value = 100
                        wait(1)

                        if (not v.Parent or not v:FindFirstChild("Puffball Stem")) and Settings["Auto Farm Puffshroom"] then wait(3)
                        else
                            if Settings["Auto Farm Puffshroom"] and loncac then
                                wait(3)
                            end
                        end
                        repeat wait() Whitelist = sucvat until not GetNerestToken(NearestField,nil,ListAllToken,nil,sucvat) or not Settings["Auto Farm Puffshroom"]
                        wait(1)
                        FarmFieldList["Pushroom"] ="Puffshroom Field"
                        game.Workspace.FlowerZones['Puffshroom Field'].Range.Value = 20
                        Whitelist = {}
                        FieldFarmPos[Curr] = nil
                    end
                else
                    FarmFieldList["Pushroom"] = nil--["Pushroom"]-1]]    
                end
            end
        else
            FarmFieldList["Pushroom"] = nil--["Pushroom"]-1]]
        end
    end
end

local WebhookTab = Window:MakeTab({
	Name = "Webhook",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false,
    Default = false
})

WebhookTab:AddSection({
    Name = 'Webhook Section'
})

function GetItemListWithValue()
    local HttpService = game:GetService("HttpService")
    local StatCache = TvkStatCache
    local data = StatCache
    return data.Eggs
end
function GetItemList()
    local ks = GetItemListWithValue()
    local tb = {}
    for k, v in pairs(ks) do
        table.insert(tb, k)
    end
    return tb
end
function format(num, digits)
	return string.format("%0" .. digits .. "i", num)
end
function formatNumber(v)
  return tostring(v):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
end
local StatCache = require(game.ReplicatedStorage.ClientStatCache)
local oldhoney = StatCache.Get().Totals.Honey
getgenv().HoneyMade = 0
spawn(function()
    while wait(4) do
        getgenv().HoneyMade = StatCache.Get().Totals.Honey - oldhoney
    end
end)
local plr = game.Players.LocalPlayer
function parseDateTime()
	local osDate = os.date("!*t")
	local year, mon, day = osDate["year"], osDate["month"], osDate["day"]
	local hour, min, sec = osDate["hour"], osDate["min"], osDate["sec"]
	return year .. "-" .. format(mon, 2) .. "-" .. format(day, 2) .. "T" .. format(hour, 2) .. ":" .. format(min, 2) .. ":" .. format(sec, 2) .. "Z"
end
function ListToField()
    local ListAll = GetItemListWithValue()
    local fields = {          
        {
            ["name"] = "Player Name:",
            ["value"] = "||```\n" .. game.Players.LocalPlayer.Name .."\n```||"
        },
    }
    if Settings["Show Honey"] then
        table.insert(
            fields,
            {
                name = "Status",
                value = "```Honey Made: " .. formatNumber(getgenv().HoneyMade)
                .. "\nTotal Honey : " .. tostring(formatNumber(plr.CoreStats.Honey.Value)) .. "```",
                inline = false
            }
        )
    end
    local ItemsValue = ""
    for k, v in pairs(Settings['Selected Item Notifications']) do
        if v then
            ItemsValue = ItemsValue .. v .. ": " .. tostring(ListAll[v]) .. "\n"
        end
    end
    if ItemsValue~="" then 
        table.insert(
            fields,
            {
                name = "Items",
                value = ItemsValue,
                inline = false
            }
        )
    end

    return fields
end
function SendWH()
    local wh = {
        ["content"] = '',
        ["embeds"] = {
            {
              ["title"] = "Bee Swarm Simulator",
              ["color"]= 5814783,
              ["fields"] = ListToField(),
              ["author"] = {
                ["name"] = "Adel Hub",
                ["url"] = "https://discord.gg/EnjzPJVpKC",
              },
              ["footer"] = {
                ["text"] = "https://discord.gg/EnjzPJVpKC",
               ["icon_url"] = "https://cdn.discordapp.com/attachments/879997074710626374/1119513226355408916/Adel_Hub.png"
              },
              ["timestamp"] = parseDateTime(),
              ["image"] = {
                ["url"] = ""
              },
              ["thumbnail"] = {
                ["url"] = "https://cdn.discordapp.com/attachments/879997074710626374/1119513226355408916/Adel_Hub.png"
              },
            },
          },
        }
    local request = http_request
    if syn then
        request = syn.request 
    end
    local abcdef = {Url = Settings['Url Webhook'], Body = game:GetService("HttpService"):JSONEncode(wh), Method = "POST", Headers = {["Content-Type"] = "application/json"}}
    request(abcdef)
end
WebhookTab:AddDropdown({
    Name = "Select Item Notifications",
    Default = Settings['Selected Item Notifications'] or {},
    Multiple = true,
    Options = GetItemList(),
    Callback = function(v)
        Settings['Selected Item Notifications'] = v
    end
})

WebhookTab:AddToggle({
    Name = "Show Honey",
    Default = Settings["Show Honey"],
    Callback = function(bool)
        Settings["Show Honey"] = bool
    end
})

WebhookTab:AddTextbox({
    Name = "Url Webhook",
    Default = Settings['Url Webhook'],
    Callback = function(a)
        Settings['Url Webhook'] = tostring(a)
    end
})
WebhookTab:AddTextbox({
    Name = "Time To Send Webhook (Min)",
    Default = Settings['Time To Send Webhook (Min)'] or 0,
    Callback = function(a)
        Settings['Time To Send Webhook (Min)'] = tonumber(a)
    end
})
WebhookTab:AddButton({
    Name = "Test Webhook",
    -- Info = "This is a Button.",
    Callback = function()
        if Settings['Url Webhook'] ~= nil or Settings['Url Webhook'] ~= '' then 
            SendWH()
        else
            Window:MakeNotification({
                Title = "Script Notifications!",
                Description = "Please Enter Url Webhook.",
                Duration = 5
            })
        end
    end
})

function AutoSend()
    while Settings['Auto Send Webhook'] do
        wait()
        SendWH()
        local tic = tick()
        repeat wait()
        until (tick() - tic) > Settings['Time To Send Webhook (Min)'] * 60 or not Settings['Auto Send Webhook']
    end 
end

WebhookTab:AddToggle({
    Name = "Auto Send Webhook",
    Default = Settings["Auto Send Webhook"],
    Callback = function(bool)
        Settings["Auto Send Webhook"] = bool
        if Settings["Auto Send Webhook"] then
            if Settings['Url Webhook'] ~= nil or Settings['Url Webhook'] ~= '' then 
                spawn(function()
                    AutoSend()
                end)
            else
                Window:MakeNotification({
                    Title = "Script Notifications!",
                    Description = "Please Enter Url Webhook.",
                    Duration = 5
                })
            end
        end
    end
})


local LocalPlayerTab = Window:MakeTab({
	Name = "Local Player",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false,
    Default = false
})



local TeleportSection = LocalPlayerTab:AddSection({
    Name = 'Teleport Section'
})

LocalPlayerTab:AddButton({
    Name = "Teleport To Hive",
    -- Info = "This is a Button.",
    Callback = function()
        local sp = plr.SpawnPos.Value.p
        local p = CFrame.new(sp.X, sp.Y, sp.Z)
        plr.Character.HumanoidRootPart.CFrame =  p
    end
})
function ObjListTostring(tabl)
    local Tab = {}
    for k, v in pairs(tabl) do
        table.insert(Tab, v.Name)
    end
    return Tab
end
function GetInstantList()
    local tab = {}
    for k, v in pairs(game.Workspace.Toys:GetChildren()) do
        if string.match(v.Name, "Instant Converter") then
            table.insert(tab, v)
        end
    end
    return tab
end
local ListIns = GetInstantList()
TsdadsadasdsaddSDropdown = LocalPlayerTab:AddDropdown({
    Name = "Teleport Instant Converter",
    Default = '',
    Options = ObjListTostring(ListIns),
    Callback = function(v)
        if v then 
            for k, s in pairs(ListIns) do
                if s.Name == v then
                    plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(s.Platform.Position.X, s.Platform.Position.Y + 3, s.Platform.Position.Z)
                end
            end
        end
    end
})
function GetMemoList()
    local tab = {}
    for k, v in pairs(game.Workspace.Toys:GetChildren()) do
        if string.match(v.Name, "Memory Match") then
            table.insert(tab, v)
        end
    end
    return tab
end
local ListMemo = GetMemoList()
TsdadsadSDropdown = LocalPlayerTab:AddDropdown({
    Name = "Teleport Memory Match",
    Default = '',
    Options = ObjListTostring(ListMemo),
    Callback = function(v)
        if v then 
            for k, s in pairs(ListMemo) do
                if s.Name == v then
                    plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(s.Platform.Position.X, s.Platform.Position.Y + 3, s.Platform.Position.Z)
                end
            end
        end
    end
})

local Shops = {
    ["Noob Shop"] = CFrame.new(79.056282043457, 3.8026716709137, 292.80020141602),
    ["Pro Shop"] = CFrame.new(194.4630279541, 68.288352966309, -151.47756958008),
    ["Blue HQ"] = CFrame.new(296.83996582031, 3.3883802890778, 96.945518493652),
    ["Red HQ"] = CFrame.new(-325.91201782227, 19.498743057251, 214.5513458252),
    ["Mountain Top Shop"] = CFrame.new(-39.324777603149, 175.28833007812, -159.74284362793),
    ["Ticket Tent"] = CFrame.new(-235.78407287598, 16.927011489868, 386.78750610352),
    ["Royal Jelly Shop"] = CFrame.new(-307.236328125, 51.501934051514, 67.355659484863),
    ["Basic Egg Shop"] = CFrame.new(-159.14775085449, 3.9883763790131, 243.48374938965),
    ["Ticket Shop"] = CFrame.new(-20.482753753662, 183.39573669434, -221.52685546875),
    ["Treat Shop"] = CFrame.new(-210.4030456543, 4.8152499198914, 89.569847106934),
    ["Gumdrop Shop"] = CFrame.new(60.302932739258, 20.67107963562, 26.903917312622),
    ["Petal Shop"] = CFrame.new(-492.71517944336, 50.858417510986, 454.16259765625),
    ["Coconut Cave"] = CFrame.new(-178.99224853516, 71.318328857422, 505.97467041016),
    ["Stinger Shop"] = CFrame.new(81.812812805176, 32.496761322021, 452.16723632812),
    ["Badge Bearer's Guild"] = CFrame.new(-439.93212890625, 68.129806518555, -30.169496536255),
    ["Gummy Bear's Lair"] = CFrame.new(280.13916015625, 25267.560546875, -778.31243896484),
    ["Magic Bean Shop"] = CFrame.new(360.51113891602, 91.242027282715, -83.949577331543),
    ["Dapper Bear’s Shop"] = CFrame.new(520.45446777344, 137.3191986084, -340.04870605469)
}
local ShopLists = {}
for i, v in pairs(Shops) do
    table.insert(ShopLists, i)
end
TShopDropdown = LocalPlayerTab:AddDropdown({
    Name = "Teleport Shop",
    Default = '',
    Options = ShopLists,
    Callback = function(a)
        if a then 
            local tvknpcpos = Shops[a]
            plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(tvknpcpos.X, tvknpcpos.Y + 5, tvknpcpos.Z)
        end
    end
})
local IgnoreNPCs = {
    "Bee Bear 4",
    "Bubble Bee Man 2",
    "Wind Shrine",
    "Ant Challenge Info"
}
local NPCs = {}
for _, v in pairs(game.Workspace.NPCs:GetChildren()) do
    if v.Name == "Bee Bear 4" then
        NPCs["Bee Bear"] = v.Platform.Position
    end
    if v.Name == "Bubble Bee Man 2" then
        NPCs["Bubble Bee Man"] = v.Platform.Position
    end
    if not table.find(IgnoreNPCs, v.Name) then
        NPCs[v.Name] = v.Platform.Position
    end
end
local NPCList = {}
for i, v in pairs(NPCs) do
    table.insert(NPCList, i)
end
TNPODropdown = LocalPlayerTab:AddDropdown({
    Name = "Teleport NPC",
    Default = '',
    Options = NPCList,
    Callback = function(a)
        if a then 
            local tvknpcpos = NPCs[a]
            plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(tvknpcpos.X, tvknpcpos.Y + 5, tvknpcpos.Z)
        end
    end
})
local FieldList = GetListField()
table.remove(FieldList,table.find(FieldList,"Puffshroom Field"))
LocalPlayerTab:AddDropdown({
    Name = "Teleport Field",
    Default = '',
    Options = FieldList,
    Callback = function(a)
        if a then 
            plr.Character:WaitForChild("HumanoidRootPart").CFrame = GetFieldByName(a).CFrame * CFrame.new(0, 5, 0)
        end
    end
})

LocalPlayerTab:AddSection({
    Name = 'Character Section'
})

function GetWalkSpeed() 
    local speed
    pcall(function() 
        speed = TvkStatCache.ModifierCaches.Value.PlayerMovespeed["_"]
    end)
    if not speed then speed = 0 end
    return speed
end
function WalkSpeed()
    while Settings['Change Walk Speed'] and wait() do 
        if plr.Character:FindFirstChild("Humanoid") then
            if not getgenv().DisableSetSpeed then 
                if Settings.WalkSpeedSM then 
                    if Settings['WalkSpeed'] < GetWalkSpeed()*1.5 then 
                        plr.Character.Humanoid.WalkSpeed = Settings['WalkSpeed']
                    else
                        plr.Character.Humanoid.WalkSpeed = GetWalkSpeed()
                    end
                else
                    plr.Character.Humanoid.WalkSpeed = Settings['WalkSpeed']
                end
            else
                plr.Character.Humanoid.WalkSpeed = GetWalkSpeed()
            end
            
        end
    end
end
LocalPlayerTab:AddSlider({
    Name = "WalkSpeed",
    ValueName = " Speed",
    Min = 1,
    Max = 80,
    Default = Settings['WalkSpeed'] or 60,
    Callback = function(number)
        Settings['WalkSpeed'] = number
    end
})
LocalPlayerTab:AddToggle({
    Name = "Change Walk Speed",
    Default = Settings['Change Walk Speed'],
    -- Info = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean pretium ultrices pellentesque. Maecenas lacus nisl, tempor eget sollicitudin quis, blandit et massa. Donec accumsan nec magna id tempor. Integer interdum mollis ligula in semper. Curabitur vulputate elementum dolor, sed tempus sapien lobortis non. Vivamus pulvinar enim eget augue suscipit euismod non vel erat. Proin et mauris et metus vulputate facilisis. Nunc convallis dolor in turpis mollis, nec sodales justo fermentum. Duis egestas blandit velit ut semper. Nunc dolor nisi, vulputate non malesuada dictum, aliquet et odio. Suspendisse potenti. Pellentesque vitae felis turpis. In imperdiet purus nec auctor malesuada. Suspendisse nisl arcu, finibus sed posuere auctor, cursus in nisl. Fusce accumsan dui sit amet placerat aliquam. Quisque non est tristique, finibus lectus sit amet, bibendum ligula.",
    Callback = function(bool)
        Settings['Change Walk Speed'] = bool
        spawn(WalkSpeed)
    end
})
LocalPlayerTab:AddToggle({
    Name = "Prioritize Token Collection Only",
    Default = Settings['Prioritize Token Collection only'],
    Info = "Will auto change walkspeed only when collecting prioritize token.",
    Callback = function(bool)
        Settings['Prioritize Token Collection only'] = bool
    end
})
function JumpPower()
    while Settings['Change Jump Power'] and wait(2) do 
        if plr.Character:FindFirstChild("Humanoid") then
            plr.Character.Humanoid.JumpPower = Settings['JumpPower']
        end
    end
end
LocalPlayerTab:AddSlider({
    Name = "JumpPower",
    ValueName = " JumpPower",
    Min = 1,
    Max = 500,
    Default = Settings['JumpPower'] or 60,
    Callback = function(number)
        Settings['JumpPower'] = number
    end
})
LocalPlayerTab:AddToggle({
    Name = "Change Jump Power",
    Default = false,
    -- Info = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean pretium ultrices pellentesque. Maecenas lacus nisl, tempor eget sollicitudin quis, blandit et massa. Donec accumsan nec magna id tempor. Integer interdum mollis ligula in semper. Curabitur vulputate elementum dolor, sed tempus sapien lobortis non. Vivamus pulvinar enim eget augue suscipit euismod non vel erat. Proin et mauris et metus vulputate facilisis. Nunc convallis dolor in turpis mollis, nec sodales justo fermentum. Duis egestas blandit velit ut semper. Nunc dolor nisi, vulputate non malesuada dictum, aliquet et odio. Suspendisse potenti. Pellentesque vitae felis turpis. In imperdiet purus nec auctor malesuada. Suspendisse nisl arcu, finibus sed posuere auctor, cursus in nisl. Fusce accumsan dui sit amet placerat aliquam. Quisque non est tristique, finibus lectus sit amet, bibendum ligula.",
    Callback = function(bool)
        Settings['Change Jump Power'] = bool
        spawn(JumpPower)
    end
})

local SettingsTab = Window:MakeTab({
	Name = "Settings",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false,
    Default = false
})


SettingsTab:AddSection({
    Name = 'Settings Section'
})
function AutoSave()
    while not getgenv().DisableAutoSave and Settings['Auto Save Settings'] and wait() do 
        SaveSettings()
        wait(5)
    end
end
SettingsTab:AddToggle({
    Name = "Auto Save Settings",
    Default = Settings['Auto Save Settings'],
    -- Info = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean pretium ultrices pellentesque. Maecenas lacus nisl, tempor eget sollicitudin quis, blandit et massa. Donec accumsan nec magna id tempor. Integer interdum mollis ligula in semper. Curabitur vulputate elementum dolor, sed tempus sapien lobortis non. Vivamus pulvinar enim eget augue suscipit euismod non vel erat. Proin et mauris et metus vulputate facilisis. Nunc convallis dolor in turpis mollis, nec sodales justo fermentum. Duis egestas blandit velit ut semper. Nunc dolor nisi, vulputate non malesuada dictum, aliquet et odio. Suspendisse potenti. Pellentesque vitae felis turpis. In imperdiet purus nec auctor malesuada. Suspendisse nisl arcu, finibus sed posuere auctor, cursus in nisl. Fusce accumsan dui sit amet placerat aliquam. Quisque non est tristique, finibus lectus sit amet, bibendum ligula.",
    Callback = function(bool)
        Settings['Auto Save Settings'] = bool
        if bool then
            spawn(function()
                AutoSave()
            end)
        elseif not getgenv().DisableAutoSave then
            SaveSettings()
        end
    end
})

local AttackTokens = {
    "rbxassetid://1629547638",
    "rbxassetid://2319083910",
    "rbxassetid://1442700745",
    "rbxassetid://1629649299"
}
function CollectAttackTokens(x,all,IgnoreY)
    local sucvat =  plr.Character:WaitForChild("HumanoidRootPart").CFrame

    x = x or 50
    for k, v in pairs(game.workspace.Collectibles:GetChildren()) do
        local pass = true
        if not all then 
            if v:FindFirstChild("FrontDecal") then 
                pass = table.find(AttackTokens, v.FrontDecal.Texture) 
            end
        end
        if v.Name == "C"
        and not v:FindFirstChild("Ignored")
        and v:FindFirstChild("FrontDecal")
        and pass
        and (v.Position - plr.Character:WaitForChild("HumanoidRootPart").CFrame.Position).magnitude <= x then
            local cac
            if IgnoreY then 
                if (v.Position.Y - sucvat.Position.Y +3) > 0 then 
                    cac=true 
                end
            end
            if not cac then 
                plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(v.Position) + Vector3.new(0, 4, 0)
                wait(.2)
                local ractvk = Instance.new("IntValue", v)
                ractvk.Name = "Ignored"
            end
           
        end
    end
end

function CheckCoco()
    local k = "CoconutCrab"
    local t = GetMobIns(k)
    if t then 
        if GetAttach(t).TimerGui.TimerLabel.Visible == false then
            return t
        end
    end
end
function CheckTunnel()
    local k = "TunnelBear"
    local t = GetMobIns(k)
    if t then 
        if GetAttach(t).TimerGui.TimerLabel.Visible == false then
            return t
        end
    end
    
end
function CheckComando()
    local k = "Commando Chick"
    local t = GetMobIns(k)
    if t then 
        if GetAttach(t).TimerGui.TimerLabel.Visible == false then
            return t
        end
    end
    
end
function GetTunnel()
    for _, v in ipairs(game.Workspace.Monsters:GetChildren()) do
        if string.match(v.Name, "Tunnel") then
            if v:FindFirstChild("Config") then
                if v:FindFirstChild("Hunter") then
                    if v.Hunter.Value == plr.UserId then
                        return v
                    end
                end
            end
        end
    end
end
function GetComandoMob()
    for k, v in pairs(game.Workspace.Monsters:GetChildren()) do
        if string.match(v.Name, "Commando") then
            if v:FindFirstChild("Target")
            and v:FindFirstChild("Humanoid")
            and v:FindFirstChild("HumanoidRootPart") then
                if tostring(v.Target.Value) == plr.Name then
                    return v
                end
            end
        end
    end
end
function CheckKing()
    local k = "King Beetle Cave"
    local t = GetMobIns(k)
    if t then 
        if GetAttach(t).TimerGui.TimerLabel.Visible == false then
            return t
        end
    end
    
end
function GetKing()
    for _, v in ipairs(game.Workspace.Monsters:GetChildren()) do
        if v.Name=="King Beetle (Lvl 7)" then
            if v:FindFirstChild("Config") then
                if v:FindFirstChild("Hunter") then
                    if v.Hunter.Value == plr.UserId then
                        return v
                    end
                end
            end
        end
    end
end
function UseAnt()
    game.ReplicatedStorage.Events.ToyEvent:FireServer("Ant Challenge")
end
function GetValidAntPos() 
    local mid=CFrame.new(93.422752380371, 31.946582794189, 553.12829589844)
    local left=CFrame.new(93.422752380371, 31.946582794189, 553.12829589844)
    local right = CFrame.new(92.35001373291, 31.946582794189, 532.30163574219)

    local tb = {
        mid=CFrame.new(93.422752380371, 31.946582794189, 553.12829589844),
        left=CFrame.new(89.871429443359, 31.946582794189, 571.10089111328),
        right= CFrame.new(86.353813171387, 31.946582794189, 527.67553710938)
    }
    local fk = {}
    for k,v in pairs(tb) do fk[k]=false end
    local has = false
    for i,v in pairs(workspace.Toys["Ant Challenge"].Obstacles:GetChildren()) do
        if v:FindFirstChild("Root") then
            local root = plr.Character:FindFirstChild("HumanoidRootPart")
            if root then 
                if true  then
                    has=true
                    local vpos = v.Root.Position
                    local near,ractvk = nil
                    for k,v in pairs(tb) do 
                        if not ractvk then ractvk = k end
                        if (v.p-vpos).magnitude< (tb[ractvk].p-vpos).magnitude then 
                            --near=v
                            ractvk=k
                        end
                    end
                    if ractvk then 
                        fk[ractvk]=true
                    end
                end
            end
        end
    end
    if has then 
        for k,v in pairs(fk) do 
            if not v then return tb[k] end
        end
    end
    
    return tb["mid"]

end
function CheckNear(pos,mob) 
    for k,v in pairs(game.Workspace.Monsters:GetChildren()) do 
        if string.match(v.Name,mob) then 
            if v:FindFirstChild("Torso") or v:FindFirstChild("HumanoidRootPart") then 
                if ((v:FindFirstChild("Torso") or v:FindFirstChild("HumanoidRootPart")).Position-pos.p).magnitude<20 then 
                    return true
                end
            end
        end
    end
    return false
end
function NoFire(token) 
    local ray = Ray.new(token.Position+Vector3.new(0,1,0), Vector3.new(0, -5, 0))
    local t = workspace:FindPartOnRayWithIgnoreList(ray, {token,game.Workspace.Bees,plr.Character})
    if t and t:FindFirstChild("FireParticles") then 
        return false
    end

end
function CheckPollenValid(pollen) 
    local name,x,y=GetXY(pollen)
    if not name or not x or not y then return end
    x=tonumber(x)
    y=tonumber(y)
    local token = pollen
    
    if token then 
        if not NoFire(token) then return false end
    end

    local token = GetFlower(name,x,y+1)
    if token then 
        if not NoFire(token) then return false end
    end
    

    local token = GetFlower(name,x,y-1)

    if token then 
        if not NoFire(token) then return false end
    end

    local token = GetFlower(name,x+1,y)

    if token then 
        if not NoFire(token) then return false end
    end

    local token = GetFlower(name,x-1,y)

    if token then 
        if not NoFire(token) then return false end
    end
    return true
end
SpawnTable["Ant"] = function() 
    while wait(.2) do 
        if (Settings["Auto Challenge Ant"] or AutoFAnt2) and CheckFarm("Ant") then 
            if not game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value then 
                if GetCurrenItem("AntPass") > 0 then
                    StopFarmList["Ant"] = true
                    ValidAnt=false
                    tpT(CFrame.new(89.138473510742, 33.982414245605, 503.96978759766))
                    wait(.1)
                    UseAnt()
                    local k = tick()
                    repeat wait() until game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value ==true or tick()-k >5 or not (Settings["Auto Challenge Ant"] or AutoFAnt2) or not CheckFarm("Ant")
                   -- wait(1)
                    if game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value ==true then
                        
                        local old = ""
                        repeat wait() until plr.Character:FindFirstChild("Humanoid")
                        wait(1)
                       -- if AntMethod=="Filing" then 
                            getgenv().noclip = true
                            plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(92.6141205, 45.4476166, 547.385254, -1, -4.76778114e-05, 8.39982658e-06, -6.96244262e-09, 0.173648417, 0.98480773, -4.84120937e-05, 0.98480773, -0.173648417)
                            for _,v in pairs(plr.Character:GetChildren()) do 
                                if v:IsA("Tool") then 
                                    old=v.Name
                                end
                            end
                            if Settings.AutoEquipSpark then 
                                game.ReplicatedStorage.Events.ItemPackageEvent:InvokeServer("Equip",{["Mute"] = false,["Type"] = "Spark Staff",["Category"] = "Collector"})
                            end
                            game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
                                {["Name"] = "Sprinkler Builder"}
                            )
                        repeat wait()
                            if CheckFarm("Ant") then 
                                Killing=true
                                local validpos = GetValidAntPos()
                                local yup = 56
                                 local ydown =32
                                 local cac
                                 getgenv().noclip = true
                                 if CheckNear(validpos,"Ant") then 
                                     cac=CFrame.new(validpos.X,yup,validpos.Z)
                                 else
                                     cac=CFrame.new(validpos.X,ydown,validpos.Z)
                                 end
                                 if plr.Character:FindFirstChild("HumanoidRootPart") then 
                                     tpT(cac, 100)
                                 end
                                 for k,token in pairs(game.Workspace.Collectibles:GetChildren()) do
                                     local v = token
                                     if v:FindFirstChild("FrontDecal") then
                                         if
                                             v.FrontDecal.Texture == "rbxassetid://1629547638"  or -- token link
                                                 v.FrontDecal.Texture == "rbxassetid://2319083910"  or -- stinger
                                                 v.FrontDecal.Texture == "rbxassetid://1442700745"  or -- rage
                                                 v.FrontDecal.Texture == "rbxassetid://1629649299"
                                          then
                                             if getgenv().IsValidTokenPos(token, "Ant Field") and getgenv().IsToken(token) and
                                             not getgenv().IsTokenBlacklist(token) and (Settings["Auto Challenge Ant"] or AutoFAnt2) and token and not CheckNear(token.CFrame,"Ant") then 
                                                 local passed = true
                                                 local ray = Ray.new(token.Position+Vector3.new(0,1,0), Vector3.new(0, -5, 0))
                                                 local t = workspace:FindPartOnRayWithIgnoreList(ray, {token})
                                                 if t and CheckPollenValid(t) then 
                                                     passed=false
                                                 end
                                                 if passed then
                                                     plr.Character:WaitForChild("HumanoidRootPart").CFrame = token.CFrame
                                                     wait(.2)
                                                 end
                                             end
                                         end
                                     end 
                                 end
                            end
                        until not game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value or not (Settings["Auto Challenge Ant"] or AutoFAnt2) or not CheckFarm("Ant")
                        game.ReplicatedStorage.Events.ItemPackageEvent:InvokeServer("Equip",{["Mute"] = false,["Type"] = old,["Category"] = "Collector"})
                        Killing=false
                        getgenv().noclip = false
                        ValidAnt=true
                    end
                   
                end
            end
        end
        StopFarmList["Ant"] = false
    end
end

SpawnTable["Snail"] = function() 
    while wait(2) do 
        if Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Stump Snail') or ccsnail then
            if CheckSnail() and CheckFarm("Snail") then
                while  (Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Stump Snail') or ccsnail) and CheckSnail() and CheckFarm("Snail") do
                    Killing = true
                    StopFarmList["Snail"] = true
                    local uTorso =
                        workspace:WaitForChild(plr.Name):WaitForChild(
                        "HumanoidRootPart"
                    )
                    tpT(CFrame.new(417.86651611328125, 75.32017517089844, -166.75863647460938), 100)
                    getgenv().noclip = true
                    wait()
                    CollectAttackTokens(20,true)
                end
                Killing = false
                local uTorso =
                    workspace:WaitForChild(plr.Name):WaitForChild("HumanoidRootPart")
                uTorso.CFrame = GetFieldByName("Stump Field").CFrame
                wait(.4)
                getgenv().noclip = false
            end
        end
        StopFarmList["Snail"] = false
    end
end
SpawnTable['Mob'] = function()
    while wait(1) do
        if Settings["Auto Vicious Bee"] and CheckFarm("Kill") then
            if game:GetService("Workspace").Particles.WTs:FindFirstChild("WaitingThorn") then 
                if CheckFarm("Kill") then 
                    local nr = GetNerestFieldByObject(game:GetService("Workspace").Particles.WTs:FindFirstChild("WaitingThorn"))
                    if CheckFieldReq(nr) then 
                        StopFarmList["Kill"] = true
                        tpT(game:GetService("Workspace").Particles.WTs.WaitingThorn.CFrame)
                        wait(.5)
                    end
                end
            else
                if CheckFarm("Kill") then
                    for k,v in pairs(game.Workspace.Monsters:GetChildren()) do 
                        if string.match(v.Name,"Vicious") then 
                            if v:FindFirstChild("Level") then
                                if v.Level.Value<=math.floor(Settings['Min Vicious Level']) then 
                                    if v:FindFirstChild("Torso") or v:FindFirstChild("HumanoidRootPart") then 
                                        local vicous = v:FindFirstChild("Torso") or v:FindFirstChild("HumanoidRootPart")
                                        local nrf = GetNerestFieldByObject(vicous.CFrame)
                                        if  CheckFieldReq(nrf) then 
                                            StopFarmList["Kill"] = true
                                            repeat wait()
                                                if CheckFarm("Kill") then 
                                                    if v:FindFirstChild("Torso") or v:FindFirstChild("HumanoidRootPart") then 
                                                        Killing = true
                                                        getgenv().noclip = true
                                                        tpT(vicous.CFrame* CFrame.new(0, 15, 0))
                                                        CollectAttackTokens()
                                                    end
                                                    
                                                end
                                            until not v.Parent or not Settings["Auto Vicious Bee"]
                                            Killing = false
                                        end
                                    end
                                end
                            end
                        end
                    end
                    getgenv().noclip = false
                end
            end
            StopFarmList["Kill"] = false
        end
        if Settings["Auto Windy Bee"] then
            if game.Workspace.NPCBees:FindFirstChild("Windy") and CheckFarm("Kill") then
                local nr = GetNerestFieldByObject(game.Workspace.NPCBees:FindFirstChild("Windy"))
                if CheckFieldReq(nr) then 
                    if getgenv().IsValidTokenPos(game.Workspace.NPCBees:FindFirstChild("Windy"), nr) then
                        getgenv().noclip = true
                        Valid = false
                        StopFarmList["Kill"] = true
                        tpT(game.Workspace.NPCBees.Windy.CFrame, 100)
                        getgenv().noclip = false
                    end
                end
            end
            for i, v in pairs(game.Workspace.Monsters:GetChildren()) do
                if (string.find(v.Name, "Windy") or v.Name == "KillingWindyBee") and v:FindFirstChild("HumanoidRootPart") and Settings["Auto Windy Bee"] and CheckFarm("Kill") then
                    local nrf = GetNerestFieldByObject(v.HumanoidRootPart)
                    if CheckFieldReq(nrf) then 
                        repeat wait()
                            if v:FindFirstChild("HumanoidRootPart") then
                                Killing = true
                                getgenv().noclip = true
                                StopFarmList["Kill"] = true
                                tpT(CFrame.new(v.HumanoidRootPart.Position.x, v.HumanoidRootPart.Position.y + 20, v.HumanoidRootPart.Position.z), 100)
                                CollectAttackTokens()
                            end
                        until not v.Parent or
                        not Settings["Auto Windy Bee"] or not CheckFarm("Kill")
                        Killing = false
                        getgenv().noclip = false
                        wait(5)                   
                        StopFarmList["Kill"] = false
                        if ValidFarm() and CheckFarm("Kill") then
                            local nre = GetNerestFieldByObject(plr.Character:WaitForChild("HumanoidRootPart"))
                            if getgenv().IsValidTokenPos(plr.Character:WaitForChild("HumanoidRootPart"), nre) then       
                                FarmFieldList["Mob"] = nre
                                wait(10)
                                FarmFieldList["Mob"] = nil--["Mob"]-1]] 
                            end
                        end
                    end
                end
            end
            StopFarmList["Kill"] = false
            FarmFieldList["Mob"] = nil
        end
        if Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Coconut Crab') then
            if CheckCoco() and CheckFarm("Kill") then
                StopFarmList["Kill"] = true
                getgenv().noclip = true
                tpT(CFrame.new(
                    -306.9468994140625, 119.29034423828125, 468.2838134765625), 100)  
                wait(3)
                if Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Coconut Crab') then
                    getgenv().noclip = true
                    while CheckCoco() and wait() and Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Coconut Crab')  and CheckFarm("Kill") do
                        StopFarmList["Kill"] = true
                        Killing = true

                        -- plr.Character:WaitForChild("HumanoidRootPart").CFrame =
                        --     CFrame.new(-261.811249, 115.952774, 503.228455, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                        getgenv().noclip = true
                        tpT(CFrame.new(-261.811249, 115.952774, 503.228455, 1, 0, 0, 0, 1, 0, 0, 0, 1), 100)
                        CollectAttackTokens(25,nil,true)
                    end
                    Killing = false

                    if Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Coconut Crab') and Settings['Auto Farm'] and CheckFarm("Kill") then
                        wait(5)
                        Valid = old
                        FarmFieldList["Mob"] = "Coconut Field"
                        for i = 1, 20 do
                            StopFarmList["Kill"] = false
                            wait(1)
                            FarmFieldList["Mob"] = "Coconut Field"
                            if not Settings["Auto Kill Boss"] or not table.find(Settings['Selected Boss'], 'Coconut Crab')  then
                                break
                            end
                        end
                        FarmFieldList["Mob"] = nil--["Mob"]-1]] 
                        StopFarmList["Kill"] = false
                    end
                else
                    Valid = old
                end
            end
            Valid = true
        end 

        ValidAnt=true

        if (Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Tunnel Bear')) and CheckFarm("Kill") then
            local tunnel = CheckTunnel()
            if tunnel  then
                local old = Valid
                Valid = false
                StopFarmList["Kill"] = true
                tpT(CFrame.new(521.1698608398438, 7.097253322601318, -47.2039909362793), 100)
                local k = tick()
                local target
                local st = true
                while wait() and CheckFarm("Kill") and tick() - k < 30 and (Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Tunnel Bear')) and st do
                    if not GetTunnel() then
                        break
                    end
                end
                wait(5)
                if (Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Tunnel Bear')) and CheckFarm("Kill") then
                    local ticcc=tick()
                    repeat
                        Killing = true
                        StopFarmList["Kill"] = true
                        local tun = GetTunnel()
                        wait()
                        if tun and tun:FindFirstChild("HumanoidRootPart") then
                            getgenv().noclip = true
                            plr.Character:WaitForChild("HumanoidRootPart").CFrame =
                            tun.HumanoidRootPart.CFrame + Vector3.new(0, 20, 0)
                        end
                    until not CheckTunnel() or not (Settings["Auto Kill Boss"] or not table.find(Settings['Selected Boss'], 'Tunnel Bear')) or tick() - ticcc > 60 or not CheckFarm("Kill")
                    Killing = false
                end
                getgenv().noclip = false
                wait(2)
                if (Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Tunnel Bear')) then
                    for i = 1, 3 do
                        for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                            if
                                (v.Position - plr.Character:WaitForChild("HumanoidRootPart").Position).magnitude <
                                    40 and CheckFarm("Kill")
                             then
                                Walkk(
                                    CFrame.new(
                                        v.Position.X,
                                        plr.Character:WaitForChild("HumanoidRootPart").Position.Y,
                                        v.Position.Z
                                    )
                                )
                            end
                        end
                    end
                end
                Valid = old
                StopFarmList["Kill"] = false
            end
            Valid = true
        end

        if Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Mondo Chick') and CheckFarm("Kill") then
            for i, v in pairs(game.Workspace.Monsters:GetChildren()) do
                if string.find(v.Name, "Mondo Chick") then
                    v.Name = "KillingMondo Chick"
                    Valid = false
                    repeat
                        StopFarmList["Kill"] = true
                        Killing = true
                        wait()
                        getgenv().noclip =true
                        if v:FindFirstChild("Head") then
                            tpT(CFrame.new(v.Head.Position.x + 25, 176.4, v.Head.Position.z + 25), 100)
                        end
                        CollectAttackTokens(25)
                    until not game.workspace.Monsters:FindFirstChild("KillingMondo Chick")
                    or not Settings["Auto Kill Boss"] or not table.find(Settings['Selected Boss'], 'Mondo Chick') or not CheckFarm("Kill")
                    Killing = false
                    getgenv().noclip=false
                    wait(1)
                    if Settings['Auto Farm'] and Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Mondo Chick') and CheckFarm("Kill") then
                        StopFarmList["Kill"] = false
                        plr.Character:WaitForChild("HumanoidRootPart").CFrame =
                        GetFieldByName("Mountain Top Field").CFrame
                        NoSell=true
                        wait(.2)
                        Valid = true
                        FarmFieldList["Mob"] = "Mountain Top Field"
                        for i = 1, 20 do
                            FarmFieldList["Mob"] = "Mountain Top Field"
                            if not Settings['Auto Farm'] or not Settings["Auto Kill Boss"] or not table.find(Settings['Selected Boss'], 'Mondo Chick') then
                                break
                            end
                            wait(1)
                        end
                        FarmFieldList["Mob"] = nil--["Mob"]-1]] 
                        NoSell=false
                    end
                    Valid = true
                    StopFarmList["Kill"] = false
                end
            end
        end
        if Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Commando Chick') and CheckFarm("Kill") then
            if CheckComando() then
                Valid = false
                local ToPos =
                    CFrame.new(
                        497.8621520996094, 47.29631423950195, 166.50140380859375
                )
                repeat
                    StopFarmList["Kill"] = true
                    wait()
                    tpT(ToPos, 100)
                until GetComandoMob() or not CheckComando() or not Settings["Auto Kill Boss"] or not table.find(Settings['Selected Boss'], 'Commando Chick') or not CheckFarm("Kill")
                wait(1)
                while wait() and CheckFarm("Kill") do
                    StopFarmList["Kill"] = true
                    Killing = true
                    if not CheckComando() or not Settings["Auto Kill Boss"] or not table.find(Settings['Selected Boss'], 'Commando Chick') then
                        break
                    end
                    local comman = GetComandoMob()
                    if comman then
                        Killing = true
                        getgenv().noclip = true
                        plr.Character:WaitForChild("HumanoidRootPart").CFrame = comman.HumanoidRootPart.CFrame + Vector3.new(0, 15, 0)
                        CollectAttackTokens(20)
                    else
                        plr.Character:WaitForChild("HumanoidRootPart").CFrame = ToPos
                    end
                end
                Killing = false
                getgenv().noclip = false
                plr.Character:WaitForChild("HumanoidRootPart").CFrame = ToPos
                wait(3)
                for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                    if v.Name == "C" then
                        if v:FindFirstChild("FrontDecal") and CheckFarm("Kill") then
                            if
                                (v.Position - plr.Character:WaitForChild("HumanoidRootPart").CFrame.p).magnitude <=
                                    30
                             then
                                Walkk(
                                    CFrame.new(
                                        v.Position.X,
                                        plr.Character:WaitForChild("HumanoidRootPart").Position.Y,
                                        v.Position.Z
                                    )
                                )
                            end
                        end
                    end
                end
                Valid = true
                StopFarmList["Kill"] = false
            end
        end
        if (Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'King Beetle') or AutoKing2) and CheckFarm("Kill")  then 
            if CheckKing() then
                Valid=false
                StopFarmList["Kill"] = true
                wait(.2)
                local KingSpawn = CFrame.new(167.829041, 6.20121384, 182.805527)
                --plr.Character:WaitForChild("HumanoidRootPart").CFrame = KingSpawn
                tpT( CFrame.new(219.48646545410156, 4.8614277839660645, 162.25193786621094), 100)
                repeat wait() until GetKing() or not CheckFarm("Kill") or not Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'King Beetle')
                local King = GetKing()
                getgenv().noclip = true
                repeat wait()
                    Killing = true
                    if King and King:FindFirstChild("HumanoidRootPart") then
                       plr.Character:WaitForChild("HumanoidRootPart").CFrame = King.HumanoidRootPart.CFrame*CFrame.new(0,20,0)
                    end
                until not GetKing() or not CheckKing() or not (Settings["Auto Kill Boss"] or not table.find(Settings['Selected Boss'], 'King Beetle') or AutoKing2) or not CheckFarm("Kill")
                Killing = false
                getgenv().noclip = false
                wait(2)
                for i=1,3 do 
                    for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                        if getgenv().IsToken(v) then
                            if v:FindFirstChild("FrontDecal") and CheckFarm("Kill") then
                                if
                                    (v.Position - plr.Character:WaitForChild("HumanoidRootPart").CFrame.p).magnitude <=
                                        30
                                 then
                                    Walkk(
                                        CFrame.new(
                                            v.Position.X,
                                            plr.Character:WaitForChild("HumanoidRootPart").Position.Y,
                                            v.Position.Z
                                        ),v
                                    )
                                end
                            end
                        end
                    end
                end
                Valid=true
                StopFarmList["Kill"] = false
            end
        end
        if (Settings["Auto Kill Boss"] and table.find(Settings['Selected Boss'], 'Snow Bear (Beemas)')) and CheckFarm("Kill") then 
            for k,v in pairs(game.Workspace.Monsters:GetChildren()) do 
                if string.match(v.Name:lower(),"snowbear") then 
                    if v:FindFirstChild("HumanoidRootPart") then 
                        repeat wait()
                            getgenv().noclip = false
                            Killing = true
                            StopFarmList["Kill"] = true
                            ValidTB["Snowbear"] = true
                        if v:FindFirstChild("HumanoidRootPart") then 
                            tpT(v.HumanoidRootPart.CFrame*CFrame.new(5,-10,0), 100)
                        end
                        until not v.Parent or not v:FindFirstChild("HumanoidRootPart") or not v:FindFirstChild("Humanoid") or v.Humanoid.Health==0 or not Settings["Auto Kill Boss"] or not table.find(Settings['Selected Boss'], 'Snow Bear (Beemas)') or not CheckFarm("Kill")
                        Killing = false
                        getgenv().noclip = false
                        ValidTB["Snowbear"] = false
                        StopFarmList["Kill"] = false
                    end
                end
            end
        end
        FarmFieldList["Mob"] = nil--["Mob"]-1]] 
        Valid=true
        StopFarmList["Kill"] = false
        getgenv().noclip =false
    end
end

for k,v in pairs(SpawnTable) do 
    spawn(v)
end

spawn(function()
    local RunService = game:GetService("RunService")
    local plr = game.Players.LocalPlayer
    RunService.Stepped:Connect(function()
        pcall(function()
            if Settings['Auto Farm'] then
                for r, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end
            if plr.Character:WaitForChild('Humanoid').Sit and getgenv().noclip then
                getgenv().noclip = false
                plr.Character:WaitForChild('Humanoid').Sit = false
            end
            if getgenv().noclip then
                if not game.Players.LocalPlayer.Character.Head:FindFirstChild("BodyVelocity") then
                    local ag = Instance.new("BodyVelocity")
                    ag.Velocity = Vector3.new(0, 0, 0)
                    ag.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                    ag.P = 9000
                    ag.Parent = game.Players.LocalPlayer.Character.Head
                end
            elseif not getgenv().noclip and game.Players.LocalPlayer.Character.Head:FindFirstChild("BodyVelocity") then
                game.Players.LocalPlayer.Character.Head:FindFirstChild("BodyVelocity"):Destroy()
            end
        end)
    end)
end)
